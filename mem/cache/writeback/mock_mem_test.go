// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/akita/mem (interfaces: WriteBuffer)

package writeback

import (
	gomock "github.com/golang/mock/gomock"
	akita "gitlab.com/akita/akita"
	mem "gitlab.com/akita/mem"
	reflect "reflect"
)

// MockWriteBuffer is a mock of WriteBuffer interface
type MockWriteBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockWriteBufferMockRecorder
}

// MockWriteBufferMockRecorder is the mock recorder for MockWriteBuffer
type MockWriteBufferMockRecorder struct {
	mock *MockWriteBuffer
}

// NewMockWriteBuffer creates a new mock instance
func NewMockWriteBuffer(ctrl *gomock.Controller) *MockWriteBuffer {
	mock := &MockWriteBuffer{ctrl: ctrl}
	mock.recorder = &MockWriteBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteBuffer) EXPECT() *MockWriteBufferMockRecorder {
	return m.recorder
}

// CanEnqueue mocks base method
func (m *MockWriteBuffer) CanEnqueue() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanEnqueue")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanEnqueue indicates an expected call of CanEnqueue
func (mr *MockWriteBufferMockRecorder) CanEnqueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanEnqueue", reflect.TypeOf((*MockWriteBuffer)(nil).CanEnqueue))
}

// Enqueue mocks base method
func (m *MockWriteBuffer) Enqueue(arg0 *mem.WriteReq) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enqueue", arg0)
}

// Enqueue indicates an expected call of Enqueue
func (mr *MockWriteBufferMockRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockWriteBuffer)(nil).Enqueue), arg0)
}

// Query mocks base method
func (m *MockWriteBuffer) Query(arg0 *mem.ReadReq) *mem.WriteReq {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(*mem.WriteReq)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockWriteBufferMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockWriteBuffer)(nil).Query), arg0)
}

// SetWriteCombineGranularity mocks base method
func (m *MockWriteBuffer) SetWriteCombineGranularity(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWriteCombineGranularity", arg0)
}

// SetWriteCombineGranularity indicates an expected call of SetWriteCombineGranularity
func (mr *MockWriteBufferMockRecorder) SetWriteCombineGranularity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteCombineGranularity", reflect.TypeOf((*MockWriteBuffer)(nil).SetWriteCombineGranularity), arg0)
}

// Tick mocks base method
func (m *MockWriteBuffer) Tick(arg0 akita.VTimeInSec) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tick", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Tick indicates an expected call of Tick
func (mr *MockWriteBufferMockRecorder) Tick(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockWriteBuffer)(nil).Tick), arg0)
}
