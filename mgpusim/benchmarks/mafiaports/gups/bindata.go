// Code generated by "esc -o bindata.go -pkg gups -private kernels.hsaco"; DO NOT EDIT.

package gups

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9568,
		modtime: 1655200447,
		compressed: `
H4sIAAAAAAAC/+xaz2/TVhz/+sVxHbcIhjgAm4SHpnarltRNSxW6w/prdIi2FMrPTYi92C9pwLEj26ma
TQsNaHCpRLXtzj+w845r+RNgVw7bgctOXLbjMj37vcROEyiCCbT5IyVf+/v7+/xsv/f8bn22cAoJwhQw
JOA3EOjBgeCcC746HtBhn5cDGaZgABSQAEAM6XXSHSFKZcYXmF0vmP1RyvOhdsnQeScdQFEatqO5gsr4
HbQCUcrt0Eva8frOP/UMcQ924fwozj31DAleHiJvT153B30mR6kYspNZ/OnFOV+dX5t3/f4Q8EXoa9XG
edOLc/PLFwPdIwDQz/i4bBR1K43LBv2tujidLhbWc9oY82vJAArTTafTyiXiuCXbmlQ5vlRHP1Y19Zpy
hjgWMd1JRVXT6hIuk7aOqqrnsWXY5WldJ657sWJgjyiUvVIr520zpD20W3HqpjHkKy9gq1jFxbbjsxVi
zS6osxFpK0M/s6x6zZdOO0U/NYou6V3AeZOslL4mSotTq5CIWtW0rWJLTHUjHnIt0bRZKlqTXUWXsFkl
Z0qWwcUzNZ8VVaChucLFifG2Y10/V8Vm2/UcKeCq6b2grN4lDfk1DQ+97qrmTTuPzZlqoUCcPZZmGM5K
BeuEFxi4eIXSVzzseO7/ovbXlPnnJcMgVhD8bKHgEu9K7wJOtwr4F+NffcPxv3gD8Zds6zmPg9O5PXab
OKs3ltVi1fRK807JWKlZ+rRTfOUMZ22DLDt2pfUCo69a7BRXSLFMLC9IPqcx4bxjVytMdKq0ToxAzsXL
TmkNe6S3QtQ5K58nehmvkYJj86Cq2roNlqrllfnl826rqUZzbcmliIQLFvH6KRN7l23nZpC07zN7YkLJ
ZDJK7/ETHfMcTUi7xpFC6He0pX1ApuffTP7wKwoNtYSww91jDogRI0aMtwkCe34J/uwu0fEQ240G/ARb
/lwv+jBdDh0fbM0U2RxTFKVms9l8G+tPgLJD6S3Y3IZmqtHcD9A8lvr5E/huO5FQdujr4I6Adg7TdhLQ
Dp2/biBUhwepLWqzD4n11I+p+2JTvEsrlEX5e0mWGhJAFuD+4zu0dVOpxgBAFiVQDuDCExovtalsKQ/6
t+ChuCE8TN7eEO7+UoHN7QdIPo7g/uMGILgny4NiUhxOSsqgKMqDIvUnI0iggboIRx4hGUES3nsk9dMr
eOGJCCBJDWlDQVDvR6jet9F3W4LH36IE1BMJVK/f+OMujZHYLw2jfeIwgPdERAC/N+9tAzS247shRowY
MWLEiBEjRowYMf674N+an7HpPP/cfpjRJKNXmIDP+g8x+uffTZtSlcn5d+Wp/u7xdBNbRXUt+J6qjo5m
tIymfjjiOvoIWfeIY2FzxDTXyumKY98gujcSGGhjuTFsjOqFvIZzRDuR17CW1UhuYiw7rmmjJ8cnsrl8
dnzsI4CFknWTOJPqwsLcXvybpvEy3p+3jkJbc/OdKL+P8eWDUf4+3voHovyT9A/1tfcLMAz2WJ+GjGV7
BDJGzXJrZcgUrWpmFburwP4p33Mg45F1zz/D5ZIOGd0ul4nlQcatlT2ch4y76npOcBRQmJnRrmf9/7Eu
i9kfmLaOzW6r3Nfnri5NL56efX3rU32hNfZe+xpaa02wu/37Q2a8n3Oqhfq5ENq/wfv/fgD4q9m0uT3v
5y3akVZHOv6+iGRIzu8LTg932Isd9Bjbb4E67kNOD3Xth20Mhfe+QO/9Mr0cpJltgjN67GNJdtTPw0ww
l1pHmAqz3+4RntNPw9c+BO39gG5B+7mV7HL95sO5h7DD7K++oP3O9bA/wvZDzbzA/p8AAAD//x98ENdg
JQAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
