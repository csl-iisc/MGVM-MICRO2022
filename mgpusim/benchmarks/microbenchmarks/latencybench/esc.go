// Code generated by "esc -o esc.go -pkg latencybench -private kernels.hsaco"; DO NOT EDIT.

package latencybench

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    31504,
		modtime: 1624208947,
		compressed: `
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
TRB7AAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
