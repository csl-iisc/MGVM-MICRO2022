; ModuleID = 'kernels.cl'
source_filename = "kernels.cl"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: nofree norecurse nounwind writeonly
define protected amdgpu_kernel void @IdleLoop(i32 addrspace(1)* nocapture %0, i32 %1) local_unnamed_addr #0 !kernel_arg_addr_space !4 !kernel_arg_access_qual !5 !kernel_arg_type !6 !kernel_arg_base_type !6 !kernel_arg_type_qual !7 !kernel_arg_name !8 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %6, %2
  %5 = phi i32 [ 0, %2 ], [ %9, %6 ]
  store i32 %5, i32 addrspace(1)* %0, align 4, !tbaa !9
  ret void

6:                                                ; preds = %2, %6
  %7 = phi i32 [ %10, %6 ], [ 0, %2 ]
  %8 = phi i32 [ %9, %6 ], [ %1, %2 ]
  %9 = shl i32 %8, 1
  %10 = add nuw nsw i32 %7, 1
  %11 = icmp eq i32 %10, %1
  br i1 %11, label %4, label %6
}

; Function Attrs: nofree norecurse nounwind
define protected amdgpu_kernel void @NarrowStridedRead(i32 addrspace(1)* nocapture %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #1 !kernel_arg_addr_space !13 !kernel_arg_access_qual !14 !kernel_arg_type !15 !kernel_arg_base_type !15 !kernel_arg_type_qual !16 !kernel_arg_name !17 {
  %5 = icmp ult i32 %1, %2
  br i1 %5, label %8, label %6

6:                                                ; preds = %8, %4
  %7 = phi i32 [ 0, %4 ], [ %14, %8 ]
  store i32 %7, i32 addrspace(1)* %0, align 4, !tbaa !9
  ret void

8:                                                ; preds = %4, %8
  %9 = phi i32 [ %14, %8 ], [ 0, %4 ]
  %10 = phi i32 [ %15, %8 ], [ %1, %4 ]
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %11
  %13 = load i32, i32 addrspace(1)* %12, align 4, !tbaa !9
  %14 = add i32 %13, %9
  %15 = add i32 %10, %3
  %16 = icmp ult i32 %15, %2
  br i1 %16, label %8, label %6
}

; Function Attrs: norecurse nounwind readnone
define protected amdgpu_kernel void @WideStridedRead(i32 addrspace(1)* nocapture %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #2 !kernel_arg_addr_space !18 !kernel_arg_access_qual !19 !kernel_arg_type !20 !kernel_arg_base_type !20 !kernel_arg_type_qual !21 !kernel_arg_name !22 {
  br label %6

6:                                                ; preds = %6, %5
  %7 = phi i32 [ %1, %5 ], [ %9, %6 ]
  %8 = icmp ult i32 %7, %2
  %9 = add i32 %7, %4
  br i1 %8, label %6, label %10

10:                                               ; preds = %6
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z13get_global_idj(i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind writeonly
define protected amdgpu_kernel void @NarrowStridedWrite(i32 addrspace(1)* nocapture %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #0 !kernel_arg_addr_space !13 !kernel_arg_access_qual !14 !kernel_arg_type !15 !kernel_arg_base_type !15 !kernel_arg_type_qual !16 !kernel_arg_name !17 {
  %5 = icmp ult i32 %1, %2
  br i1 %5, label %7, label %6

6:                                                ; preds = %7, %4
  ret void

7:                                                ; preds = %4, %7
  %8 = phi i32 [ %11, %7 ], [ %1, %4 ]
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %9
  store i32 %8, i32 addrspace(1)* %10, align 4, !tbaa !9
  %11 = add i32 %8, %3
  %12 = icmp ult i32 %11, %2
  br i1 %12, label %7, label %6
}

; Function Attrs: convergent nofree norecurse nounwind writeonly
define protected amdgpu_kernel void @WideStridedWrite(i32 addrspace(1)* nocapture %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #4 !kernel_arg_addr_space !18 !kernel_arg_access_qual !19 !kernel_arg_type !20 !kernel_arg_base_type !20 !kernel_arg_type_qual !21 !kernel_arg_name !22 {
  %6 = tail call i64 @_Z13get_global_idj(i32 0) #6
  %7 = trunc i64 %6 to i32
  %8 = icmp ult i32 %1, %2
  br i1 %8, label %10, label %9

9:                                                ; preds = %10, %5
  ret void

10:                                               ; preds = %5, %10
  %11 = phi i32 [ %15, %10 ], [ %1, %5 ]
  %12 = add nsw i32 %11, %7
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %13
  store i32 42, i32 addrspace(1)* %14, align 4, !tbaa !9
  %15 = add i32 %11, %4
  %16 = icmp ult i32 %15, %2
  br i1 %16, label %10, label %9
}

; Function Attrs: convergent nofree norecurse nounwind writeonly
define protected amdgpu_kernel void @NarrowStridedReadRemote(i32 addrspace(1)* nocapture %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #4 !kernel_arg_addr_space !23 !kernel_arg_access_qual !24 !kernel_arg_type !25 !kernel_arg_base_type !25 !kernel_arg_type_qual !26 !kernel_arg_name !27 {
  %7 = tail call i64 @_Z12get_group_idj(i32 0) #6
  %8 = tail call i64 @_Z12get_local_idj(i32 0) #6
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %28

11:                                               ; preds = %6
  %12 = trunc i64 %7 to i32
  %13 = icmp ult i32 %12, %5
  br i1 %13, label %14, label %22

14:                                               ; preds = %11
  %15 = icmp eq i32 %4, 0
  br i1 %15, label %26, label %16

16:                                               ; preds = %14, %16
  %17 = phi i32 [ %19, %16 ], [ %4, %14 ]
  %18 = phi i32 [ %20, %16 ], [ 0, %14 ]
  %19 = shl i32 %17, 1
  %20 = add nuw nsw i32 %18, 1
  %21 = icmp eq i32 %20, %4
  br i1 %21, label %26, label %16

22:                                               ; preds = %11, %22
  %23 = phi i32 [ %25, %22 ], [ %1, %11 ]
  %24 = icmp ult i32 %23, %2
  %25 = add i32 %23, %3
  br i1 %24, label %22, label %26

26:                                               ; preds = %22, %16, %14
  %27 = phi i32 [ 0, %14 ], [ %19, %16 ], [ 0, %22 ]
  store i32 %27, i32 addrspace(1)* %0, align 4, !tbaa !9
  br label %28

28:                                               ; preds = %26, %6
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z12get_group_idj(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z12get_local_idj(i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind
define protected amdgpu_kernel void @PChase(i32 addrspace(1)* nocapture %0, i32 %1) local_unnamed_addr #1 !kernel_arg_addr_space !4 !kernel_arg_access_qual !5 !kernel_arg_type !6 !kernel_arg_base_type !6 !kernel_arg_type_qual !7 !kernel_arg_name !28 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %6, %2
  %5 = phi i32 [ 0, %2 ], [ %13, %6 ]
  store i32 %5, i32 addrspace(1)* %0, align 4, !tbaa !9
  ret void

6:                                                ; preds = %2, %6
  %7 = phi i32 [ %12, %6 ], [ 0, %2 ]
  %8 = phi i32 [ %14, %6 ], [ 0, %2 ]
  %9 = phi i32 [ %13, %6 ], [ 0, %2 ]
  %10 = zext i32 %7 to i64
  %11 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %10
  %12 = load i32, i32 addrspace(1)* %11, align 4, !tbaa !9
  %13 = add i32 %12, %9
  %14 = add nuw nsw i32 %8, 1
  %15 = icmp eq i32 %14, %1
  br i1 %15, label %4, label %6
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @TwoBlockOneDelayedPChase(i32 addrspace(1)* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #5 !kernel_arg_addr_space !29 !kernel_arg_access_qual !30 !kernel_arg_type !31 !kernel_arg_base_type !31 !kernel_arg_type_qual !32 !kernel_arg_name !33 {
  %4 = tail call i64 @_Z12get_group_idj(i32 0) #6
  %5 = trunc i64 %4 to i32
  %6 = tail call i64 @_Z12get_local_idj(i32 0) #6
  %7 = trunc i64 %6 to i32
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %9, label %25

9:                                                ; preds = %3
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %11, label %66

11:                                               ; preds = %9
  %12 = icmp eq i32 %2, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %15, %11
  %14 = phi i32 [ %1, %11 ], [ %22, %15 ]
  store i32 %14, i32 addrspace(1)* %0, align 4, !tbaa !9
  br label %66

15:                                               ; preds = %11, %15
  %16 = phi i32 [ %21, %15 ], [ 0, %11 ]
  %17 = phi i32 [ %22, %15 ], [ %1, %11 ]
  %18 = phi i32 [ %23, %15 ], [ 0, %11 ]
  %19 = zext i32 %16 to i64
  %20 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %19
  %21 = load i32, i32 addrspace(1)* %20, align 4, !tbaa !9
  %22 = add i32 %21, %17
  %23 = add nuw nsw i32 %18, 1
  %24 = icmp eq i32 %23, %2
  br i1 %24, label %13, label %15

25:                                               ; preds = %3
  %26 = icmp slt i32 %5, 4
  %27 = icmp eq i32 %7, 0
  br i1 %26, label %28, label %39

28:                                               ; preds = %25
  br i1 %27, label %29, label %66

29:                                               ; preds = %28
  %30 = icmp eq i32 %1, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %33, %29
  %32 = phi i32 [ 0, %29 ], [ %36, %33 ]
  store i32 %32, i32 addrspace(1)* %0, align 4, !tbaa !9
  br label %66

33:                                               ; preds = %29, %33
  %34 = phi i32 [ %37, %33 ], [ 0, %29 ]
  %35 = phi i32 [ %36, %33 ], [ %1, %29 ]
  %36 = shl nsw i32 %35, 1
  %37 = add nuw nsw i32 %34, 1
  %38 = icmp eq i32 %37, %1
  br i1 %38, label %31, label %33

39:                                               ; preds = %25
  br i1 %27, label %40, label %66

40:                                               ; preds = %39
  %41 = icmp eq i32 %1, 0
  br i1 %41, label %42, label %48

42:                                               ; preds = %48, %40
  %43 = phi i32 [ 0, %40 ], [ %51, %48 ]
  store i32 %43, i32 addrspace(1)* %0, align 4, !tbaa !9
  %44 = icmp eq i32 %2, 0
  br i1 %44, label %54, label %45

45:                                               ; preds = %42
  %46 = add i32 %43, %1
  %47 = icmp eq i32 %2, 1
  br i1 %47, label %54, label %56

48:                                               ; preds = %40, %48
  %49 = phi i32 [ %52, %48 ], [ 0, %40 ]
  %50 = phi i32 [ %51, %48 ], [ %1, %40 ]
  %51 = shl nsw i32 %50, 1
  %52 = add nuw nsw i32 %49, 1
  %53 = icmp eq i32 %52, %1
  br i1 %53, label %42, label %48

54:                                               ; preds = %56, %45, %42
  %55 = phi i32 [ %1, %42 ], [ %46, %45 ], [ %63, %56 ]
  store i32 %55, i32 addrspace(1)* %0, align 4, !tbaa !9
  br label %66

56:                                               ; preds = %45, %56
  %57 = phi i32 [ %64, %56 ], [ 1, %45 ]
  %58 = phi i32 [ %63, %56 ], [ %46, %45 ]
  %59 = phi i32 [ %62, %56 ], [ %43, %45 ]
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %60
  %62 = load i32, i32 addrspace(1)* %61, align 4, !tbaa !9
  %63 = add i32 %62, %58
  %64 = add nuw nsw i32 %57, 1
  %65 = icmp eq i32 %64, %2
  br i1 %65, label %54, label %56

66:                                               ; preds = %31, %28, %54, %39, %9, %13
  ret void
}

attributes #0 = { nofree norecurse nounwind writeonly "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { convergent nofree norecurse nounwind writeonly "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { convergent nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { convergent nounwind readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 1, i32 2}
!3 = !{!"clang version 11.0.0 (/src/external/llvm-project/clang 0383ad1cfb0a8e05b0a020e8632400194628b243)"}
!4 = !{i32 1, i32 0}
!5 = !{!"none", !"none"}
!6 = !{!"uint*", !"uint"}
!7 = !{!"", !""}
!8 = !{!"array", !"loopCount"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C/C++ TBAA"}
!13 = !{i32 1, i32 0, i32 0, i32 0}
!14 = !{!"none", !"none", !"none", !"none"}
!15 = !{!"uint*", !"uint", !"uint", !"uint"}
!16 = !{!"", !"", !"", !""}
!17 = !{!"array", !"start", !"end", !"stride"}
!18 = !{i32 1, i32 0, i32 0, i32 0, i32 0}
!19 = !{!"none", !"none", !"none", !"none", !"none"}
!20 = !{!"uint*", !"uint", !"uint", !"uint", !"uint"}
!21 = !{!"", !"", !"", !"", !""}
!22 = !{!"array", !"start", !"end", !"threads", !"stride"}
!23 = !{i32 1, i32 0, i32 0, i32 0, i32 0, i32 0}
!24 = !{!"none", !"none", !"none", !"none", !"none", !"none"}
!25 = !{!"uint*", !"uint", !"uint", !"uint", !"uint", !"uint"}
!26 = !{!"", !"", !"", !"", !"", !""}
!27 = !{!"array", !"start", !"end", !"stride", !"loopCount", !"remoteStart"}
!28 = !{!"array", !"length"}
!29 = !{i32 1, i32 0, i32 0}
!30 = !{!"none", !"none", !"none"}
!31 = !{!"uint*", !"uint", !"uint"}
!32 = !{!"", !"", !""}
!33 = !{!"array", !"loopCount", !"length"}
