// Code generated by "esc -private -o esc.go -pkg relu ./kernels.hsaco"; DO NOT EDIT.

package relu

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    9360,
		modtime: 1592039480,
		compressed: `
H4sIAAAAAAAC/+xazW/cRBR/9jqblQMiCAmVD4kBIUWqWGuzTcMqQiKbhKRVN2k+aJqAqmqynnVM/LHy
R8hWIg0cUA45FE4cgL+Av4FE4s6Bcw9c+g8gwZFFtmfWYzduUtGoSMxPin/2e/Nm3rPf2nkzc/+j1rws
SdNAUYLfQYpORpNrpnjwdsKXY1kDKjANL4AKZQBQuHZ5PpGyXKFyidoV4Qc1y8yfyG6Iu87zkZRl3i7y
FRCV57gLWWZ28lPasfhWHwW6cg473r8IK48CvQxPD4XdTxlSxzneqGRZ4ewqdPzm4lzcnD2bN+J8SOQK
DA9iY7Lm4tzC8q2kbZQeI1SObd1oO1Vs69Hfto8jMsx7batqdPYatSu0/1+HAVRqU61W1XXi+abrTCGG
T9H4e6iG7qg3iOcQy081KkJVtIRtkooQQqukdWve9T7Hnq5G12s9e8u1uGZjXIvpHX0sbtXCjhFiI+3q
Zpc4sy00m9EOnIudqqM7sbbpGX7GBTWhU5xru6ETqOzq416XZJqYnHLNvJe1nRiompZpOFOnqtaxFZIb
pqMz9UwvFmUbRAOzBtev1NOO2+2VEFtp13Okg0MrKA7IdIqjGetYLg4ujxWH1CgOqVEc0oLlbmFrJux0
iFcc1zwfl657a13cJiy6pIt/EbcbBv+LwJ+R59dMXSdOMvjNTscnwcYTMnJy4uLH33zO43/yHMZfcp0n
vQga50wb4dV5vZp1dbLsud3B54FaRZ8y7BlrxLCJEyR+v89+tQueG3apat7cI3qir1H1smfu4oAUN8h2
TiNn/t7Gu6TjuWxQhAa5thTaawvLq+mXbHw81axnNFepYhHvzVs4uO16O4nTcZ/1q5Oqpmlq8f8pEvf3
eoFOQEBAQODiIdESUYqru9KZL+Am/AQP4lov+5K/xp2PJBV6WpsqSrnf7/f/i/F/BfJJVIv+AvJJUtuW
Ty4BwH04Opb70teR1xWp8m0FoA4g10vy4RefoYOfX4HD4xKoJ9FdO5BhH+Cb334EObaT5PI+gFIvlcoN
gOWHMoBckiv7MkBdKcmNLhwd/6Eo6oGivArQfZjU6F8ei2wUEBAQEBAQEBAQEBAQuCiwteYNldXuCS5R
ZpX891SvcvMGEf78u+9G3KUKtq58VDAH3DKdHeJNoVZrDk1oNWhb2DHQbrK4ihpaDZ09XxF5/cHLWfkw
lR/m5C9GPsvlx/YHvBYd5OF0XZ5Bc9yAgKb3HL9ng2Y4obaN/W2gx0geeKAFZC+Ir7BttkFru7ZNnAA0
v2cHeAs0f9sPvOQsYZiZqd0dj4914Jah4e7c5lJz8frss5vPGeaW/4v2AQzmZuDx+zjCmbG8YMznhcTt
d2DylwDgr37fZfYsLxi/mXMr5078XIY4PcsjxqM5eyXHb9H9CXIubxlLp+ZTijF+rwgU7y8p6qBKbUtM
ULDvYygXPxtmknZZyw3TpfbvFgzP+EP+2XP4jtrvQfo7Hzrl+S3wvnMYpft/Ns+4fysF9ia1f+cM+38C
AAD//9O2cnWQJAAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
