; ModuleID = 'operator.cl'
source_filename = "operator.cl"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: norecurse nounwind readonly
define hidden i32 @numElement(i32 addrspace(1)* nocapture readonly %0, i32 %1) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %6, label %4

4:                                                ; preds = %6, %2
  %5 = phi i32 [ 1, %2 ], [ %12, %6 ]
  ret i32 %5

6:                                                ; preds = %2, %6
  %7 = phi i32 [ %13, %6 ], [ 0, %2 ]
  %8 = phi i32 [ %12, %6 ], [ 1, %2 ]
  %9 = zext i32 %7 to i64
  %10 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %9
  %11 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !4
  %12 = mul nsw i32 %11, %8
  %13 = add nuw nsw i32 %7, 1
  %14 = icmp eq i32 %13, %1
  br i1 %14, label %4, label %6
}

; Function Attrs: nofree norecurse nounwind
define hidden void @unflatIndex(i32 addrspace(1)* nocapture %0, i32 %1, i32 addrspace(1)* nocapture readonly %2, i32 %3) local_unnamed_addr #1 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %29

6:                                                ; preds = %4, %6
  %7 = phi i32 [ %13, %6 ], [ 0, %4 ]
  %8 = phi i32 [ %12, %6 ], [ 1, %4 ]
  %9 = zext i32 %7 to i64
  %10 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %9
  %11 = load i32, i32 addrspace(1)* %10, align 4, !tbaa !4
  %12 = mul nsw i32 %11, %8
  %13 = add nuw nsw i32 %7, 1
  %14 = icmp eq i32 %13, %3
  br i1 %14, label %15, label %6

15:                                               ; preds = %6, %15
  %16 = phi i32 [ %25, %15 ], [ %1, %6 ]
  %17 = phi i32 [ %22, %15 ], [ %12, %6 ]
  %18 = phi i32 [ %27, %15 ], [ 0, %6 ]
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %19
  %21 = load i32, i32 addrspace(1)* %20, align 4, !tbaa !4
  %22 = sdiv i32 %17, %21
  %23 = sdiv i32 %16, %22
  %24 = mul nsw i32 %23, %22
  %25 = sub nsw i32 %16, %24
  %26 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %19
  store i32 %23, i32 addrspace(1)* %26, align 4, !tbaa !4
  %27 = add nuw nsw i32 %18, 1
  %28 = icmp eq i32 %27, %3
  br i1 %28, label %29, label %15

29:                                               ; preds = %15, %4
  ret void
}

; Function Attrs: norecurse nounwind readonly
define hidden i32 @flatIndex(i32 addrspace(1)* nocapture readonly %0, i32 addrspace(1)* nocapture readonly %1, i32 %2) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %7, %3
  %6 = phi i32 [ 0, %3 ], [ %17, %7 ]
  ret i32 %6

7:                                                ; preds = %3, %7
  %8 = phi i32 [ %21, %7 ], [ 0, %3 ]
  %9 = phi i32 [ %20, %7 ], [ 1, %3 ]
  %10 = phi i32 [ %17, %7 ], [ 0, %3 ]
  %11 = xor i32 %8, -1
  %12 = add i32 %11, %2
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %13
  %15 = load i32, i32 addrspace(1)* %14, align 4, !tbaa !4
  %16 = mul nsw i32 %15, %9
  %17 = add nsw i32 %16, %10
  %18 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %13
  %19 = load i32, i32 addrspace(1)* %18, align 4, !tbaa !4
  %20 = mul nsw i32 %19, %9
  %21 = add nuw nsw i32 %8, 1
  %22 = icmp eq i32 %21, %2
  br i1 %22, label %5, label %7
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @transpose_tensor(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture %1, i32 addrspace(1)* nocapture readonly %2, i32 addrspace(1)* nocapture readonly %3, i32 addrspace(1)* nocapture readonly %4, i32 addrspace(1)* nocapture %5, i32 addrspace(1)* nocapture %6, i32 %7) local_unnamed_addr #2 !kernel_arg_addr_space !8 !kernel_arg_access_qual !9 !kernel_arg_type !10 !kernel_arg_base_type !10 !kernel_arg_type_qual !11 !kernel_arg_name !12 {
  %9 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %10 = trunc i64 %9 to i32
  %11 = mul nsw i32 %10, %7
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %12
  %14 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %12
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %57

16:                                               ; preds = %8, %16
  %17 = phi i32 [ %23, %16 ], [ 0, %8 ]
  %18 = phi i32 [ %22, %16 ], [ 1, %8 ]
  %19 = zext i32 %17 to i64
  %20 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %19
  %21 = load i32, i32 addrspace(1)* %20, align 4, !tbaa !4
  %22 = mul nsw i32 %21, %18
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, %7
  br i1 %24, label %25, label %16

25:                                               ; preds = %16, %25
  %26 = phi i32 [ %35, %25 ], [ %10, %16 ]
  %27 = phi i32 [ %32, %25 ], [ %22, %16 ]
  %28 = phi i32 [ %37, %25 ], [ 0, %16 ]
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %29
  %31 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !4
  %32 = sdiv i32 %27, %31
  %33 = sdiv i32 %26, %32
  %34 = mul nsw i32 %33, %32
  %35 = sub nsw i32 %26, %34
  %36 = getelementptr inbounds i32, i32 addrspace(1)* %14, i64 %29
  store i32 %33, i32 addrspace(1)* %36, align 4, !tbaa !4
  %37 = add nuw nsw i32 %28, 1
  %38 = icmp eq i32 %37, %7
  br i1 %38, label %66, label %25

39:                                               ; preds = %66, %39
  %40 = phi i32 [ %53, %39 ], [ 0, %66 ]
  %41 = phi i32 [ %52, %39 ], [ 1, %66 ]
  %42 = phi i32 [ %49, %39 ], [ 0, %66 ]
  %43 = xor i32 %40, -1
  %44 = add i32 %43, %7
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %45
  %47 = load i32, i32 addrspace(1)* %46, align 4, !tbaa !4
  %48 = mul nsw i32 %47, %41
  %49 = add nsw i32 %48, %42
  %50 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %45
  %51 = load i32, i32 addrspace(1)* %50, align 4, !tbaa !4
  %52 = mul nsw i32 %51, %41
  %53 = add nuw nsw i32 %40, 1
  %54 = icmp eq i32 %53, %7
  br i1 %54, label %55, label %39

55:                                               ; preds = %39
  %56 = sext i32 %49 to i64
  br label %57

57:                                               ; preds = %8, %55
  %58 = phi i64 [ %56, %55 ], [ 0, %8 ]
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %58
  %60 = bitcast float addrspace(1)* %59 to i32 addrspace(1)*
  %61 = load i32, i32 addrspace(1)* %60, align 4, !tbaa !13
  %62 = shl i64 %9, 32
  %63 = ashr exact i64 %62, 32
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = bitcast float addrspace(1)* %64 to i32 addrspace(1)*
  store i32 %61, i32 addrspace(1)* %65, align 4, !tbaa !13
  ret void

66:                                               ; preds = %25, %66
  %67 = phi i32 [ %75, %66 ], [ 0, %25 ]
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32 addrspace(1)* %14, i64 %68
  %70 = load i32, i32 addrspace(1)* %69, align 4, !tbaa !4
  %71 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %68
  %72 = load i32, i32 addrspace(1)* %71, align 4, !tbaa !4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %73
  store i32 %70, i32 addrspace(1)* %74, align 4, !tbaa !4
  %75 = add nuw nsw i32 %67, 1
  %76 = icmp eq i32 %75, %7
  br i1 %76, label %39, label %66
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z13get_global_idj(i32) local_unnamed_addr #3

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @rotate_tensor(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture %1, i32 addrspace(1)* nocapture readonly %2, i32 addrspace(1)* nocapture readonly %3, i32 addrspace(1)* nocapture %4, i32 addrspace(1)* nocapture %5, i32 %6) local_unnamed_addr #2 !kernel_arg_addr_space !15 !kernel_arg_access_qual !16 !kernel_arg_type !17 !kernel_arg_base_type !17 !kernel_arg_type_qual !18 !kernel_arg_name !19 {
  %8 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %9 = trunc i64 %8 to i32
  %10 = mul nsw i32 %9, %6
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %11
  %13 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %11
  %14 = icmp sgt i32 %6, 0
  br i1 %14, label %15, label %38

15:                                               ; preds = %7, %15
  %16 = phi i32 [ %22, %15 ], [ 0, %7 ]
  %17 = phi i32 [ %21, %15 ], [ 1, %7 ]
  %18 = zext i32 %16 to i64
  %19 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %18
  %20 = load i32, i32 addrspace(1)* %19, align 4, !tbaa !4
  %21 = mul nsw i32 %20, %17
  %22 = add nuw nsw i32 %16, 1
  %23 = icmp eq i32 %22, %6
  br i1 %23, label %24, label %15

24:                                               ; preds = %15, %24
  %25 = phi i32 [ %34, %24 ], [ %9, %15 ]
  %26 = phi i32 [ %31, %24 ], [ %21, %15 ]
  %27 = phi i32 [ %36, %24 ], [ 0, %15 ]
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %28
  %30 = load i32, i32 addrspace(1)* %29, align 4, !tbaa !4
  %31 = sdiv i32 %26, %30
  %32 = sdiv i32 %25, %31
  %33 = mul nsw i32 %32, %31
  %34 = sub nsw i32 %25, %33
  %35 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %28
  store i32 %32, i32 addrspace(1)* %35, align 4, !tbaa !4
  %36 = add nuw nsw i32 %27, 1
  %37 = icmp eq i32 %36, %6
  br i1 %37, label %84, label %24

38:                                               ; preds = %84, %7
  %39 = add nsw i32 %6, -1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %40
  %42 = load i32, i32 addrspace(1)* %41, align 4, !tbaa !4
  %43 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %40
  %44 = load i32, i32 addrspace(1)* %43, align 4, !tbaa !4
  %45 = xor i32 %44, -1
  %46 = add i32 %42, %45
  %47 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %40
  store i32 %46, i32 addrspace(1)* %47, align 4, !tbaa !4
  %48 = add nsw i32 %6, -2
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %49
  %51 = load i32, i32 addrspace(1)* %50, align 4, !tbaa !4
  %52 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %49
  %53 = load i32, i32 addrspace(1)* %52, align 4, !tbaa !4
  %54 = xor i32 %53, -1
  %55 = add i32 %51, %54
  %56 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %49
  store i32 %55, i32 addrspace(1)* %56, align 4, !tbaa !4
  br i1 %14, label %57, label %75

57:                                               ; preds = %38, %57
  %58 = phi i32 [ %71, %57 ], [ 0, %38 ]
  %59 = phi i32 [ %70, %57 ], [ 1, %38 ]
  %60 = phi i32 [ %67, %57 ], [ 0, %38 ]
  %61 = xor i32 %58, -1
  %62 = add i32 %61, %6
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %63
  %65 = load i32, i32 addrspace(1)* %64, align 4, !tbaa !4
  %66 = mul nsw i32 %65, %59
  %67 = add nsw i32 %66, %60
  %68 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %63
  %69 = load i32, i32 addrspace(1)* %68, align 4, !tbaa !4
  %70 = mul nsw i32 %69, %59
  %71 = add nuw nsw i32 %58, 1
  %72 = icmp eq i32 %71, %6
  br i1 %72, label %73, label %57

73:                                               ; preds = %57
  %74 = sext i32 %67 to i64
  br label %75

75:                                               ; preds = %73, %38
  %76 = phi i64 [ 0, %38 ], [ %74, %73 ]
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %76
  %78 = bitcast float addrspace(1)* %77 to i32 addrspace(1)*
  %79 = load i32, i32 addrspace(1)* %78, align 4, !tbaa !13
  %80 = shl i64 %8, 32
  %81 = ashr exact i64 %80, 32
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = bitcast float addrspace(1)* %82 to i32 addrspace(1)*
  store i32 %79, i32 addrspace(1)* %83, align 4, !tbaa !13
  ret void

84:                                               ; preds = %24, %84
  %85 = phi i32 [ %90, %84 ], [ 0, %24 ]
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %86
  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !4
  %89 = getelementptr inbounds i32, i32 addrspace(1)* %12, i64 %86
  store i32 %88, i32 addrspace(1)* %89, align 4, !tbaa !4
  %90 = add nuw nsw i32 %85, 1
  %91 = icmp eq i32 %90, %6
  br i1 %91, label %38, label %84
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @dilate_tensor(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture %1, i32 addrspace(1)* nocapture readonly %2, i32 addrspace(1)* nocapture readonly %3, i32 addrspace(1)* nocapture readonly %4, i32 addrspace(1)* nocapture %5, i32 addrspace(1)* nocapture %6, i32 %7) local_unnamed_addr #2 !kernel_arg_addr_space !8 !kernel_arg_access_qual !9 !kernel_arg_type !10 !kernel_arg_base_type !10 !kernel_arg_type_qual !11 !kernel_arg_name !20 {
  %9 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %10 = trunc i64 %9 to i32
  %11 = mul nsw i32 %10, %7
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, i32 addrspace(1)* %5, i64 %12
  %14 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %12
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %39

16:                                               ; preds = %8, %16
  %17 = phi i32 [ %23, %16 ], [ 0, %8 ]
  %18 = phi i32 [ %22, %16 ], [ 1, %8 ]
  %19 = zext i32 %17 to i64
  %20 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %19
  %21 = load i32, i32 addrspace(1)* %20, align 4, !tbaa !4
  %22 = mul nsw i32 %21, %18
  %23 = add nuw nsw i32 %17, 1
  %24 = icmp eq i32 %23, %7
  br i1 %24, label %25, label %16

25:                                               ; preds = %16, %25
  %26 = phi i32 [ %35, %25 ], [ %10, %16 ]
  %27 = phi i32 [ %32, %25 ], [ %22, %16 ]
  %28 = phi i32 [ %37, %25 ], [ 0, %16 ]
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %29
  %31 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !4
  %32 = sdiv i32 %27, %31
  %33 = sdiv i32 %26, %32
  %34 = mul nsw i32 %33, %32
  %35 = sub nsw i32 %26, %34
  %36 = getelementptr inbounds i32, i32 addrspace(1)* %14, i64 %29
  store i32 %33, i32 addrspace(1)* %36, align 4, !tbaa !4
  %37 = add nuw nsw i32 %28, 1
  %38 = icmp eq i32 %37, %7
  br i1 %38, label %39, label %25

39:                                               ; preds = %25, %8
  %40 = add nsw i32 %7, -1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32 addrspace(1)* %14, i64 %41
  %43 = load i32, i32 addrspace(1)* %42, align 4, !tbaa !4
  %44 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 1
  %45 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !4
  %46 = srem i32 %43, %45
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %99

48:                                               ; preds = %39
  %49 = add nsw i32 %7, -2
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32 addrspace(1)* %14, i64 %50
  %52 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !4
  %53 = load i32, i32 addrspace(1)* %4, align 4, !tbaa !4
  %54 = srem i32 %52, %53
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %99

56:                                               ; preds = %48
  br i1 %15, label %91, label %59

57:                                               ; preds = %91
  %58 = load i32, i32 addrspace(1)* %44, align 4, !tbaa !4
  br label %59

59:                                               ; preds = %57, %56
  %60 = phi i1 [ true, %57 ], [ false, %56 ]
  %61 = phi i32 [ %58, %57 ], [ %45, %56 ]
  %62 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %41
  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !4
  %64 = sdiv i32 %63, %61
  store i32 %64, i32 addrspace(1)* %62, align 4, !tbaa !4
  %65 = load i32, i32 addrspace(1)* %4, align 4, !tbaa !4
  %66 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %50
  %67 = load i32, i32 addrspace(1)* %66, align 4, !tbaa !4
  %68 = sdiv i32 %67, %65
  store i32 %68, i32 addrspace(1)* %66, align 4, !tbaa !4
  br i1 %60, label %69, label %87

69:                                               ; preds = %59, %69
  %70 = phi i32 [ %83, %69 ], [ 0, %59 ]
  %71 = phi i32 [ %82, %69 ], [ 1, %59 ]
  %72 = phi i32 [ %79, %69 ], [ 0, %59 ]
  %73 = xor i32 %70, -1
  %74 = add i32 %73, %7
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %75
  %77 = load i32, i32 addrspace(1)* %76, align 4, !tbaa !4
  %78 = mul nsw i32 %77, %71
  %79 = add nsw i32 %78, %72
  %80 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %75
  %81 = load i32, i32 addrspace(1)* %80, align 4, !tbaa !4
  %82 = mul nsw i32 %81, %71
  %83 = add nuw nsw i32 %70, 1
  %84 = icmp eq i32 %83, %7
  br i1 %84, label %85, label %69

85:                                               ; preds = %69
  %86 = sext i32 %79 to i64
  br label %87

87:                                               ; preds = %85, %59
  %88 = phi i64 [ 0, %59 ], [ %86, %85 ]
  %89 = getelementptr inbounds float, float addrspace(1)* %0, i64 %88
  %90 = load float, float addrspace(1)* %89, align 4, !tbaa !13
  br label %99

91:                                               ; preds = %56, %91
  %92 = phi i32 [ %97, %91 ], [ 0, %56 ]
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds i32, i32 addrspace(1)* %14, i64 %93
  %95 = load i32, i32 addrspace(1)* %94, align 4, !tbaa !4
  %96 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %93
  store i32 %95, i32 addrspace(1)* %96, align 4, !tbaa !4
  %97 = add nuw nsw i32 %92, 1
  %98 = icmp eq i32 %97, %7
  br i1 %98, label %57, label %91

99:                                               ; preds = %87, %48, %39
  %100 = phi float [ %90, %87 ], [ 0.000000e+00, %48 ], [ 0.000000e+00, %39 ]
  %101 = shl i64 %9, 32
  %102 = ashr exact i64 %101, 32
  %103 = getelementptr inbounds float, float addrspace(1)* %1, i64 %102
  store float %100, float addrspace(1)* %103, align 4, !tbaa !13
  ret void
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @softmax_exp(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture %1, i32 %2) local_unnamed_addr #2 !kernel_arg_addr_space !21 !kernel_arg_access_qual !22 !kernel_arg_type !23 !kernel_arg_base_type !23 !kernel_arg_type_qual !24 !kernel_arg_name !25 {
  %4 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %5 = trunc i64 %4 to i32
  %6 = icmp ult i32 %5, %2
  %7 = and i64 %4, 4294967295
  br i1 %6, label %8, label %13

8:                                                ; preds = %3
  %9 = getelementptr inbounds float, float addrspace(1)* %1, i64 %7
  %10 = getelementptr inbounds float, float addrspace(1)* %0, i64 %7
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !13
  %12 = tail call float @_Z3expf(float %11) #5
  store float %12, float addrspace(1)* %9, align 4, !tbaa !13
  br label %13

13:                                               ; preds = %3, %8
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden float @_Z3expf(float) local_unnamed_addr #3

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @softmax_div(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture %1, float addrspace(1)* nocapture readonly %2, i32 %3, i32 %4) local_unnamed_addr #2 !kernel_arg_addr_space !26 !kernel_arg_access_qual !27 !kernel_arg_type !28 !kernel_arg_base_type !28 !kernel_arg_type_qual !29 !kernel_arg_name !30 {
  %6 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %7 = trunc i64 %6 to i32
  %8 = icmp sgt i32 %7, %3
  br i1 %8, label %21, label %9

9:                                                ; preds = %5
  %10 = sdiv i32 %3, %4
  %11 = sdiv i32 %7, %10
  %12 = shl i64 %6, 32
  %13 = ashr exact i64 %12, 32
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %13
  %15 = load float, float addrspace(1)* %14, align 4, !tbaa !13
  %16 = sext i32 %11 to i64
  %17 = getelementptr inbounds float, float addrspace(1)* %2, i64 %16
  %18 = load float, float addrspace(1)* %17, align 4, !tbaa !13
  %19 = fdiv float %15, %18, !fpmath !31
  %20 = getelementptr inbounds float, float addrspace(1)* %1, i64 %13
  store float %19, float addrspace(1)* %20, align 4, !tbaa !13
  br label %21

21:                                               ; preds = %5, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind
define hidden void @sum_out_index_to_in_index(i32 addrspace(1)* nocapture readonly %0, i32 addrspace(1)* nocapture %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #1 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %5
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %8
  br label %11

10:                                               ; preds = %30, %5
  ret void

11:                                               ; preds = %30, %7
  %12 = phi i32 [ %32, %30 ], [ 0, %7 ]
  %13 = phi i32 [ %31, %30 ], [ 0, %7 ]
  %14 = icmp eq i32 %12, %3
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  store i32 %2, i32 addrspace(1)* %9, align 4, !tbaa !4
  br label %30

16:                                               ; preds = %11
  %17 = icmp eq i32 %13, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %16
  %19 = zext i32 %12 to i64
  %20 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %19
  %21 = load i32, i32 addrspace(1)* %20, align 4, !tbaa !4
  %22 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %19
  store i32 %21, i32 addrspace(1)* %22, align 4, !tbaa !4
  br label %30

23:                                               ; preds = %16
  %24 = add nsw i32 %12, -1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %25
  %27 = load i32, i32 addrspace(1)* %26, align 4, !tbaa !4
  %28 = zext i32 %12 to i64
  %29 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %28
  store i32 %27, i32 addrspace(1)* %29, align 4, !tbaa !4
  br label %30

30:                                               ; preds = %15, %23, %18
  %31 = phi i32 [ 1, %15 ], [ %13, %23 ], [ 0, %18 ]
  %32 = add nuw nsw i32 %12, 1
  %33 = icmp eq i32 %32, %4
  br i1 %33, label %10, label %11
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @sum_one_axis(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture %1, i32 addrspace(1)* nocapture readonly %2, i32 addrspace(1)* nocapture readonly %3, i32 %4, i32 %5, i32 addrspace(1)* nocapture %6, i32 addrspace(1)* nocapture %7) local_unnamed_addr #2 !kernel_arg_addr_space !32 !kernel_arg_access_qual !9 !kernel_arg_type !33 !kernel_arg_base_type !33 !kernel_arg_type_qual !11 !kernel_arg_name !34 {
  %9 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %10 = trunc i64 %9 to i32
  %11 = mul nsw i32 %10, %4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, i32 addrspace(1)* %6, i64 %12
  %14 = add i32 %4, -1
  %15 = mul nsw i32 %14, %10
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, i32 addrspace(1)* %7, i64 %16
  %18 = icmp sgt i32 %4, 1
  br i1 %18, label %19, label %28

19:                                               ; preds = %8, %19
  %20 = phi i32 [ %26, %19 ], [ 0, %8 ]
  %21 = phi i32 [ %25, %19 ], [ 1, %8 ]
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %22
  %24 = load i32, i32 addrspace(1)* %23, align 4, !tbaa !4
  %25 = mul nsw i32 %24, %21
  %26 = add nuw nsw i32 %20, 1
  %27 = icmp eq i32 %26, %14
  br i1 %27, label %90, label %19

28:                                               ; preds = %90, %8
  %29 = sext i32 %5 to i64
  %30 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %29
  %31 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %104

33:                                               ; preds = %28
  %34 = icmp sgt i32 %4, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %33
  %36 = load float, float addrspace(1)* %0, align 4, !tbaa !13
  br label %109

37:                                               ; preds = %33
  %38 = zext i32 %5 to i64
  %39 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %38
  br label %40

40:                                               ; preds = %37, %43
  %41 = phi float [ %47, %43 ], [ 0.000000e+00, %37 ]
  %42 = phi i32 [ %48, %43 ], [ 0, %37 ]
  br label %67

43:                                               ; preds = %51
  %44 = sext i32 %61 to i64
  %45 = getelementptr inbounds float, float addrspace(1)* %0, i64 %44
  %46 = load float, float addrspace(1)* %45, align 4, !tbaa !13
  %47 = fadd float %41, %46
  %48 = add nuw nsw i32 %42, 1
  %49 = load i32, i32 addrspace(1)* %30, align 4, !tbaa !4
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %40, label %104

51:                                               ; preds = %86, %51
  %52 = phi i32 [ %65, %51 ], [ 0, %86 ]
  %53 = phi i32 [ %64, %51 ], [ 1, %86 ]
  %54 = phi i32 [ %61, %51 ], [ 0, %86 ]
  %55 = xor i32 %52, -1
  %56 = add i32 %55, %4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %57
  %59 = load i32, i32 addrspace(1)* %58, align 4, !tbaa !4
  %60 = mul nsw i32 %59, %53
  %61 = add nsw i32 %60, %54
  %62 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %57
  %63 = load i32, i32 addrspace(1)* %62, align 4, !tbaa !4
  %64 = mul nsw i32 %63, %53
  %65 = add nuw nsw i32 %52, 1
  %66 = icmp eq i32 %65, %4
  br i1 %66, label %43, label %51

67:                                               ; preds = %86, %40
  %68 = phi i32 [ 0, %40 ], [ %88, %86 ]
  %69 = phi i32 [ 0, %40 ], [ %87, %86 ]
  %70 = icmp eq i32 %68, %5
  br i1 %70, label %85, label %71

71:                                               ; preds = %67
  %72 = icmp eq i32 %69, 0
  br i1 %72, label %80, label %73

73:                                               ; preds = %71
  %74 = add nsw i32 %68, -1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32 addrspace(1)* %17, i64 %75
  %77 = load i32, i32 addrspace(1)* %76, align 4, !tbaa !4
  %78 = zext i32 %68 to i64
  %79 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %78
  store i32 %77, i32 addrspace(1)* %79, align 4, !tbaa !4
  br label %86

80:                                               ; preds = %71
  %81 = zext i32 %68 to i64
  %82 = getelementptr inbounds i32, i32 addrspace(1)* %17, i64 %81
  %83 = load i32, i32 addrspace(1)* %82, align 4, !tbaa !4
  %84 = getelementptr inbounds i32, i32 addrspace(1)* %13, i64 %81
  store i32 %83, i32 addrspace(1)* %84, align 4, !tbaa !4
  br label %86

85:                                               ; preds = %67
  store i32 %42, i32 addrspace(1)* %39, align 4, !tbaa !4
  br label %86

86:                                               ; preds = %85, %80, %73
  %87 = phi i32 [ 1, %85 ], [ %69, %73 ], [ 0, %80 ]
  %88 = add nuw nsw i32 %68, 1
  %89 = icmp eq i32 %88, %4
  br i1 %89, label %51, label %67

90:                                               ; preds = %19, %90
  %91 = phi i32 [ %100, %90 ], [ %10, %19 ]
  %92 = phi i32 [ %97, %90 ], [ %25, %19 ]
  %93 = phi i32 [ %102, %90 ], [ 0, %19 ]
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %94
  %96 = load i32, i32 addrspace(1)* %95, align 4, !tbaa !4
  %97 = sdiv i32 %92, %96
  %98 = sdiv i32 %91, %97
  %99 = mul nsw i32 %98, %97
  %100 = sub nsw i32 %91, %99
  %101 = getelementptr inbounds i32, i32 addrspace(1)* %17, i64 %94
  store i32 %98, i32 addrspace(1)* %101, align 4, !tbaa !4
  %102 = add nuw nsw i32 %93, 1
  %103 = icmp eq i32 %102, %14
  br i1 %103, label %28, label %90

104:                                              ; preds = %109, %43, %28
  %105 = phi float [ 0.000000e+00, %28 ], [ %47, %43 ], [ %112, %109 ]
  %106 = shl i64 %9, 32
  %107 = ashr exact i64 %106, 32
  %108 = getelementptr inbounds float, float addrspace(1)* %1, i64 %107
  store float %105, float addrspace(1)* %108, align 4, !tbaa !13
  ret void

109:                                              ; preds = %109, %35
  %110 = phi float [ %112, %109 ], [ 0.000000e+00, %35 ]
  %111 = phi i32 [ %113, %109 ], [ 0, %35 ]
  %112 = fadd float %110, %36
  %113 = add nuw nsw i32 %111, 1
  %114 = icmp slt i32 %113, %31
  br i1 %114, label %109, label %104
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @scaleAdd(float addrspace(1)* nocapture %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture readonly %2, float %3, float %4, i32 %5) local_unnamed_addr #2 !kernel_arg_addr_space !35 !kernel_arg_access_qual !36 !kernel_arg_type !37 !kernel_arg_base_type !37 !kernel_arg_type_qual !38 !kernel_arg_name !39 {
  %7 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %8 = trunc i64 %7 to i32
  %9 = icmp sgt i32 %8, %5
  br i1 %9, label %20, label %10

10:                                               ; preds = %6
  %11 = shl i64 %7, 32
  %12 = ashr exact i64 %11, 32
  %13 = getelementptr inbounds float, float addrspace(1)* %1, i64 %12
  %14 = load float, float addrspace(1)* %13, align 4, !tbaa !13
  %15 = getelementptr inbounds float, float addrspace(1)* %2, i64 %12
  %16 = load float, float addrspace(1)* %15, align 4, !tbaa !13
  %17 = fmul float %16, %4
  %18 = tail call float @llvm.fmuladd.f32(float %3, float %14, float %17)
  %19 = getelementptr inbounds float, float addrspace(1)* %0, i64 %12
  store float %18, float addrspace(1)* %19, align 4, !tbaa !13
  br label %20

20:                                               ; preds = %6, %10
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #4

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @mul(float addrspace(1)* nocapture %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture readonly %2, i32 %3) local_unnamed_addr #2 !kernel_arg_addr_space !40 !kernel_arg_access_qual !41 !kernel_arg_type !42 !kernel_arg_base_type !42 !kernel_arg_type_qual !43 !kernel_arg_name !44 {
  %5 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %6 = trunc i64 %5 to i32
  %7 = icmp sgt i32 %6, %3
  br i1 %7, label %17, label %8

8:                                                ; preds = %4
  %9 = shl i64 %5, 32
  %10 = ashr exact i64 %9, 32
  %11 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %12 = load float, float addrspace(1)* %11, align 4, !tbaa !13
  %13 = getelementptr inbounds float, float addrspace(1)* %2, i64 %10
  %14 = load float, float addrspace(1)* %13, align 4, !tbaa !13
  %15 = fmul float %12, %14
  %16 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  store float %15, float addrspace(1)* %16, align 4, !tbaa !13
  br label %17

17:                                               ; preds = %4, %8
  ret void
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @rmsProp(float addrspace(1)* nocapture %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture %2, float %3, float %4, i32 %5) local_unnamed_addr #2 !kernel_arg_addr_space !35 !kernel_arg_access_qual !36 !kernel_arg_type !37 !kernel_arg_base_type !37 !kernel_arg_type_qual !38 !kernel_arg_name !45 {
  %7 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %8 = trunc i64 %7 to i32
  %9 = icmp sgt i32 %8, %5
  br i1 %9, label %31, label %10

10:                                               ; preds = %6
  %11 = shl i64 %7, 32
  %12 = ashr exact i64 %11, 32
  %13 = getelementptr inbounds float, float addrspace(1)* %2, i64 %12
  %14 = load float, float addrspace(1)* %13, align 4, !tbaa !13
  %15 = fsub float 1.000000e+00, %3
  %16 = getelementptr inbounds float, float addrspace(1)* %1, i64 %12
  %17 = load float, float addrspace(1)* %16, align 4, !tbaa !13
  %18 = fmul float %15, %17
  %19 = fmul float %17, %18
  %20 = tail call float @llvm.fmuladd.f32(float %3, float %14, float %19)
  store float %20, float addrspace(1)* %13, align 4, !tbaa !13
  %21 = tail call float @_Z4sqrtf(float %20) #5
  %22 = fpext float %21 to double
  %23 = fadd double %22, 0x3EB0C6F7A0B5ED8D
  %24 = fptrunc double %23 to float
  %25 = load float, float addrspace(1)* %16, align 4, !tbaa !13
  %26 = fdiv float %25, %24, !fpmath !31
  %27 = getelementptr inbounds float, float addrspace(1)* %0, i64 %12
  %28 = load float, float addrspace(1)* %27, align 4, !tbaa !13
  %29 = fneg float %4
  %30 = tail call float @llvm.fmuladd.f32(float %29, float %26, float %28)
  store float %30, float addrspace(1)* %27, align 4, !tbaa !13
  br label %31

31:                                               ; preds = %6, %10
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden float @_Z4sqrtf(float) local_unnamed_addr #3

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @adam(float addrspace(1)* nocapture %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture %2, float addrspace(1)* nocapture %3, float %4, float %5, float %6, i32 %7) local_unnamed_addr #2 !kernel_arg_addr_space !46 !kernel_arg_access_qual !9 !kernel_arg_type !47 !kernel_arg_base_type !47 !kernel_arg_type_qual !11 !kernel_arg_name !48 {
  %9 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %10 = trunc i64 %9 to i32
  %11 = icmp sgt i32 %10, %7
  br i1 %11, label %40, label %12

12:                                               ; preds = %8
  %13 = shl i64 %9, 32
  %14 = ashr exact i64 %13, 32
  %15 = getelementptr inbounds float, float addrspace(1)* %3, i64 %14
  %16 = load float, float addrspace(1)* %15, align 4, !tbaa !13
  %17 = fmul float %16, %4
  %18 = fsub float 1.000000e+00, %4
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %14
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !13
  %21 = fmul float %18, %20
  %22 = fadd float %17, %21
  store float %22, float addrspace(1)* %15, align 4, !tbaa !13
  %23 = getelementptr inbounds float, float addrspace(1)* %2, i64 %14
  %24 = load float, float addrspace(1)* %23, align 4, !tbaa !13
  %25 = fsub float 1.000000e+00, %5
  %26 = load float, float addrspace(1)* %19, align 4, !tbaa !13
  %27 = fmul float %25, %26
  %28 = fmul float %26, %27
  %29 = tail call float @llvm.fmuladd.f32(float %5, float %24, float %28)
  store float %29, float addrspace(1)* %23, align 4, !tbaa !13
  %30 = tail call float @_Z4sqrtf(float %29) #5
  %31 = fpext float %30 to double
  %32 = fadd double %31, 1.000000e-08
  %33 = fptrunc double %32 to float
  %34 = load float, float addrspace(1)* %15, align 4, !tbaa !13
  %35 = fdiv float %34, %33, !fpmath !31
  %36 = getelementptr inbounds float, float addrspace(1)* %0, i64 %14
  %37 = load float, float addrspace(1)* %36, align 4, !tbaa !13
  %38 = fneg float %6
  %39 = tail call float @llvm.fmuladd.f32(float %38, float %35, float %37)
  store float %39, float addrspace(1)* %36, align 4, !tbaa !13
  br label %40

40:                                               ; preds = %8, %12
  ret void
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @reluForward(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture %1, i32 %2) local_unnamed_addr #2 !kernel_arg_addr_space !21 !kernel_arg_access_qual !22 !kernel_arg_type !23 !kernel_arg_base_type !23 !kernel_arg_type_qual !24 !kernel_arg_name !49 {
  %4 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %5 = trunc i64 %4 to i32
  %6 = icmp slt i32 %5, %2
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !13
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !13
  br label %15

15:                                               ; preds = %3, %7
  ret void
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @reluBackward(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture %2, i32 %3) local_unnamed_addr #2 !kernel_arg_addr_space !40 !kernel_arg_access_qual !41 !kernel_arg_type !42 !kernel_arg_base_type !42 !kernel_arg_type_qual !43 !kernel_arg_name !50 {
  %5 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %6 = trunc i64 %5 to i32
  %7 = icmp slt i32 %6, %3
  br i1 %7, label %8, label %20

8:                                                ; preds = %4
  %9 = shl i64 %5, 32
  %10 = ashr exact i64 %9, 32
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = load float, float addrspace(1)* %11, align 4, !tbaa !13
  %13 = fcmp ogt float %12, 0.000000e+00
  br i1 %13, label %14, label %17

14:                                               ; preds = %8
  %15 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %16 = load float, float addrspace(1)* %15, align 4, !tbaa !13
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi float [ %16, %14 ], [ 0.000000e+00, %8 ]
  %19 = getelementptr inbounds float, float addrspace(1)* %2, i64 %10
  store float %18, float addrspace(1)* %19, align 4, !tbaa !13
  br label %20

20:                                               ; preds = %4, %17
  ret void
}

attributes #0 = { norecurse nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { convergent nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { convergent nounwind readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 1, i32 2}
!3 = !{!"clang version 11.0.0 (/src/external/llvm-project/clang 0383ad1cfb0a8e05b0a020e8632400194628b243)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"int", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0}
!9 = !{!"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none"}
!10 = !{!"float*", !"float*", !"int*", !"int*", !"int*", !"int*", !"int*", !"int"}
!11 = !{!"", !"", !"", !"", !"", !"", !"", !""}
!12 = !{!"in", !"out", !"in_size", !"out_size", !"order", !"in_index_buf", !"out_index_buf", !"dim"}
!13 = !{!14, !14, i64 0}
!14 = !{!"float", !6, i64 0}
!15 = !{i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0}
!16 = !{!"none", !"none", !"none", !"none", !"none", !"none", !"none"}
!17 = !{!"float*", !"float*", !"int*", !"int*", !"int*", !"int*", !"int"}
!18 = !{!"", !"", !"", !"", !"", !"", !""}
!19 = !{!"in", !"out", !"in_size", !"out_size", !"in_index_buf", !"out_index_buf", !"dim"}
!20 = !{!"in", !"out", !"in_size", !"out_size", !"dilate", !"in_index_buf", !"out_index_buf", !"dim"}
!21 = !{i32 1, i32 1, i32 0}
!22 = !{!"none", !"none", !"none"}
!23 = !{!"float*", !"float*", !"int"}
!24 = !{!"", !"", !""}
!25 = !{!"input", !"output", !"n"}
!26 = !{i32 1, i32 1, i32 1, i32 0, i32 0}
!27 = !{!"none", !"none", !"none", !"none", !"none"}
!28 = !{!"float*", !"float*", !"float*", !"int", !"int"}
!29 = !{!"", !"", !"", !"", !""}
!30 = !{!"exp_input", !"out", !"denominator", !"num_element", !"batch_size"}
!31 = !{float 2.500000e+00}
!32 = !{i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1}
!33 = !{!"float*", !"float*", !"int*", !"int*", !"int", !"int", !"int*", !"int*"}
!34 = !{!"in", !"out", !"in_size", !"out_size", !"in_dim", !"axis", !"in_index_buf", !"out_index_buf"}
!35 = !{i32 1, i32 1, i32 1, i32 0, i32 0, i32 0}
!36 = !{!"none", !"none", !"none", !"none", !"none", !"none"}
!37 = !{!"float*", !"float*", !"float*", !"float", !"float", !"int"}
!38 = !{!"", !"", !"", !"", !"", !""}
!39 = !{!"out", !"in1", !"in2", !"alpha", !"beta", !"n"}
!40 = !{i32 1, i32 1, i32 1, i32 0}
!41 = !{!"none", !"none", !"none", !"none"}
!42 = !{!"float*", !"float*", !"float*", !"int"}
!43 = !{!"", !"", !"", !""}
!44 = !{!"out", !"in1", !"in2", !"n"}
!45 = !{!"params", !"gradients", !"sHistory", !"smoothFactor", !"learningRate", !"n"}
!46 = !{i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0}
!47 = !{!"float*", !"float*", !"float*", !"float*", !"float", !"float", !"float", !"int"}
!48 = !{!"params", !"gradients", !"sHistory", !"vHistory", !"smoothFactor1", !"smoothFactor2", !"learningRate", !"n"}
!49 = !{!"in", !"out", !"count"}
!50 = !{!"in", !"backin", !"out", !"count"}
