// Code generated by "esc -private -o esc.go -pkg nbody ./nbody.hsaco"; DO NOT EDIT.

package nbody

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/nbody.hsaco": {
		name:    "nbody.hsaco",
		local:   "./nbody.hsaco",
		size:    16504,
		modtime: 1592039480,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
