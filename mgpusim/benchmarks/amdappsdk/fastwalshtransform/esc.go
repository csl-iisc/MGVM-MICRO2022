// Code generated by "esc -private -o esc.go -pkg fastwalshtransform ./kernels.hsaco"; DO NOT EDIT.

package fastwalshtransform

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    9304,
		modtime: 1592039480,
		compressed: `
H4sIAAAAAAAC/+xaTW8TRx//72R27WwC5NHDAaiqbiWkSKjeGuNGJqrUBKcxCCcYQnlpharBu3Zc9k27
axQj1SSVmhNSq5566IEP0O+Ae20vwKmHHLjQU6/tsa5md8beXbwhSFS00v4k5+eZ//vOeiczO/c/rq8i
QVgChil4BgL9Mhe2ueDGuyGfCvoqkIclmAUZJADAEb0kD4Q451m/wOzS8Pt0nHk+1E6MtJP8IYpz1I7m
CgrrT7ADceZ26BXteH1XnvsaPoBdND+Ky899TYJXB+bXk9edYCcXZxyxy7P4y2srgTofm7eC+yHsx5Ab
1cb7ltdWao1PQl16e8ywfmJq7aZVIKZGP5seodTu3GsahXZrq1I8w/z/JgHIzKZQKMjXdNfr2NaiwvGZ
cvo9pajcki/qrqUb3lgiK0pBWSemPu5SFKVFPP86MbzNqy6xvJbtmjLt3uiZt20joj3/ouLSHW0+UK4T
q90l7bHjS45uVetKNSYdpRqkWFJuBdJlt+3FEpJDmpCqv+y6pCfz5tWeo8d05luGTfxT8yONjc69uIfK
SLRsdNrW4kTRNWJ09YsdS+PimmHfJsa5bqulu3EtmgLXWj1TGnvXNHfDIU39cpcYiyMXY3mzySUhVvQW
6Rp+eu2erzvplXcsP73ocnrR5fSiz/WCrvR6L0TrfVk9r2kkznc0TbfCi3mp1fJ0/8Y+CS6U//n4N99w
/E/fQPx129rvvqgc8GeQZXXQrKq2pjdc2xk9KJkVfcQTt72ht03d8sO8R4Nec+2uw0SrnS1dC+VFJm64
nbvE19MV4s5Z5Tzf6+Su3nJtHlQZh13vmhu1xpXxM/10aSy5FpOcZYI1srVqEP+67d4Jkw58lj5YkFVV
ldPnbzrnnpiSXvg/Roh8TvCupbD9/tbDJopM9ULU4YtTHGTIkCFDhgzReSdc8+XDlZ2wv/45+BG+DdZ6
8clsKfJ9Fqbja1OMpeFwOPw31o8ADehadEqQBrRdRWhAr0QV0IBOxdsI9e/Dg0cwhF1aQR7y303P4r6Q
F3YEgJIwJfVRDfdFlO+LSO4PMZYBti+hI7gvwddP0f8BcrAb8PbsXBng58fbhxFIAE+k/1HefSqJCCTx
cEkS8QICeIKOIEDURqDy0MdP+HAJDs2V4dAPXwL88nh6DoGEjj/ZwQjgi+3dwO4QgpyIATEbEKG8g/FJ
EKE0DbgE8M3Tr2jFlDGia/ASnkIVjHFJzEkVgMZeuDRv7CEA0YEHj/DMLMIzeQzg7IUbIc4eCjYPdh5l
v54MGTJkyJAhQ4YMGTJk+O+Av2t22JJ9hrWPMRYZ/8rkfNV/lPEffw1tyg+ZnL9XHkxPjlfvWHd0d1Gp
11eUslqEpkGstnI3fJ2qVNSisn++QVyUG79Pj+xjTNo/B9WyfR1UrWd5PRPUttVVN4m3Cewv7fddUH19
yw9axOw0QW3apqlbPqhez/TJbVC9Tc93w28hT9pg/3zl5vry2oXqa9qXyUX29tPe54/2WBL2OTaWKDG+
nIuR8RUi5xb4uB8BgD+HQ5vb8/HlrCTSyifiH2e+UeJ+4HwsYY8T/A47Z4AS9x/noxOuVxTz0TMfkH5O
JM1BgdlO8Y6U8xtion4eZoG5LCbCOMz+ZEp4zh9Fxz6C75n9eRj/XtGE8atFc4/gGbO/+ZLrdznF/iw7
B/T2S+z/DgAA//8aqaXXWCQAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
