// Code generated by "esc -o bindata.go -pkg reduction -private kernels.hsaco"; DO NOT EDIT.

package reduction

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9600,
		modtime: 1652771897,
		compressed: `
H4sIAAAAAAAC/+xazW/URht/PHaSfTfwwvtWqoC2qotQQ1HX8X4k2uZSQlJSxCYElo/SCqGJPbsx+GPl
taNspYZk1Q9aIUCoByr1T+jfwKb/QVX1kAOHXri0Fy7lVLGV7Zld24khEbS0qn/S+rGf72fG4/WM59p7
leOI444CBQ8/A+ed7A2umWD1YECP+LwyZOAo7IIsDAKAENKL03UuSjOUz1G7JNwejlKWj2c3ELqO08Mo
SsN2Xq4gUn6MNiBKmR3aoR2r78wDRxW2YRfOz8PpB446CDuHwNqT1R2jr/4nSoWQXYbGn5yd9tVZ37zi
3w8BX4ChXm2MNzk7PTN/LtDdDwDDlI8Nta6YOWyo3m+xiXO5em25LBep328yAFmqm8vlsueJ3dQsc0Jk
+EjMvy3K4qXsSWKbRG9OZEUxJ85hg/R1RFG0ieoqJOudVlvGgqWHNEYC4dGr6oivUMFm3cX1voNTDWJO
VcSpiLSXiZ9BQbzkSyftup+Chy3S0MyG62TZ1dlWg0RURlzNdI6M9BSq2sdR+3JPNKlrdXNiS9F5rLvk
pGaqTDyjWwtYP+bWasSOankZMK1zxULfu6ra1QZWyGkX6xM9F325ojBJgGlSw67uJFduuc6/tfSmih38
DJWXkisvJVc+3TKxoSnVRWwTdd7STGe7LRAok36wUnLjVCxlJ23znHr1fU1ViRl0zKlarUmcD5JLOzFe
+vPjX3zB8T98AfHnLJM8IWx5m0MqzeqFZTXr6o42Y2tqtWUqk3b9mTOcslQyb1uN3n+g96+M7XqV1A1i
OkHyZZkKZ2zLbVDRcW2ZqIGciedtbQk7JFkh6pyWzxK9gJdIzbZYUFHsDYM516jOzJ9p9poqX+5Lzkck
Y1Qwi5eP69i5YNlXg6R9n4Wx8awkSdmnvG9570gH+MFN751c6HcgeA8WGf+1b0f2o9CrGRd2GLyvQIoU
KVL8VeDo84jzZ3d87KG0GWvwHdz253rRJ+R86Pz/wQy9PzcVhMFut9v9O9bP89n1YE6L1r1H+RSg9X0A
0Aa07s1VV5Gwcg1udHajzMr38Pu9VfjyHuryn3vVZHj+DsdzaxygwhpChzi49WMbIUDdtTsc7IFdaLAg
DGTKAGfv8wCoDegQIFTgVgc7DbjR4QeEAsCBDQ4BeDEAvup49GX4tLMKX39yRWzfG4brHUCwAqBveF2V
abdv/heh1T0874Va4RFaCWwb94M/lrXOCnr8BbfG3fLihP3+0v2sw8Fd3++j7vUO1xZuCsjLQd9A/m2g
b3AA/LVYbr922510pKRIkSJFihQpUqRIkSLFPxvsW7NIv7Ozz+37KGUz+etUwGb97Fvwb4+7lj//p3L2
XbkxvHU8RcdmXVwKvrOK+bwkS7J4eLRpK6Nk2SG2ifVRXV8ycg3bukIUZzQwkIvlIlbzSm1BxmUijy3I
WC7IpDxeLJRkOf9OabxQXiiUim8BVDTzKrEnxEplejv+dV3difcnraN4rXn3f1H+EOX/EOPvpvyfYvyX
KP9hjL+f9dbeKD/nHdBQf38BxZsJ69MgmZZDQFJbZrNlgFQ3XWkRNxeBHj2+Y4PkkGXHv8KGpoCkWIZB
TAekZstw8AJIzcWmYwdnAYVjx+TLef9Y9I8l/zhGF7YP6ZaCdbbKfXn64tzk7Imp57N+NRRaU0/a99Bb
i4LN/TMcMmPjgFE5NA640H3PxsceAHjU7VrMno0DRsVYWhnY3K8DITkbN4zui9kLMfo63Y+BYuOU0cyW
92kfI+G9MZC8nybJQY7a8oyRsM9lIFY/CzNOXcqxMA1q30kIz+i74b4PQX4joOvQf64NbdF/M+HcQ3hI
7S8+pf1OJ9ifONiv70n2fwQAAP//UPfzU4AlAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
