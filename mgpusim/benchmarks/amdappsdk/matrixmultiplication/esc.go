// Code generated by "esc -private -o esc.go -pkg matrixmultiplication ./kernels.hsaco"; DO NOT EDIT.

package matrixmultiplication

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    9456,
		modtime: 1592039480,
		compressed: `
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
/i+W8f+N5u96jv+/AgAA//8kY9No8CQAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
