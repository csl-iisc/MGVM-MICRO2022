// Code generated by "esc -private -o esc.go -pkg floydwarshall ./kernels.hsaco"; DO NOT EDIT.

package floydwarshall

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    9368,
		modtime: 1592039480,
		compressed: `
H4sIAAAAAAAC/+xazW/cRBR/Hnsdx9mkIUUQClKNhBRUsdbWDWWVC80HTasm6bahLQVV1XQ9uzH12ivb
W2UrsU2DqDhUAvXUI0cO/AGcSC6cuPXcA5feuYDEhUVjz+zazrpNUFH58E9a/9bvzZv3nv38MZ6588HK
aSQIp4BBhJ9BoH8mo32uePhmxMdCWQUUOAVFUEEGACnWLs27QpIVJheYXRZ+Gksyj4faFWL7aX4DJTlu
R2MFjclT3IIkczt0QDue38UngSntwy4eH8WFJ4Epw8Eh8ePJ805xdTTJUsxOYf7nV5fC5vzcvB7WQySX
YKSfG5fNry4tVy9FbWl5jDE5bpqNmlPCTZP+NnxMqWHdrtmlRn2zUj7B+v9RAVCZTalUUi8Tz7dcZ07j
+EQ7/o5W1q6p54jnENsfaFRNK2lruEkGIk3T6rbbMa9gz9/Atl3Fvq9S6XqnecO1Y41n9rQ7ddOcCduu
YKfRxo1Bt+dbxFlc0RYT2n6gYYCGdi3UznsNPxGOGtGQQFs42Fiy/AA7NbLQrteJp3LVh50WSbSfaVtO
cGym32Ddup3srNJXzdtWw5kbqrqM7TY5ZzkmVy/b7g1sp5yHrWgEvNWlE8agd9P01lu4Ri60sT3X72Kg
r9W4JsISqeO2HTz9MPyP03fazTXXJH528jT37MxnszOfzc58oROK9pn0Xzin/r86oedUX2cs0yROVCLn
63WfBB9lB3j25Ozf7//qC/b/8Qvwv+Y6T6mLs5V9Xtx5VPuNatE1SdVzW/0HIbOiD3DsNdZJo0mcIIr7
PX5VLntuu8VUp61NYkb6MlNXPesWDkh2g2TnLHMe7xV8i9Q9lzvVtH6trbWb68vVi4NntmEMNJcTmuPc
ZhVvnrZxcMX1bkZRh50a755UdV1Xn/J+Rt+pjojynvdUIfY7EhPRze+L39ZQ7FVOiHe45x0GcuTIkeNA
ENj9RQhHd2LqJrMXn8N38PUoHesl73ZnYv9fgYnk2FSS5F6v1/sn5r8NaJeORUVR3Y3GtvIuvUWLkro7
DQBbSOregfs7qIfu0QwUpDwQQH4wqYzcle6hrcKWuC0ipYuQ3AU481gEEEcADCROdGUoGuNosotEtTuO
prvj6Ei3Bfd3RuGLR6MyAhG+erRdRDA1VTRkERlUTm/8RbloKKMTlVEBGcKUYii0HUKgUlYQFCdlo3hY
qRRfnjTGX52qAFSp3wLlaIxefSwDyNSXLIABY9uffapt/6DClzsC6+sQUrsTCBkALWoLhYJUERB06X5U
And38qsjR44cOXLkyJEjR44cOf474HPNVTbPzqfbpxkXGH/PFHzUf5jxr3/0XMpbTM/nlb8ZG+5vxXJu
Em9OW1lZ0mb1MtRs7DS0W9GEqlbRy9qzv1fQqH95KSkfYfLpqaT8KN2gkcH8O8N4xvdY0B03IKCbHcfv
NEFvOG19A/sbwLZUHnigB2QzCPdw06qBXnObTeIEoPudZoBvgO5v+IEX/YsYFhbK14+HW2PIx9vrS1fX
5lfPLj7P7zojsW/HWesB+t9oYO/xHIuZ8frgXI7VhxBb98Dr5hAA/Nbrudye1wdnLRWWkvL/GusbpeqJ
83TKXkrxUbZOAaXql/PhoXU1wEx8zQhkrzPJ6qDEbEUuyFj/UUjlz92cZF2WU25azP6tDPec34+f+xge
MvtNGFzv0pDztxyPPYZJtg7o6jOO34UMe4vZv/0M+z8DAAD//804S1mYJAAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
