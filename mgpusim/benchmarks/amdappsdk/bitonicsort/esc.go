// Code generated by "esc -private -o esc.go -pkg bitonicsort ./kernels.hsaco"; DO NOT EDIT.

package bitonicsort

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    9296,
		modtime: 1592039480,
		compressed: `
H4sIAAAAAAAC/+xaXWvb1ht/dCzbqtL8/4PB6F4YKpRmlFm4bpp5udjqJEta6iROvabLRhkn1rEiYktG
kkNcWBpnLFelY2MXu+sX2HeIYf0Ao7C7XPSmH2G7GvM40jnWC1bTQMfe9APlp/O8nOd5zpEVjs65/1F1
EQnCNWDIwFMQ6M0rfpsraud9vuTJyiDBNTgLMuQAQAzZxXkgRFlicoH5JeHxmSjzfKhfNtSO829ClMN+
NFdQmDzGHYgy90On9OP13XrmauIL+IXzo1h75mo5OD1Edu0ivx3naj7K4gn90XzeoJXHxlUIXX6e74zk
P0+/9wFiYybEO5wzXMs0GnXLdnl8idlVlhdGPlT+pvcc+nIR8qMx5bLK8sJS7bZvSx/LCSbHbU1vmAXc
1ui15WBKunGv0Srozd1y8Qrr/3EOQGY+hUJBXie2Y1jmrMLxmXL5XaWo3JVvEtskLSfQyIpSUFZwmwQi
RVFCtcm0Xe+1N61WyGwqZHFtW5vyrKrY1LtYD7pa7RBzvqrMR7Sj5LykSspdT1uxdSeSguzTmOSwbeOe
zFsf9zokYjLVNUz30tTIoG7ci/qXR6pKy9DN2bGqddzqkpuGqXH1UsvaxK25brNJ7KgVzYBb3b5SCnrX
NLvewQ2y1sWt2VEXgb7R4BofC6SJuy03uXLHxTpJrpwWnlz2dHLZ08llz/U80QtWfOqKOthxVpv1f11d
mmGThmtY5j+5qpf0y7luaBox/Yd/tdl0iPtJcoI3Zqb//Pgbf3H8T0+OP29ppGZbndFLkbnQFzi29TrR
28R0/QyvzjDlkm11O0y1aOwSzdcXmbpmGzvYJckG0c5ZjbyyO3iHNG2LB1WU0UitdNv1pdqt4P19+XKg
WY9oeGfLeHexhd07lr3tJ+31Wbo6I6uqKkOKFClSpEhxSgTrOclfYQnPt6/AD/CTt+aK/tsph+4nRis2
ttYUxdxwOBz+Hes/ADQQvcpzA9r+EdDAGwkBDc4CwLyABnQJ/KWABucA4D48OEJDdEirkZD0bUY86EsA
JfQIHeZAKvWR+BBJdJX/1RMREKB99A2SxIv7CO31AS4gAUoiiCUhk9sD+PrJASAQkLwHAKVsBpURlYmI
Dlop8wgO+wAPQZIuZvO5cj+73wck72XR2b196bsvspM009qx/0mkdowAclTegQdH2cn/vZ2dlN/K/l+C
/ASdq86xv+jvHCPvA0r/KH36U6RIkSJFihQpUqRIkeK/g9FeM+Jrdx/nGGcZbzE9X/VPMv7l96FFucj0
fF+5hsbHqxrmNrFnlWp1QZlWi9BoYVNXdvxNTipRnp+vFxflg/300HeMcfvVoGo90+m1QdXNrrqFnS1g
f6nctUE1LZeA6pJd15PhttEAtWG128R0QXV6bRdvgupsOa7t3/kc2dD+fGFjpbJ8Y/7lfI+ZCKYjuGFc
hGCchdB5Az5fZwDg1+HQ4m58XjgroTgQ8ud4lc05is0j53MxfzHGr7N9ehR7bjhPjqk3jPMAkA/5J51j
gFhcjqnI2YTk8yFJCRSYb4YLEs5tiLHx42FmWJfFWJgO87+QEJ7zh+G5D+F75n8dgt8pGjP/S+HcQ3jK
/DdOGP+1BP/32fmf107w/yMAAP//hldfoFAkAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
