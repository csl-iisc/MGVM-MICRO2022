// Code generated by "esc -private -o esc.go -pkg simpleconvolution ./kernels.hsaco"; DO NOT EDIT.

package simpleconvolution

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    18160,
		modtime: 1592039480,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
