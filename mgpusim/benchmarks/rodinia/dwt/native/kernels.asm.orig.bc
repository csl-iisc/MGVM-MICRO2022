; ModuleID = 'com_dwt.cl'
source_filename = "com_dwt.cl"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.FDWT53 = type { i32, i32, %struct.FDWT53Column, %struct.TransformBuffer, i32 }
%struct.FDWT53Column = type { i8, %struct.VerticalDWTPixelLoader, i32, i32, i32, i32 }
%struct.VerticalDWTPixelLoader = type { i8, i32 }
%struct.TransformBuffer = type { i32, i32, i32, i32, i32, i32, i32, [2182 x i32] }
%struct.VerticalDWTPixelIO = type { i8, i32, i32 }
%struct.VerticalDWTBandIO = type { i8, i32, i32, i32 }
%struct.VerticalDWTBandWriter = type { i8, i32 }

@c_CopySrcToComponents.sData = internal unnamed_addr addrspace(3) global [768 x i8] undef, align 1
@c_CopySrcToComponent.sData = internal unnamed_addr addrspace(3) global [256 x i8] undef, align 1
@cl_fdwt53Kernel.fdwt53 = internal addrspace(3) global %struct.FDWT53 undef, align 4

; Function Attrs: norecurse nounwind readnone
define hidden i32 @divRndUp(i32 %0, i32 %1) local_unnamed_addr #0 {
  %3 = freeze i32 %0
  %4 = freeze i32 %1
  %5 = sdiv i32 %3, %4
  %6 = mul i32 %5, %4
  %7 = sub i32 %3, %6
  %8 = icmp ne i32 %7, 0
  %9 = zext i1 %8 to i32
  %10 = add nsw i32 %5, %9
  ret i32 %10
}

; Function Attrs: nofree norecurse nounwind writeonly
define hidden void @storeComponents(i32 addrspace(1)* nocapture %0, i32 addrspace(1)* nocapture %1, i32 addrspace(1)* nocapture %2, i32 %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr #1 {
  %8 = add nsw i32 %3, -128
  %9 = sext i32 %6 to i64
  %10 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %9
  store i32 %8, i32 addrspace(1)* %10, align 4, !tbaa !4
  %11 = add nsw i32 %4, -128
  %12 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %9
  store i32 %11, i32 addrspace(1)* %12, align 4, !tbaa !4
  %13 = add nsw i32 %5, -128
  %14 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %9
  store i32 %13, i32 addrspace(1)* %14, align 4, !tbaa !4
  ret void
}

; Function Attrs: nofree norecurse nounwind writeonly
define hidden void @storeComponent(i32 addrspace(1)* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #1 {
  %4 = add nsw i32 %1, -128
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %5
  store i32 %4, i32 addrspace(1)* %6, align 4, !tbaa !4
  ret void
}

; Function Attrs: convergent norecurse nounwind
define protected amdgpu_kernel void @c_CopySrcToComponents(i32 addrspace(1)* nocapture %0, i32 addrspace(1)* nocapture %1, i32 addrspace(1)* nocapture %2, i8 addrspace(1)* nocapture readonly %3, i32 %4) local_unnamed_addr #2 !kernel_arg_addr_space !8 !kernel_arg_access_qual !9 !kernel_arg_type !10 !kernel_arg_base_type !10 !kernel_arg_type_qual !11 !kernel_arg_name !12 {
  %6 = tail call i64 @_Z12get_local_idj(i32 0) #9
  %7 = trunc i64 %6 to i32
  %8 = tail call i64 @_Z14get_local_sizej(i32 0) #9
  %9 = tail call i64 @_Z12get_group_idj(i32 0) #9
  %10 = mul i64 %9, %8
  %11 = trunc i64 %10 to i32
  %12 = mul nsw i32 %11, 3
  %13 = mul nsw i32 %7, 3
  %14 = add nsw i32 %12, %13
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8 addrspace(1)* %3, i64 %15
  %17 = load i8, i8 addrspace(1)* %16, align 1, !tbaa !13
  %18 = getelementptr inbounds [768 x i8], [768 x i8] addrspace(3)* @c_CopySrcToComponents.sData, i32 0, i32 %13
  store i8 %17, i8 addrspace(3)* %18, align 1, !tbaa !13
  %19 = add nsw i32 %14, 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8 addrspace(1)* %3, i64 %20
  %22 = load i8, i8 addrspace(1)* %21, align 1, !tbaa !13
  %23 = add nsw i32 %13, 1
  %24 = getelementptr inbounds [768 x i8], [768 x i8] addrspace(3)* @c_CopySrcToComponents.sData, i32 0, i32 %23
  store i8 %22, i8 addrspace(3)* %24, align 1, !tbaa !13
  %25 = add nsw i32 %14, 2
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8 addrspace(1)* %3, i64 %26
  %28 = load i8, i8 addrspace(1)* %27, align 1, !tbaa !13
  %29 = add nsw i32 %13, 2
  %30 = getelementptr inbounds [768 x i8], [768 x i8] addrspace(3)* @c_CopySrcToComponents.sData, i32 0, i32 %29
  store i8 %28, i8 addrspace(3)* %30, align 1, !tbaa !13
  tail call void @_Z7barrierj(i32 1) #10
  %31 = add nsw i32 %11, %7
  %32 = icmp slt i32 %31, %4
  br i1 %32, label %33, label %47

33:                                               ; preds = %5
  %34 = load i8, i8 addrspace(3)* %30, align 1, !tbaa !13
  %35 = zext i8 %34 to i32
  %36 = load i8, i8 addrspace(3)* %24, align 1, !tbaa !13
  %37 = zext i8 %36 to i32
  %38 = load i8, i8 addrspace(3)* %18, align 1, !tbaa !13
  %39 = zext i8 %38 to i32
  %40 = add nsw i32 %39, -128
  %41 = sext i32 %31 to i64
  %42 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %41
  store i32 %40, i32 addrspace(1)* %42, align 4, !tbaa !4
  %43 = add nsw i32 %37, -128
  %44 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %41
  store i32 %43, i32 addrspace(1)* %44, align 4, !tbaa !4
  %45 = add nsw i32 %35, -128
  %46 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %41
  store i32 %45, i32 addrspace(1)* %46, align 4, !tbaa !4
  br label %47

47:                                               ; preds = %33, %5
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z12get_local_idj(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z14get_local_sizej(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z12get_group_idj(i32) local_unnamed_addr #3

; Function Attrs: convergent
declare hidden void @_Z7barrierj(i32) local_unnamed_addr #4

; Function Attrs: convergent norecurse nounwind
define protected amdgpu_kernel void @c_CopySrcToComponent(i32 addrspace(1)* nocapture %0, i8 addrspace(1)* nocapture readonly %1, i32 %2) local_unnamed_addr #2 !kernel_arg_addr_space !14 !kernel_arg_access_qual !15 !kernel_arg_type !16 !kernel_arg_base_type !16 !kernel_arg_type_qual !17 !kernel_arg_name !18 {
  %4 = tail call i64 @_Z12get_local_idj(i32 0) #9
  %5 = trunc i64 %4 to i32
  %6 = tail call i64 @_Z14get_local_sizej(i32 0) #9
  %7 = tail call i64 @_Z12get_group_idj(i32 0) #9
  %8 = mul i64 %7, %6
  %9 = trunc i64 %8 to i32
  %10 = add nsw i32 %9, %5
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %11
  %13 = load i8, i8 addrspace(1)* %12, align 1, !tbaa !13
  %14 = getelementptr inbounds [256 x i8], [256 x i8] addrspace(3)* @c_CopySrcToComponent.sData, i32 0, i32 %5
  store i8 %13, i8 addrspace(3)* %14, align 1, !tbaa !13
  tail call void @_Z7barrierj(i32 1) #10
  %15 = icmp slt i32 %10, %2
  br i1 %15, label %16, label %21

16:                                               ; preds = %3
  %17 = getelementptr inbounds i32, i32 addrspace(1)* %0, i64 %11
  %18 = load i8, i8 addrspace(3)* %14, align 1, !tbaa !13
  %19 = zext i8 %18 to i32
  %20 = add nsw i32 %19, -128
  store i32 %20, i32 addrspace(1)* %17, align 4, !tbaa !4
  br label %21

21:                                               ; preds = %16, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind writeonly
define hidden i32 @initialize_PixelIO(%struct.VerticalDWTPixelIO addrspace(5)* nocapture %0, i1 zeroext %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #1 {
  %7 = zext i1 %1 to i8
  %8 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %0, i32 0, i32 0
  store i8 %7, i8 addrspace(5)* %8, align 4, !tbaa !19
  %9 = mul nsw i32 %3, %2
  %10 = add nsw i32 %9, %4
  %11 = select i1 %1, i32 %10, i32 0
  %12 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %0, i32 0, i32 1
  store i32 %11, i32 addrspace(5)* %12, align 4, !tbaa !22
  %13 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %0, i32 0, i32 2
  store i32 %2, i32 addrspace(5)* %13, align 4, !tbaa !23
  %14 = mul nsw i32 %5, %2
  %15 = add nsw i32 %14, %4
  ret i32 %15
}

; Function Attrs: nofree norecurse nounwind writeonly
define hidden void @init_PixelLoader(%struct.VerticalDWTPixelLoader addrspace(5)* nocapture %0, i32 %1, i32 %2, i32 %3, i32 %4, %struct.VerticalDWTPixelIO addrspace(5)* nocapture %5, i1 zeroext %6) local_unnamed_addr #1 {
  %8 = icmp slt i32 %3, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %7
  %10 = shl i32 %1, 1
  %11 = add nsw i32 %10, -2
  %12 = sub i32 %11, %3
  br label %17

13:                                               ; preds = %7
  %14 = sub i32 0, %3
  %15 = icmp slt i32 %3, 0
  %16 = select i1 %15, i32 %14, i32 %3
  br label %17

17:                                               ; preds = %13, %9
  %18 = phi i32 [ %12, %9 ], [ %16, %13 ]
  %19 = zext i1 %6 to i8
  %20 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %5, i32 0, i32 0
  store i8 %19, i8 addrspace(5)* %20, align 4, !tbaa !19
  %21 = mul nsw i32 %2, %1
  %22 = add nsw i32 %18, %21
  %23 = select i1 %6, i32 %22, i32 0
  %24 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %5, i32 0, i32 1
  store i32 %23, i32 addrspace(5)* %24, align 4, !tbaa !22
  %25 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %5, i32 0, i32 2
  store i32 %1, i32 addrspace(5)* %25, align 4, !tbaa !23
  %26 = mul nsw i32 %4, %1
  %27 = sub i32 %26, %1
  %28 = add i32 %27, %18
  %29 = getelementptr inbounds %struct.VerticalDWTPixelLoader, %struct.VerticalDWTPixelLoader addrspace(5)* %0, i32 0, i32 1
  store i32 %28, i32 addrspace(5)* %29, align 4, !tbaa !24
  ret void
}

; Function Attrs: nofree norecurse nounwind writeonly
define hidden void @clear_PixelLoader(%struct.VerticalDWTPixelLoader addrspace(5)* nocapture %0, %struct.VerticalDWTPixelIO addrspace(5)* nocapture %1) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.VerticalDWTPixelLoader, %struct.VerticalDWTPixelLoader addrspace(5)* %0, i32 0, i32 1
  store i32 0, i32 addrspace(5)* %3, align 4, !tbaa !24
  %4 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %1, i32 0, i32 1
  store i32 0, i32 addrspace(5)* %4, align 4, !tbaa !22
  %5 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %1, i32 0, i32 2
  store i32 0, i32 addrspace(5)* %5, align 4, !tbaa !23
  ret void
}

; Function Attrs: nofree norecurse nounwind
define hidden i32 @loadFrom(%struct.VerticalDWTPixelLoader addrspace(5)* nocapture %0, i32 addrspace(1)* nocapture readonly %1, %struct.VerticalDWTPixelIO addrspace(5)* nocapture %2, i32 %3) local_unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %2, i32 0, i32 2
  %6 = load i32, i32 addrspace(5)* %5, align 4, !tbaa !23
  %7 = getelementptr inbounds %struct.VerticalDWTPixelLoader, %struct.VerticalDWTPixelLoader addrspace(5)* %0, i32 0, i32 1
  %8 = load i32, i32 addrspace(5)* %7, align 4, !tbaa !24
  %9 = add nsw i32 %8, %6
  store i32 %9, i32 addrspace(5)* %7, align 4, !tbaa !24
  %10 = icmp eq i32 %3, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %2, i32 0, i32 1
  %13 = load i32, i32 addrspace(5)* %12, align 4, !tbaa !22
  %14 = icmp eq i32 %9, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = sub nsw i32 0, %6
  %17 = shl nsw i32 %6, 1
  %18 = sub nsw i32 %9, %17
  store i32 %18, i32 addrspace(5)* %7, align 4, !tbaa !24
  store i32 %16, i32 addrspace(5)* %5, align 4, !tbaa !23
  br label %19

19:                                               ; preds = %4, %15, %11
  %20 = phi i32 [ %9, %4 ], [ %18, %15 ], [ %9, %11 ]
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32 addrspace(1)* %1, i64 %21
  %23 = load i32, i32 addrspace(1)* %22, align 4, !tbaa !4
  ret i32 %23
}

; Function Attrs: nofree norecurse nounwind
define hidden i32 @initialize_BandIO(%struct.VerticalDWTBandIO addrspace(5)* nocapture %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #5 {
  %6 = sdiv i32 %3, 2
  %7 = and i32 %3, 1
  %8 = icmp eq i32 %7, 0
  %9 = sdiv i32 %1, 2
  %10 = and i32 %1, 1
  %11 = add nsw i32 %9, %10
  %12 = sdiv i32 %2, 2
  %13 = and i32 %2, 1
  %14 = add nsw i32 %12, %13
  br i1 %8, label %20, label %15

15:                                               ; preds = %5
  %16 = mul nsw i32 %14, %11
  %17 = add nsw i32 %16, %6
  %18 = mul nsw i32 %2, %1
  %19 = sdiv i32 %18, 2
  br label %22

20:                                               ; preds = %5
  %21 = mul nsw i32 %14, %1
  br label %22

22:                                               ; preds = %20, %15
  %23 = phi i32 [ %21, %20 ], [ %19, %15 ]
  %24 = phi i32 [ %6, %20 ], [ %17, %15 ]
  %25 = phi i32 [ %11, %20 ], [ %9, %15 ]
  %26 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %0, i32 0, i32 3
  store i32 %23, i32 addrspace(5)* %26, align 4
  %27 = sub nsw i32 %25, %23
  %28 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %0, i32 0, i32 2
  store i32 %27, i32 addrspace(5)* %28, align 4, !tbaa !26
  %29 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %0, i32 0, i32 0
  %30 = load i8, i8 addrspace(5)* %29, align 4, !tbaa !28, !range !29
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %22
  %33 = mul nsw i32 %25, %12
  %34 = add nsw i32 %33, %24
  %35 = mul nuw nsw i32 %23, %13
  %36 = add nsw i32 %34, %35
  br label %37

37:                                               ; preds = %22, %32
  %38 = phi i32 [ %36, %32 ], [ 0, %22 ]
  %39 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %0, i32 0, i32 1
  store i32 %38, i32 addrspace(5)* %39, align 4
  %40 = sdiv i32 %4, 2
  %41 = mul nsw i32 %25, %40
  %42 = add nsw i32 %41, %24
  %43 = and i32 %4, 1
  %44 = mul nuw nsw i32 %23, %43
  %45 = add nsw i32 %42, %44
  ret i32 %45
}

; Function Attrs: nofree norecurse nounwind
define hidden i32 @saveAndUpdate(%struct.VerticalDWTBandWriter addrspace(5)* nocapture %0, i1 zeroext %1, %struct.VerticalDWTBandIO addrspace(5)* nocapture readonly %2, i32 addrspace(1)* nocapture %3, i32 addrspace(3)* nocapture readonly %4, i32 addrspace(5)* nocapture readonly %5) local_unnamed_addr #5 {
  %7 = zext i1 %1 to i8
  %8 = getelementptr inbounds %struct.VerticalDWTBandWriter, %struct.VerticalDWTBandWriter addrspace(5)* %0, i32 0, i32 0
  store i8 %7, i8 addrspace(5)* %8, align 4, !tbaa !30
  %9 = getelementptr inbounds %struct.VerticalDWTBandWriter, %struct.VerticalDWTBandWriter addrspace(5)* %0, i32 0, i32 1
  %10 = load i32, i32 addrspace(5)* %9, align 4, !tbaa !32
  br i1 %1, label %11, label %15

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %2, i32 0, i32 1
  %13 = load i32, i32 addrspace(5)* %12, align 4, !tbaa !33
  %14 = icmp eq i32 %10, %13
  br i1 %14, label %21, label %15

15:                                               ; preds = %6, %11
  %16 = load i32, i32 addrspace(3)* %4, align 4, !tbaa !4
  %17 = sext i32 %10 to i64
  %18 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %17
  store i32 %16, i32 addrspace(1)* %18, align 4, !tbaa !4
  %19 = load i32, i32 addrspace(5)* %5, align 4, !tbaa !4
  %20 = add nsw i32 %19, %10
  store i32 %20, i32 addrspace(5)* %9, align 4, !tbaa !32
  br label %21

21:                                               ; preds = %11, %15
  %22 = phi i32 [ %10, %11 ], [ %20, %15 ]
  ret i32 %22
}

; Function Attrs: nofree norecurse nounwind writeonly
define hidden void @clear_BandWriter(%struct.VerticalDWTBandWriter addrspace(5)* nocapture %0, %struct.VerticalDWTBandIO addrspace(5)* nocapture %1) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 1
  store i32 0, i32 addrspace(5)* %3, align 4, !tbaa !33
  %4 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 2
  store i32 0, i32 addrspace(5)* %4, align 4, !tbaa !26
  %5 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 3
  store i32 0, i32 addrspace(5)* %5, align 4, !tbaa !34
  %6 = getelementptr inbounds %struct.VerticalDWTBandWriter, %struct.VerticalDWTBandWriter addrspace(5)* %0, i32 0, i32 1
  store i32 0, i32 addrspace(5)* %6, align 4, !tbaa !32
  ret void
}

; Function Attrs: nofree norecurse nounwind
define hidden void @init_BandWriter(%struct.VerticalDWTBandWriter addrspace(5)* nocapture %0, %struct.VerticalDWTBandIO addrspace(5)* nocapture %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #5 {
  %7 = icmp slt i32 %4, %2
  br i1 %7, label %8, label %49

8:                                                ; preds = %6
  %9 = sdiv i32 %4, 2
  %10 = and i32 %4, 1
  %11 = icmp eq i32 %10, 0
  %12 = sdiv i32 %2, 2
  %13 = and i32 %2, 1
  %14 = add nsw i32 %12, %13
  %15 = sdiv i32 %3, 2
  %16 = and i32 %3, 1
  %17 = add nsw i32 %15, %16
  br i1 %11, label %23, label %18

18:                                               ; preds = %8
  %19 = mul nsw i32 %17, %14
  %20 = add nsw i32 %19, %9
  %21 = mul nsw i32 %3, %2
  %22 = sdiv i32 %21, 2
  br label %25

23:                                               ; preds = %8
  %24 = mul nsw i32 %17, %2
  br label %25

25:                                               ; preds = %23, %18
  %26 = phi i32 [ %24, %23 ], [ %22, %18 ]
  %27 = phi i32 [ %9, %23 ], [ %20, %18 ]
  %28 = phi i32 [ %14, %23 ], [ %12, %18 ]
  %29 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 3
  store i32 %26, i32 addrspace(5)* %29, align 4
  %30 = sub nsw i32 %28, %26
  %31 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 2
  store i32 %30, i32 addrspace(5)* %31, align 4, !tbaa !26
  %32 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 0
  %33 = load i8, i8 addrspace(5)* %32, align 4, !tbaa !28, !range !29
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %25
  %36 = mul nsw i32 %28, %15
  %37 = add nsw i32 %36, %27
  %38 = mul nuw nsw i32 %26, %16
  %39 = add nsw i32 %37, %38
  br label %40

40:                                               ; preds = %25, %35
  %41 = phi i32 [ %39, %35 ], [ 0, %25 ]
  %42 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 1
  store i32 %41, i32 addrspace(5)* %42, align 4
  %43 = sdiv i32 %5, 2
  %44 = mul nsw i32 %28, %43
  %45 = add nsw i32 %44, %27
  %46 = and i32 %5, 1
  %47 = mul nuw nsw i32 %26, %46
  %48 = add nsw i32 %45, %47
  br label %53

49:                                               ; preds = %6
  %50 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 1
  store i32 0, i32 addrspace(5)* %50, align 4, !tbaa !33
  %51 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 2
  store i32 0, i32 addrspace(5)* %51, align 4, !tbaa !26
  %52 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 3
  store i32 0, i32 addrspace(5)* %52, align 4, !tbaa !34
  br label %53

53:                                               ; preds = %49, %40
  %54 = phi i32 [ 0, %49 ], [ %48, %40 ]
  %55 = getelementptr inbounds %struct.VerticalDWTBandWriter, %struct.VerticalDWTBandWriter addrspace(5)* %0, i32 0, i32 1
  store i32 %54, i32 addrspace(5)* %55, align 4, !tbaa !32
  ret void
}

; Function Attrs: nofree norecurse nounwind
define hidden i32 @writeLowInto(%struct.VerticalDWTBandWriter addrspace(5)* nocapture %0, %struct.VerticalDWTBandIO addrspace(5)* nocapture readonly %1, i32 addrspace(1)* nocapture %2, i32 addrspace(3)* nocapture readonly %3) local_unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.VerticalDWTBandWriter, %struct.VerticalDWTBandWriter addrspace(5)* %0, i32 0, i32 0
  %6 = load i8, i8 addrspace(5)* %5, align 4, !tbaa !30, !range !29
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 3
  %9 = getelementptr inbounds %struct.VerticalDWTBandWriter, %struct.VerticalDWTBandWriter addrspace(5)* %0, i32 0, i32 1
  %10 = load i32, i32 addrspace(5)* %9, align 4, !tbaa !32
  br i1 %7, label %15, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 1
  %13 = load i32, i32 addrspace(5)* %12, align 4, !tbaa !33
  %14 = icmp eq i32 %10, %13
  br i1 %14, label %21, label %15

15:                                               ; preds = %4, %11
  %16 = load i32, i32 addrspace(3)* %3, align 4, !tbaa !4
  %17 = sext i32 %10 to i64
  %18 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %17
  store i32 %16, i32 addrspace(1)* %18, align 4, !tbaa !4
  %19 = load i32, i32 addrspace(5)* %8, align 4, !tbaa !4
  %20 = add nsw i32 %19, %10
  store i32 %20, i32 addrspace(5)* %9, align 4, !tbaa !32
  br label %21

21:                                               ; preds = %11, %15
  %22 = phi i32 [ %10, %11 ], [ %20, %15 ]
  ret i32 %22
}

; Function Attrs: nofree norecurse nounwind
define hidden i32 @writeHighInto(%struct.VerticalDWTBandWriter addrspace(5)* nocapture %0, %struct.VerticalDWTBandIO addrspace(5)* nocapture readonly %1, i32 addrspace(1)* nocapture %2, i32 addrspace(3)* nocapture readonly %3) local_unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.VerticalDWTBandWriter, %struct.VerticalDWTBandWriter addrspace(5)* %0, i32 0, i32 0
  %6 = load i8, i8 addrspace(5)* %5, align 4, !tbaa !30, !range !29
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 2
  %9 = getelementptr inbounds %struct.VerticalDWTBandWriter, %struct.VerticalDWTBandWriter addrspace(5)* %0, i32 0, i32 1
  %10 = load i32, i32 addrspace(5)* %9, align 4, !tbaa !32
  br i1 %7, label %15, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.VerticalDWTBandIO, %struct.VerticalDWTBandIO addrspace(5)* %1, i32 0, i32 1
  %13 = load i32, i32 addrspace(5)* %12, align 4, !tbaa !33
  %14 = icmp eq i32 %10, %13
  br i1 %14, label %21, label %15

15:                                               ; preds = %4, %11
  %16 = load i32, i32 addrspace(3)* %3, align 4, !tbaa !4
  %17 = sext i32 %10 to i64
  %18 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %17
  store i32 %16, i32 addrspace(1)* %18, align 4, !tbaa !4
  %19 = load i32, i32 addrspace(5)* %8, align 4, !tbaa !4
  %20 = add nsw i32 %19, %10
  store i32 %20, i32 addrspace(5)* %9, align 4, !tbaa !32
  br label %21

21:                                               ; preds = %11, %15
  %22 = phi i32 [ %10, %11 ], [ %20, %15 ]
  ret i32 %22
}

; Function Attrs: convergent nofree norecurse nounwind
define hidden void @horizontalStep(%struct.TransformBuffer addrspace(3)* nocapture %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #6 {
  %7 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 0
  %8 = load i32, i32 addrspace(3)* %7, align 4, !tbaa !35
  %9 = freeze i32 %1
  %10 = freeze i32 %8
  %11 = sdiv i32 %9, %10
  %12 = mul i32 %11, %10
  %13 = sub i32 %9, %12
  %14 = sub nsw i32 %1, %13
  %15 = icmp sgt i32 %11, 0
  %16 = tail call i64 @_Z12get_local_idj(i32 0) #9
  br i1 %15, label %17, label %19

17:                                               ; preds = %6
  %18 = trunc i64 %16 to i32
  br label %22

19:                                               ; preds = %48, %6
  %20 = sext i32 %13 to i64
  %21 = icmp ult i64 %16, %20
  br i1 %21, label %53, label %75

22:                                               ; preds = %51, %17
  %23 = phi i32 [ %8, %17 ], [ %52, %51 ]
  %24 = phi i32 [ 0, %17 ], [ %49, %51 ]
  %25 = mul nsw i32 %23, %24
  %26 = add i32 %25, %18
  %27 = add i32 %26, %2
  %28 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %27
  %29 = load i32, i32 addrspace(3)* %28, align 4, !tbaa !4
  %30 = add i32 %26, %4
  %31 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %30
  %32 = load i32, i32 addrspace(3)* %31, align 4, !tbaa !4
  %33 = add i32 %26, %3
  %34 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %33
  switch i32 %5, label %48 [
    i32 0, label %35
    i32 1, label %40
  ]

35:                                               ; preds = %22
  %36 = add nsw i32 %32, %29
  %37 = sdiv i32 %36, 2
  %38 = load i32, i32 addrspace(3)* %34, align 4, !tbaa !4
  %39 = sub nsw i32 %38, %37
  br label %46

40:                                               ; preds = %22
  %41 = add nsw i32 %32, %29
  %42 = add nsw i32 %41, 2
  %43 = sdiv i32 %42, 4
  %44 = load i32, i32 addrspace(3)* %34, align 4, !tbaa !4
  %45 = add nsw i32 %44, %43
  br label %46

46:                                               ; preds = %35, %40
  %47 = phi i32 [ %45, %40 ], [ %39, %35 ]
  store i32 %47, i32 addrspace(3)* %34, align 4, !tbaa !4
  br label %48

48:                                               ; preds = %46, %22
  %49 = add nuw nsw i32 %24, 1
  %50 = icmp eq i32 %49, %11
  br i1 %50, label %19, label %51

51:                                               ; preds = %48
  %52 = load i32, i32 addrspace(3)* %7, align 4, !tbaa !35
  br label %22

53:                                               ; preds = %19
  %54 = trunc i64 %16 to i32
  %55 = add i32 %14, %54
  %56 = add i32 %55, %2
  %57 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %56
  %58 = load i32, i32 addrspace(3)* %57, align 4, !tbaa !4
  %59 = add i32 %55, %4
  %60 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %59
  %61 = load i32, i32 addrspace(3)* %60, align 4, !tbaa !4
  %62 = add i32 %55, %3
  %63 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %62
  switch i32 %5, label %75 [
    i32 0, label %64
    i32 1, label %69
  ]

64:                                               ; preds = %53
  %65 = add nsw i32 %61, %58
  %66 = sdiv i32 %65, 2
  %67 = load i32, i32 addrspace(3)* %63, align 4, !tbaa !4
  %68 = sub nsw i32 %67, %66
  store i32 %68, i32 addrspace(3)* %63, align 4, !tbaa !4
  br label %75

69:                                               ; preds = %53
  %70 = add nsw i32 %61, %58
  %71 = add nsw i32 %70, 2
  %72 = sdiv i32 %71, 4
  %73 = load i32, i32 addrspace(3)* %63, align 4, !tbaa !4
  %74 = add nsw i32 %73, %72
  store i32 %74, i32 addrspace(3)* %63, align 4, !tbaa !4
  br label %75

75:                                               ; preds = %64, %69, %53, %19
  ret void
}

; Function Attrs: convergent nofree norecurse nounwind
define hidden void @forEachHorizontalOdd(%struct.TransformBuffer addrspace(3)* nocapture %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #6 {
  %5 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 2
  %6 = load i32, i32 addrspace(3)* %5, align 4, !tbaa !37
  %7 = mul nsw i32 %6, %2
  %8 = add nsw i32 %7, -1
  %9 = mul nsw i32 %6, %1
  %10 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 6
  %11 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !38
  %12 = add nsw i32 %9, %11
  %13 = add nsw i32 %9, 1
  %14 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 0
  %15 = load i32, i32 addrspace(3)* %14, align 4, !tbaa !35
  %16 = freeze i32 %8
  %17 = freeze i32 %15
  %18 = sdiv i32 %16, %17
  %19 = mul i32 %18, %17
  %20 = sub i32 %16, %19
  %21 = sub nsw i32 %8, %20
  %22 = icmp sgt i32 %18, 0
  %23 = tail call i64 @_Z12get_local_idj(i32 0) #9
  br i1 %22, label %24, label %26

24:                                               ; preds = %4
  %25 = trunc i64 %23 to i32
  br label %29

26:                                               ; preds = %55, %4
  %27 = sext i32 %20 to i64
  %28 = icmp ult i64 %23, %27
  br i1 %28, label %60, label %82

29:                                               ; preds = %58, %24
  %30 = phi i32 [ %15, %24 ], [ %59, %58 ]
  %31 = phi i32 [ 0, %24 ], [ %56, %58 ]
  %32 = mul nsw i32 %30, %31
  %33 = add i32 %32, %25
  %34 = add i32 %33, %9
  %35 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %34
  %36 = load i32, i32 addrspace(3)* %35, align 4, !tbaa !4
  %37 = add i32 %33, %13
  %38 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %37
  %39 = load i32, i32 addrspace(3)* %38, align 4, !tbaa !4
  %40 = add i32 %33, %12
  %41 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %40
  switch i32 %3, label %55 [
    i32 0, label %42
    i32 1, label %47
  ]

42:                                               ; preds = %29
  %43 = add nsw i32 %39, %36
  %44 = sdiv i32 %43, 2
  %45 = load i32, i32 addrspace(3)* %41, align 4, !tbaa !4
  %46 = sub nsw i32 %45, %44
  br label %53

47:                                               ; preds = %29
  %48 = add nsw i32 %39, %36
  %49 = add nsw i32 %48, 2
  %50 = sdiv i32 %49, 4
  %51 = load i32, i32 addrspace(3)* %41, align 4, !tbaa !4
  %52 = add nsw i32 %51, %50
  br label %53

53:                                               ; preds = %42, %47
  %54 = phi i32 [ %52, %47 ], [ %46, %42 ]
  store i32 %54, i32 addrspace(3)* %41, align 4, !tbaa !4
  br label %55

55:                                               ; preds = %53, %29
  %56 = add nuw nsw i32 %31, 1
  %57 = icmp eq i32 %56, %18
  br i1 %57, label %26, label %58

58:                                               ; preds = %55
  %59 = load i32, i32 addrspace(3)* %14, align 4, !tbaa !35
  br label %29

60:                                               ; preds = %26
  %61 = trunc i64 %23 to i32
  %62 = add i32 %21, %61
  %63 = add i32 %62, %9
  %64 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %63
  %65 = load i32, i32 addrspace(3)* %64, align 4, !tbaa !4
  %66 = add i32 %62, %13
  %67 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %66
  %68 = load i32, i32 addrspace(3)* %67, align 4, !tbaa !4
  %69 = add i32 %62, %12
  %70 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %69
  switch i32 %3, label %82 [
    i32 0, label %71
    i32 1, label %76
  ]

71:                                               ; preds = %60
  %72 = add nsw i32 %68, %65
  %73 = sdiv i32 %72, 2
  %74 = load i32, i32 addrspace(3)* %70, align 4, !tbaa !4
  %75 = sub nsw i32 %74, %73
  store i32 %75, i32 addrspace(3)* %70, align 4, !tbaa !4
  br label %82

76:                                               ; preds = %60
  %77 = add nsw i32 %68, %65
  %78 = add nsw i32 %77, 2
  %79 = sdiv i32 %78, 4
  %80 = load i32, i32 addrspace(3)* %70, align 4, !tbaa !4
  %81 = add nsw i32 %80, %79
  store i32 %81, i32 addrspace(3)* %70, align 4, !tbaa !4
  br label %82

82:                                               ; preds = %26, %60, %71, %76
  ret void
}

; Function Attrs: convergent nofree norecurse nounwind
define hidden void @forEachHorizontalEven(%struct.TransformBuffer addrspace(3)* nocapture %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #6 {
  %5 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 2
  %6 = load i32, i32 addrspace(3)* %5, align 4, !tbaa !37
  %7 = mul nsw i32 %6, %2
  %8 = add nsw i32 %7, -1
  %9 = mul nsw i32 %6, %1
  %10 = add nsw i32 %9, 1
  %11 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 6
  %12 = load i32, i32 addrspace(3)* %11, align 4, !tbaa !38
  %13 = add nsw i32 %9, %12
  %14 = add nsw i32 %13, 1
  %15 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 0
  %16 = load i32, i32 addrspace(3)* %15, align 4, !tbaa !35
  %17 = freeze i32 %8
  %18 = freeze i32 %16
  %19 = sdiv i32 %17, %18
  %20 = mul i32 %19, %18
  %21 = sub i32 %17, %20
  %22 = sub nsw i32 %8, %21
  %23 = icmp sgt i32 %19, 0
  %24 = tail call i64 @_Z12get_local_idj(i32 0) #9
  br i1 %23, label %25, label %27

25:                                               ; preds = %4
  %26 = trunc i64 %24 to i32
  br label %30

27:                                               ; preds = %56, %4
  %28 = sext i32 %21 to i64
  %29 = icmp ult i64 %24, %28
  br i1 %29, label %61, label %83

30:                                               ; preds = %59, %25
  %31 = phi i32 [ %16, %25 ], [ %60, %59 ]
  %32 = phi i32 [ 0, %25 ], [ %57, %59 ]
  %33 = mul nsw i32 %31, %32
  %34 = add i32 %33, %26
  %35 = add i32 %34, %13
  %36 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %35
  %37 = load i32, i32 addrspace(3)* %36, align 4, !tbaa !4
  %38 = add i32 %34, %14
  %39 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %38
  %40 = load i32, i32 addrspace(3)* %39, align 4, !tbaa !4
  %41 = add i32 %34, %10
  %42 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %41
  switch i32 %3, label %56 [
    i32 0, label %43
    i32 1, label %48
  ]

43:                                               ; preds = %30
  %44 = add nsw i32 %40, %37
  %45 = sdiv i32 %44, 2
  %46 = load i32, i32 addrspace(3)* %42, align 4, !tbaa !4
  %47 = sub nsw i32 %46, %45
  br label %54

48:                                               ; preds = %30
  %49 = add nsw i32 %40, %37
  %50 = add nsw i32 %49, 2
  %51 = sdiv i32 %50, 4
  %52 = load i32, i32 addrspace(3)* %42, align 4, !tbaa !4
  %53 = add nsw i32 %52, %51
  br label %54

54:                                               ; preds = %43, %48
  %55 = phi i32 [ %53, %48 ], [ %47, %43 ]
  store i32 %55, i32 addrspace(3)* %42, align 4, !tbaa !4
  br label %56

56:                                               ; preds = %54, %30
  %57 = add nuw nsw i32 %32, 1
  %58 = icmp eq i32 %57, %19
  br i1 %58, label %27, label %59

59:                                               ; preds = %56
  %60 = load i32, i32 addrspace(3)* %15, align 4, !tbaa !35
  br label %30

61:                                               ; preds = %27
  %62 = trunc i64 %24 to i32
  %63 = add i32 %22, %62
  %64 = add i32 %63, %13
  %65 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %64
  %66 = load i32, i32 addrspace(3)* %65, align 4, !tbaa !4
  %67 = add i32 %63, %14
  %68 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %67
  %69 = load i32, i32 addrspace(3)* %68, align 4, !tbaa !4
  %70 = add i32 %63, %10
  %71 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %70
  switch i32 %3, label %83 [
    i32 0, label %72
    i32 1, label %77
  ]

72:                                               ; preds = %61
  %73 = add nsw i32 %69, %66
  %74 = sdiv i32 %73, 2
  %75 = load i32, i32 addrspace(3)* %71, align 4, !tbaa !4
  %76 = sub nsw i32 %75, %74
  store i32 %76, i32 addrspace(3)* %71, align 4, !tbaa !4
  br label %83

77:                                               ; preds = %61
  %78 = add nsw i32 %69, %66
  %79 = add nsw i32 %78, 2
  %80 = sdiv i32 %79, 4
  %81 = load i32, i32 addrspace(3)* %71, align 4, !tbaa !4
  %82 = add nsw i32 %81, %80
  store i32 %82, i32 addrspace(3)* %71, align 4, !tbaa !4
  br label %83

83:                                               ; preds = %27, %61, %72, %77
  ret void
}

; Function Attrs: nofree norecurse nounwind
define hidden void @forEachVerticalOdd(%struct.TransformBuffer addrspace(3)* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 1
  %5 = load i32, i32 addrspace(3)* %4, align 4, !tbaa !39
  %6 = add nsw i32 %5, -1
  %7 = sdiv i32 %6, 2
  %8 = icmp sgt i32 %5, 2
  br i1 %8, label %9, label %49

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 2
  %11 = icmp eq i32 %2, 0
  %12 = icmp sgt i32 %7, 1
  %13 = select i1 %12, i32 %7, i32 1
  %14 = add nsw i32 %13, -1
  %15 = and i32 %13, 3
  %16 = icmp ult i32 %14, 3
  br i1 %16, label %19, label %17

17:                                               ; preds = %9
  %18 = and i32 %13, 2147483644
  br label %50

19:                                               ; preds = %139, %9
  %20 = phi i32 [ 0, %9 ], [ %140, %139 ]
  %21 = icmp eq i32 %15, 0
  br i1 %21, label %49, label %22

22:                                               ; preds = %19, %45
  %23 = phi i32 [ %46, %45 ], [ %20, %19 ]
  %24 = phi i32 [ %47, %45 ], [ %15, %19 ]
  %25 = shl nuw nsw i32 %23, 1
  %26 = or i32 %25, 1
  %27 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !37
  br i1 %11, label %28, label %45

28:                                               ; preds = %22
  %29 = add nuw nsw i32 %26, 1
  %30 = mul nsw i32 %27, %29
  %31 = add nsw i32 %30, %1
  %32 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %31
  %33 = load i32, i32 addrspace(3)* %32, align 4, !tbaa !4
  %34 = mul nsw i32 %27, %25
  %35 = add nsw i32 %34, %1
  %36 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %35
  %37 = load i32, i32 addrspace(3)* %36, align 4, !tbaa !4
  %38 = add nsw i32 %37, %33
  %39 = sdiv i32 %38, 2
  %40 = mul nsw i32 %27, %26
  %41 = add nsw i32 %40, %1
  %42 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %41
  %43 = load i32, i32 addrspace(3)* %42, align 4, !tbaa !4
  %44 = sub nsw i32 %43, %39
  store i32 %44, i32 addrspace(3)* %42, align 4, !tbaa !4
  br label %45

45:                                               ; preds = %28, %22
  %46 = add nuw nsw i32 %23, 1
  %47 = add i32 %24, -1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %22, !llvm.loop !40

49:                                               ; preds = %19, %45, %3
  ret void

50:                                               ; preds = %139, %17
  %51 = phi i32 [ 0, %17 ], [ %140, %139 ]
  %52 = phi i32 [ %18, %17 ], [ %141, %139 ]
  %53 = shl nuw nsw i32 %51, 1
  %54 = or i32 %53, 1
  %55 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !37
  br i1 %11, label %56, label %73

56:                                               ; preds = %50
  %57 = add nuw nsw i32 %54, 1
  %58 = mul nsw i32 %55, %57
  %59 = add nsw i32 %58, %1
  %60 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %59
  %61 = load i32, i32 addrspace(3)* %60, align 4, !tbaa !4
  %62 = mul nsw i32 %55, %53
  %63 = add nsw i32 %62, %1
  %64 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %63
  %65 = load i32, i32 addrspace(3)* %64, align 4, !tbaa !4
  %66 = add nsw i32 %65, %61
  %67 = sdiv i32 %66, 2
  %68 = mul nsw i32 %55, %54
  %69 = add nsw i32 %68, %1
  %70 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %69
  %71 = load i32, i32 addrspace(3)* %70, align 4, !tbaa !4
  %72 = sub nsw i32 %71, %67
  store i32 %72, i32 addrspace(3)* %70, align 4, !tbaa !4
  br label %73

73:                                               ; preds = %50, %56
  %74 = shl nuw i32 %51, 1
  %75 = or i32 %74, 3
  %76 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !37
  br i1 %11, label %77, label %95

77:                                               ; preds = %73
  %78 = or i32 %74, 2
  %79 = add nuw nsw i32 %75, 1
  %80 = mul nsw i32 %76, %79
  %81 = add nsw i32 %80, %1
  %82 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %81
  %83 = load i32, i32 addrspace(3)* %82, align 4, !tbaa !4
  %84 = mul nsw i32 %76, %78
  %85 = add nsw i32 %84, %1
  %86 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %85
  %87 = load i32, i32 addrspace(3)* %86, align 4, !tbaa !4
  %88 = add nsw i32 %87, %83
  %89 = sdiv i32 %88, 2
  %90 = mul nsw i32 %76, %75
  %91 = add nsw i32 %90, %1
  %92 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %91
  %93 = load i32, i32 addrspace(3)* %92, align 4, !tbaa !4
  %94 = sub nsw i32 %93, %89
  store i32 %94, i32 addrspace(3)* %92, align 4, !tbaa !4
  br label %95

95:                                               ; preds = %77, %73
  %96 = shl nuw i32 %51, 1
  %97 = or i32 %96, 5
  %98 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !37
  br i1 %11, label %99, label %117

99:                                               ; preds = %95
  %100 = or i32 %96, 4
  %101 = add nuw nsw i32 %97, 1
  %102 = mul nsw i32 %98, %101
  %103 = add nsw i32 %102, %1
  %104 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %103
  %105 = load i32, i32 addrspace(3)* %104, align 4, !tbaa !4
  %106 = mul nsw i32 %98, %100
  %107 = add nsw i32 %106, %1
  %108 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %107
  %109 = load i32, i32 addrspace(3)* %108, align 4, !tbaa !4
  %110 = add nsw i32 %109, %105
  %111 = sdiv i32 %110, 2
  %112 = mul nsw i32 %98, %97
  %113 = add nsw i32 %112, %1
  %114 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %113
  %115 = load i32, i32 addrspace(3)* %114, align 4, !tbaa !4
  %116 = sub nsw i32 %115, %111
  store i32 %116, i32 addrspace(3)* %114, align 4, !tbaa !4
  br label %117

117:                                              ; preds = %99, %95
  %118 = shl nuw i32 %51, 1
  %119 = or i32 %118, 7
  %120 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !37
  br i1 %11, label %121, label %139

121:                                              ; preds = %117
  %122 = or i32 %118, 6
  %123 = add nuw nsw i32 %119, 1
  %124 = mul nsw i32 %120, %123
  %125 = add nsw i32 %124, %1
  %126 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %125
  %127 = load i32, i32 addrspace(3)* %126, align 4, !tbaa !4
  %128 = mul nsw i32 %120, %122
  %129 = add nsw i32 %128, %1
  %130 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %129
  %131 = load i32, i32 addrspace(3)* %130, align 4, !tbaa !4
  %132 = add nsw i32 %131, %127
  %133 = sdiv i32 %132, 2
  %134 = mul nsw i32 %120, %119
  %135 = add nsw i32 %134, %1
  %136 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %135
  %137 = load i32, i32 addrspace(3)* %136, align 4, !tbaa !4
  %138 = sub nsw i32 %137, %133
  store i32 %138, i32 addrspace(3)* %136, align 4, !tbaa !4
  br label %139

139:                                              ; preds = %121, %117
  %140 = add nuw nsw i32 %51, 4
  %141 = add i32 %52, -4
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %19, label %50
}

; Function Attrs: nofree norecurse nounwind
define hidden void @forEachVerticalEven(%struct.TransformBuffer addrspace(3)* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 1
  %5 = load i32, i32 addrspace(3)* %4, align 4, !tbaa !39
  %6 = icmp sgt i32 %5, 3
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = lshr i32 %5, 1
  %9 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 2
  %10 = icmp eq i32 %2, 1
  %11 = icmp ugt i32 %8, 2
  %12 = select i1 %11, i32 %8, i32 2
  %13 = add nsw i32 %12, -1
  %14 = add nsw i32 %12, -2
  %15 = and i32 %13, 3
  %16 = icmp ult i32 %14, 3
  br i1 %16, label %48, label %17

17:                                               ; preds = %7
  %18 = and i32 %13, -4
  br label %19

19:                                               ; preds = %148, %17
  %20 = phi i32 [ 0, %17 ], [ %149, %148 ]
  %21 = phi i32 [ %18, %17 ], [ %150, %148 ]
  %22 = shl nuw nsw i32 %20, 1
  %23 = load i32, i32 addrspace(3)* %9, align 4, !tbaa !37
  br i1 %10, label %24, label %44

24:                                               ; preds = %19
  %25 = or i32 %22, 3
  %26 = mul nsw i32 %23, %25
  %27 = add nsw i32 %26, %1
  %28 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %27
  %29 = load i32, i32 addrspace(3)* %28, align 4, !tbaa !4
  %30 = or i32 %22, 2
  %31 = or i32 %22, 1
  %32 = mul nsw i32 %23, %31
  %33 = add nsw i32 %32, %1
  %34 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %33
  %35 = load i32, i32 addrspace(3)* %34, align 4, !tbaa !4
  %36 = add i32 %29, 2
  %37 = add i32 %36, %35
  %38 = sdiv i32 %37, 4
  %39 = mul nsw i32 %23, %30
  %40 = add nsw i32 %39, %1
  %41 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %40
  %42 = load i32, i32 addrspace(3)* %41, align 4, !tbaa !4
  %43 = add nsw i32 %38, %42
  store i32 %43, i32 addrspace(3)* %41, align 4, !tbaa !4
  br label %44

44:                                               ; preds = %19, %24
  %45 = shl nuw i32 %20, 1
  %46 = or i32 %45, 2
  %47 = load i32, i32 addrspace(3)* %9, align 4, !tbaa !37
  br i1 %10, label %81, label %101

48:                                               ; preds = %148, %7
  %49 = phi i32 [ 0, %7 ], [ %149, %148 ]
  %50 = icmp eq i32 %15, 0
  br i1 %50, label %80, label %51

51:                                               ; preds = %48, %76
  %52 = phi i32 [ %77, %76 ], [ %49, %48 ]
  %53 = phi i32 [ %78, %76 ], [ %15, %48 ]
  %54 = shl nuw nsw i32 %52, 1
  %55 = load i32, i32 addrspace(3)* %9, align 4, !tbaa !37
  br i1 %10, label %56, label %76

56:                                               ; preds = %51
  %57 = add nuw nsw i32 %54, 3
  %58 = mul nsw i32 %55, %57
  %59 = add nsw i32 %58, %1
  %60 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %59
  %61 = load i32, i32 addrspace(3)* %60, align 4, !tbaa !4
  %62 = add nuw nsw i32 %54, 2
  %63 = or i32 %54, 1
  %64 = mul nsw i32 %55, %63
  %65 = add nsw i32 %64, %1
  %66 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %65
  %67 = load i32, i32 addrspace(3)* %66, align 4, !tbaa !4
  %68 = add i32 %61, 2
  %69 = add i32 %68, %67
  %70 = sdiv i32 %69, 4
  %71 = mul nsw i32 %55, %62
  %72 = add nsw i32 %71, %1
  %73 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %72
  %74 = load i32, i32 addrspace(3)* %73, align 4, !tbaa !4
  %75 = add nsw i32 %70, %74
  store i32 %75, i32 addrspace(3)* %73, align 4, !tbaa !4
  br label %76

76:                                               ; preds = %56, %51
  %77 = add nuw nsw i32 %52, 1
  %78 = add i32 %53, -1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %51, !llvm.loop !42

80:                                               ; preds = %48, %76, %3
  ret void

81:                                               ; preds = %44
  %82 = add nuw nsw i32 %46, 3
  %83 = mul nsw i32 %47, %82
  %84 = add nsw i32 %83, %1
  %85 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %84
  %86 = load i32, i32 addrspace(3)* %85, align 4, !tbaa !4
  %87 = add nuw nsw i32 %46, 2
  %88 = or i32 %45, 3
  %89 = mul nsw i32 %47, %88
  %90 = add nsw i32 %89, %1
  %91 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %90
  %92 = load i32, i32 addrspace(3)* %91, align 4, !tbaa !4
  %93 = add i32 %86, 2
  %94 = add i32 %93, %92
  %95 = sdiv i32 %94, 4
  %96 = mul nsw i32 %47, %87
  %97 = add nsw i32 %96, %1
  %98 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %97
  %99 = load i32, i32 addrspace(3)* %98, align 4, !tbaa !4
  %100 = add nsw i32 %95, %99
  store i32 %100, i32 addrspace(3)* %98, align 4, !tbaa !4
  br label %101

101:                                              ; preds = %81, %44
  %102 = shl nuw i32 %20, 1
  %103 = load i32, i32 addrspace(3)* %9, align 4, !tbaa !37
  br i1 %10, label %104, label %124

104:                                              ; preds = %101
  %105 = or i32 %102, 7
  %106 = mul nsw i32 %103, %105
  %107 = add nsw i32 %106, %1
  %108 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %107
  %109 = load i32, i32 addrspace(3)* %108, align 4, !tbaa !4
  %110 = or i32 %102, 6
  %111 = or i32 %102, 5
  %112 = mul nsw i32 %103, %111
  %113 = add nsw i32 %112, %1
  %114 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %113
  %115 = load i32, i32 addrspace(3)* %114, align 4, !tbaa !4
  %116 = add i32 %109, 2
  %117 = add i32 %116, %115
  %118 = sdiv i32 %117, 4
  %119 = mul nsw i32 %103, %110
  %120 = add nsw i32 %119, %1
  %121 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %120
  %122 = load i32, i32 addrspace(3)* %121, align 4, !tbaa !4
  %123 = add nsw i32 %118, %122
  store i32 %123, i32 addrspace(3)* %121, align 4, !tbaa !4
  br label %124

124:                                              ; preds = %104, %101
  %125 = shl nuw i32 %20, 1
  %126 = or i32 %125, 6
  %127 = load i32, i32 addrspace(3)* %9, align 4, !tbaa !37
  br i1 %10, label %128, label %148

128:                                              ; preds = %124
  %129 = add nuw nsw i32 %126, 3
  %130 = mul nsw i32 %127, %129
  %131 = add nsw i32 %130, %1
  %132 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %131
  %133 = load i32, i32 addrspace(3)* %132, align 4, !tbaa !4
  %134 = add nuw nsw i32 %126, 2
  %135 = or i32 %125, 7
  %136 = mul nsw i32 %127, %135
  %137 = add nsw i32 %136, %1
  %138 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %137
  %139 = load i32, i32 addrspace(3)* %138, align 4, !tbaa !4
  %140 = add i32 %133, 2
  %141 = add i32 %140, %139
  %142 = sdiv i32 %141, 4
  %143 = mul nsw i32 %127, %134
  %144 = add nsw i32 %143, %1
  %145 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %0, i32 0, i32 7, i32 %144
  %146 = load i32, i32 addrspace(3)* %145, align 4, !tbaa !4
  %147 = add nsw i32 %142, %146
  store i32 %147, i32 addrspace(3)* %145, align 4, !tbaa !4
  br label %148

148:                                              ; preds = %128, %124
  %149 = add nuw nsw i32 %20, 4
  %150 = add i32 %21, -4
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %48, label %19
}

; Function Attrs: nofree norecurse nounwind writeonly
define hidden void @clear_FDWT53Column(%struct.FDWT53Column addrspace(5)* nocapture %0, %struct.VerticalDWTPixelIO addrspace(5)* nocapture %1) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %0, i32 0, i32 2
  store i32 0, i32 addrspace(5)* %3, align 4, !tbaa !43
  %4 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %0, i32 0, i32 3
  store i32 0, i32 addrspace(5)* %4, align 4, !tbaa !45
  %5 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %0, i32 0, i32 4
  store i32 0, i32 addrspace(5)* %5, align 4, !tbaa !46
  %6 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %0, i32 0, i32 5
  store i32 0, i32 addrspace(5)* %6, align 4, !tbaa !47
  %7 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %0, i32 0, i32 1, i32 1
  store i32 0, i32 addrspace(5)* %7, align 4, !tbaa !24
  %8 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %1, i32 0, i32 1
  store i32 0, i32 addrspace(5)* %8, align 4, !tbaa !22
  %9 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %1, i32 0, i32 2
  store i32 0, i32 addrspace(5)* %9, align 4, !tbaa !23
  ret void
}

; Function Attrs: norecurse nounwind readonly
define hidden i32 @getColumnOffset(i32 %0, %struct.TransformBuffer addrspace(3)* nocapture readonly %1) local_unnamed_addr #7 {
  %3 = add nsw i32 %0, 2
  %4 = sdiv i32 %3, 2
  %5 = and i32 %3, 1
  %6 = getelementptr inbounds %struct.TransformBuffer, %struct.TransformBuffer addrspace(3)* %1, i32 0, i32 6
  %7 = load i32, i32 addrspace(3)* %6, align 4, !tbaa !38
  %8 = mul nuw nsw i32 %7, %5
  %9 = add nsw i32 %8, %4
  ret i32 %9
}

; Function Attrs: convergent norecurse nounwind
define hidden void @initColumn(%struct.FDWT53 addrspace(3)* nocapture readonly %0, %struct.FDWT53Column addrspace(5)* nocapture %1, i1 zeroext %2, i32 addrspace(1)* nocapture readonly %3, i32 %4, i32 %5, i32 %6, i32 %7, %struct.VerticalDWTPixelIO addrspace(5)* %8) local_unnamed_addr #8 {
  %10 = sub i32 0, %4
  %11 = zext i1 %2 to i8
  %12 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 0
  store i8 %11, i8 addrspace(5)* %12, align 4, !tbaa !48
  %13 = add nsw i32 %6, 2
  %14 = sdiv i32 %13, 2
  %15 = and i32 %13, 1
  %16 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 6
  %17 = load i32, i32 addrspace(3)* %16, align 4, !tbaa !38
  %18 = mul nuw nsw i32 %17, %15
  %19 = add nsw i32 %18, %14
  %20 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 2
  store i32 %19, i32 addrspace(5)* %20, align 4, !tbaa !43
  %21 = tail call i64 @_Z12get_group_idj(i32 0) #9
  %22 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 0
  %23 = load i32, i32 addrspace(3)* %22, align 4, !tbaa !49
  %24 = trunc i64 %21 to i32
  %25 = mul i32 %23, %24
  %26 = add i32 %25, %6
  %27 = sub i32 0, %26
  %28 = tail call i64 @_Z12get_group_idj(i32 1) #9
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %101

30:                                               ; preds = %9
  %31 = icmp slt i32 %26, %4
  br i1 %31, label %36, label %32

32:                                               ; preds = %30
  %33 = shl i32 %4, 1
  %34 = add nsw i32 %33, -2
  %35 = sub i32 %34, %26
  br label %39

36:                                               ; preds = %30
  %37 = icmp slt i32 %26, 0
  %38 = select i1 %37, i32 %27, i32 %26
  br label %39

39:                                               ; preds = %36, %32
  %40 = phi i32 [ %35, %32 ], [ %38, %36 ]
  %41 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %8, i32 0, i32 0
  store i8 %11, i8 addrspace(5)* %41, align 4, !tbaa !19
  %42 = mul nsw i32 %5, %4
  %43 = add nsw i32 %40, %42
  %44 = select i1 %2, i32 %43, i32 0
  %45 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %8, i32 0, i32 1
  store i32 %44, i32 addrspace(5)* %45, align 4, !tbaa !22
  %46 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %8, i32 0, i32 2
  store i32 %4, i32 addrspace(5)* %46, align 4, !tbaa !23
  %47 = mul i32 %7, %4
  %48 = add nsw i32 %40, %47
  %49 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 1, i32 1
  store i32 %48, i32 addrspace(5)* %49, align 4, !tbaa !24
  %50 = icmp eq i32 %48, %44
  %51 = and i1 %50, %2
  br i1 %51, label %52, label %55

52:                                               ; preds = %39
  %53 = shl nsw i32 %4, 1
  %54 = sub nsw i32 %44, %53
  store i32 %54, i32 addrspace(5)* %49, align 4, !tbaa !24
  store i32 %10, i32 addrspace(5)* %46, align 4, !tbaa !23
  br label %55

55:                                               ; preds = %39, %52
  %56 = phi i32 [ %4, %39 ], [ %10, %52 ]
  %57 = phi i32 [ %48, %39 ], [ %54, %52 ]
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %58
  %60 = load i32, i32 addrspace(1)* %59, align 4, !tbaa !4
  %61 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 5
  store i32 %60, i32 addrspace(5)* %61, align 4, !tbaa !47
  %62 = add nsw i32 %56, %57
  store i32 %62, i32 addrspace(5)* %49, align 4, !tbaa !24
  %63 = icmp eq i32 %62, %44
  %64 = and i1 %63, %2
  br i1 %64, label %65, label %69

65:                                               ; preds = %55
  %66 = sub nsw i32 0, %56
  %67 = shl nsw i32 %56, 1
  %68 = sub nsw i32 %44, %67
  store i32 %68, i32 addrspace(5)* %49, align 4, !tbaa !24
  store i32 %66, i32 addrspace(5)* %46, align 4, !tbaa !23
  br label %69

69:                                               ; preds = %55, %65
  %70 = phi i32 [ %56, %55 ], [ %66, %65 ]
  %71 = phi i32 [ %62, %55 ], [ %68, %65 ]
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %72
  %74 = load i32, i32 addrspace(1)* %73, align 4, !tbaa !4
  %75 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 4
  store i32 %74, i32 addrspace(5)* %75, align 4, !tbaa !46
  %76 = add nsw i32 %70, %71
  store i32 %76, i32 addrspace(5)* %49, align 4, !tbaa !24
  %77 = icmp eq i32 %76, %44
  %78 = and i1 %77, %2
  br i1 %78, label %79, label %83

79:                                               ; preds = %69
  %80 = sub nsw i32 0, %70
  %81 = shl nsw i32 %70, 1
  %82 = sub nsw i32 %44, %81
  store i32 %82, i32 addrspace(5)* %49, align 4, !tbaa !24
  store i32 %80, i32 addrspace(5)* %46, align 4, !tbaa !23
  br label %83

83:                                               ; preds = %69, %79
  %84 = phi i32 [ %76, %69 ], [ %82, %79 ]
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %85
  %87 = load i32, i32 addrspace(1)* %86, align 4, !tbaa !4
  %88 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 3
  store i32 %87, i32 addrspace(5)* %88, align 4, !tbaa !45
  br i1 %31, label %93, label %89

89:                                               ; preds = %83
  %90 = shl i32 %4, 1
  %91 = add nsw i32 %90, -2
  %92 = sub i32 %91, %26
  br label %96

93:                                               ; preds = %83
  %94 = icmp slt i32 %26, 0
  %95 = select i1 %94, i32 %27, i32 %26
  br label %96

96:                                               ; preds = %93, %89
  %97 = phi i32 [ %92, %89 ], [ %95, %93 ]
  store i8 %11, i8 addrspace(5)* %41, align 4, !tbaa !19
  %98 = add nsw i32 %97, %42
  %99 = select i1 %2, i32 %98, i32 0
  store i32 %99, i32 addrspace(5)* %45, align 4, !tbaa !22
  store i32 %4, i32 addrspace(5)* %46, align 4, !tbaa !23
  %100 = add i32 %47, %97
  store i32 %100, i32 addrspace(5)* %49, align 4, !tbaa !24
  br label %161

101:                                              ; preds = %9
  %102 = add nsw i32 %7, -2
  %103 = icmp slt i32 %26, %4
  br i1 %103, label %108, label %104

104:                                              ; preds = %101
  %105 = shl i32 %4, 1
  %106 = add nsw i32 %105, -2
  %107 = sub i32 %106, %26
  br label %111

108:                                              ; preds = %101
  %109 = icmp slt i32 %26, 0
  %110 = select i1 %109, i32 %27, i32 %26
  br label %111

111:                                              ; preds = %108, %104
  %112 = phi i32 [ %107, %104 ], [ %110, %108 ]
  %113 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %8, i32 0, i32 0
  store i8 %11, i8 addrspace(5)* %113, align 4, !tbaa !19
  %114 = mul nsw i32 %5, %4
  %115 = add nsw i32 %112, %114
  %116 = select i1 %2, i32 %115, i32 0
  %117 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %8, i32 0, i32 1
  store i32 %116, i32 addrspace(5)* %117, align 4, !tbaa !22
  %118 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %8, i32 0, i32 2
  store i32 %4, i32 addrspace(5)* %118, align 4, !tbaa !23
  %119 = mul nsw i32 %102, %4
  %120 = add nsw i32 %112, %119
  %121 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 1, i32 1
  store i32 %120, i32 addrspace(5)* %121, align 4, !tbaa !24
  %122 = icmp eq i32 %120, %116
  %123 = and i1 %122, %2
  br i1 %123, label %124, label %127

124:                                              ; preds = %111
  %125 = shl nsw i32 %4, 1
  %126 = sub nsw i32 %116, %125
  store i32 %126, i32 addrspace(5)* %121, align 4, !tbaa !24
  store i32 %10, i32 addrspace(5)* %118, align 4, !tbaa !23
  br label %127

127:                                              ; preds = %111, %124
  %128 = phi i32 [ %4, %111 ], [ %10, %124 ]
  %129 = phi i32 [ %120, %111 ], [ %126, %124 ]
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %130
  %132 = load i32, i32 addrspace(1)* %131, align 4, !tbaa !4
  %133 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 3
  store i32 %132, i32 addrspace(5)* %133, align 4, !tbaa !45
  %134 = add nsw i32 %128, %129
  store i32 %134, i32 addrspace(5)* %121, align 4, !tbaa !24
  %135 = icmp eq i32 %134, %116
  %136 = and i1 %135, %2
  br i1 %136, label %137, label %141

137:                                              ; preds = %127
  %138 = sub nsw i32 0, %128
  %139 = shl nsw i32 %128, 1
  %140 = sub nsw i32 %116, %139
  store i32 %140, i32 addrspace(5)* %121, align 4, !tbaa !24
  store i32 %138, i32 addrspace(5)* %118, align 4, !tbaa !23
  br label %141

141:                                              ; preds = %127, %137
  %142 = phi i32 [ %128, %127 ], [ %138, %137 ]
  %143 = phi i32 [ %134, %127 ], [ %140, %137 ]
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %144
  %146 = load i32, i32 addrspace(1)* %145, align 4, !tbaa !4
  %147 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 4
  store i32 %146, i32 addrspace(5)* %147, align 4, !tbaa !46
  %148 = add nsw i32 %142, %143
  store i32 %148, i32 addrspace(5)* %121, align 4, !tbaa !24
  %149 = icmp eq i32 %148, %116
  %150 = and i1 %149, %2
  br i1 %150, label %151, label %155

151:                                              ; preds = %141
  %152 = sub nsw i32 0, %142
  %153 = shl nsw i32 %142, 1
  %154 = sub nsw i32 %116, %153
  store i32 %154, i32 addrspace(5)* %121, align 4, !tbaa !24
  store i32 %152, i32 addrspace(5)* %118, align 4, !tbaa !23
  br label %155

155:                                              ; preds = %141, %151
  %156 = phi i32 [ %148, %141 ], [ %154, %151 ]
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %157
  %159 = load i32, i32 addrspace(1)* %158, align 4, !tbaa !4
  %160 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 5
  store i32 %159, i32 addrspace(5)* %160, align 4, !tbaa !47
  br label %161

161:                                              ; preds = %155, %96
  ret void
}

; Function Attrs: nofree norecurse nounwind
define hidden void @loadAndVerticallyTransform(%struct.FDWT53 addrspace(3)* nocapture %0, %struct.FDWT53Column addrspace(5)* nocapture %1, i1 zeroext %2, i32 addrspace(1)* nocapture readonly %3, %struct.VerticalDWTPixelIO addrspace(5)* nocapture %4) local_unnamed_addr #5 {
  %6 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 3
  %7 = load i32, i32 addrspace(5)* %6, align 4, !tbaa !45
  %8 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 2
  %9 = load i32, i32 addrspace(5)* %8, align 4, !tbaa !43
  %10 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 4
  %11 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %9
  store i32 %7, i32 addrspace(3)* %11, align 4, !tbaa !4
  %12 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 4
  %13 = load i32, i32 addrspace(5)* %12, align 4, !tbaa !46
  %14 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !51
  %15 = add nsw i32 %14, %9
  %16 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %15
  store i32 %13, i32 addrspace(3)* %16, align 4, !tbaa !4
  %17 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 5
  %18 = load i32, i32 addrspace(5)* %17, align 4, !tbaa !47
  %19 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !51
  %20 = shl i32 %19, 1
  %21 = add nsw i32 %20, %9
  %22 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %21
  store i32 %18, i32 addrspace(3)* %22, align 4, !tbaa !4
  %23 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 1
  %24 = load i32, i32 addrspace(3)* %23, align 4, !tbaa !52
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %5
  %27 = add nsw i32 %24, 2
  br label %35

28:                                               ; preds = %5
  %29 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %4, i32 0, i32 2
  %30 = getelementptr inbounds %struct.FDWT53Column, %struct.FDWT53Column addrspace(5)* %1, i32 0, i32 1, i32 1
  %31 = getelementptr inbounds %struct.VerticalDWTPixelIO, %struct.VerticalDWTPixelIO addrspace(5)* %4, i32 0, i32 1
  %32 = load i32, i32 addrspace(5)* %30, align 4, !tbaa !24
  %33 = load i32, i32 addrspace(5)* %29, align 4, !tbaa !23
  br label %315

34:                                               ; preds = %327
  store i32 %329, i32 addrspace(5)* %30, align 4, !tbaa !24
  br label %35

35:                                               ; preds = %26, %34
  %36 = phi i32 [ %27, %26 ], [ %339, %34 ]
  %37 = phi i32 [ %24, %26 ], [ %338, %34 ]
  %38 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !51
  %39 = mul nsw i32 %38, %37
  %40 = add nsw i32 %39, %9
  %41 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %40
  %42 = load i32, i32 addrspace(3)* %41, align 4, !tbaa !4
  store i32 %42, i32 addrspace(5)* %6, align 4, !tbaa !45
  %43 = add nsw i32 %37, 1
  %44 = mul nsw i32 %38, %43
  %45 = add nsw i32 %44, %9
  %46 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %45
  %47 = load i32, i32 addrspace(3)* %46, align 4, !tbaa !4
  store i32 %47, i32 addrspace(5)* %12, align 4, !tbaa !46
  %48 = mul nsw i32 %38, %36
  %49 = add nsw i32 %48, %9
  %50 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %49
  %51 = load i32, i32 addrspace(3)* %50, align 4, !tbaa !4
  store i32 %51, i32 addrspace(5)* %17, align 4, !tbaa !47
  %52 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 1
  %53 = load i32, i32 addrspace(3)* %52, align 4, !tbaa !39
  %54 = add nsw i32 %53, -1
  %55 = sdiv i32 %54, 2
  %56 = icmp sgt i32 %53, 2
  br i1 %56, label %57, label %314

57:                                               ; preds = %35
  %58 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 2
  %59 = icmp sgt i32 %55, 1
  %60 = select i1 %59, i32 %55, i32 1
  %61 = add nsw i32 %60, -1
  %62 = and i32 %60, 3
  %63 = icmp ult i32 %61, 3
  br i1 %63, label %151, label %64

64:                                               ; preds = %57
  %65 = and i32 %60, 2147483644
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i32 [ 0, %64 ], [ %148, %66 ]
  %68 = phi i32 [ %65, %64 ], [ %149, %66 ]
  %69 = shl nuw nsw i32 %67, 1
  %70 = or i32 %69, 1
  %71 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %72 = add nuw nsw i32 %70, 1
  %73 = mul nsw i32 %71, %72
  %74 = add nsw i32 %73, %9
  %75 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %74
  %76 = load i32, i32 addrspace(3)* %75, align 4, !tbaa !4
  %77 = mul nsw i32 %71, %69
  %78 = add nsw i32 %77, %9
  %79 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %78
  %80 = load i32, i32 addrspace(3)* %79, align 4, !tbaa !4
  %81 = add nsw i32 %80, %76
  %82 = sdiv i32 %81, 2
  %83 = mul nsw i32 %71, %70
  %84 = add nsw i32 %83, %9
  %85 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %84
  %86 = load i32, i32 addrspace(3)* %85, align 4, !tbaa !4
  %87 = sub nsw i32 %86, %82
  store i32 %87, i32 addrspace(3)* %85, align 4, !tbaa !4
  %88 = shl nuw i32 %67, 1
  %89 = or i32 %88, 2
  %90 = or i32 %88, 3
  %91 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %92 = add nuw nsw i32 %90, 1
  %93 = mul nsw i32 %91, %92
  %94 = add nsw i32 %93, %9
  %95 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %94
  %96 = load i32, i32 addrspace(3)* %95, align 4, !tbaa !4
  %97 = mul nsw i32 %91, %89
  %98 = add nsw i32 %97, %9
  %99 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %98
  %100 = load i32, i32 addrspace(3)* %99, align 4, !tbaa !4
  %101 = add nsw i32 %100, %96
  %102 = sdiv i32 %101, 2
  %103 = mul nsw i32 %91, %90
  %104 = add nsw i32 %103, %9
  %105 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %104
  %106 = load i32, i32 addrspace(3)* %105, align 4, !tbaa !4
  %107 = sub nsw i32 %106, %102
  store i32 %107, i32 addrspace(3)* %105, align 4, !tbaa !4
  %108 = shl nuw i32 %67, 1
  %109 = or i32 %108, 4
  %110 = or i32 %108, 5
  %111 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %112 = add nuw nsw i32 %110, 1
  %113 = mul nsw i32 %111, %112
  %114 = add nsw i32 %113, %9
  %115 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %114
  %116 = load i32, i32 addrspace(3)* %115, align 4, !tbaa !4
  %117 = mul nsw i32 %111, %109
  %118 = add nsw i32 %117, %9
  %119 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %118
  %120 = load i32, i32 addrspace(3)* %119, align 4, !tbaa !4
  %121 = add nsw i32 %120, %116
  %122 = sdiv i32 %121, 2
  %123 = mul nsw i32 %111, %110
  %124 = add nsw i32 %123, %9
  %125 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %124
  %126 = load i32, i32 addrspace(3)* %125, align 4, !tbaa !4
  %127 = sub nsw i32 %126, %122
  store i32 %127, i32 addrspace(3)* %125, align 4, !tbaa !4
  %128 = shl nuw i32 %67, 1
  %129 = or i32 %128, 6
  %130 = or i32 %128, 7
  %131 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %132 = add nuw nsw i32 %130, 1
  %133 = mul nsw i32 %131, %132
  %134 = add nsw i32 %133, %9
  %135 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %134
  %136 = load i32, i32 addrspace(3)* %135, align 4, !tbaa !4
  %137 = mul nsw i32 %131, %129
  %138 = add nsw i32 %137, %9
  %139 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %138
  %140 = load i32, i32 addrspace(3)* %139, align 4, !tbaa !4
  %141 = add nsw i32 %140, %136
  %142 = sdiv i32 %141, 2
  %143 = mul nsw i32 %131, %130
  %144 = add nsw i32 %143, %9
  %145 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %144
  %146 = load i32, i32 addrspace(3)* %145, align 4, !tbaa !4
  %147 = sub nsw i32 %146, %142
  store i32 %147, i32 addrspace(3)* %145, align 4, !tbaa !4
  %148 = add nuw nsw i32 %67, 4
  %149 = add i32 %68, -4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %66

151:                                              ; preds = %66, %57
  %152 = phi i32 [ 0, %57 ], [ %148, %66 ]
  %153 = icmp eq i32 %62, 0
  br i1 %153, label %179, label %154

154:                                              ; preds = %151, %154
  %155 = phi i32 [ %176, %154 ], [ %152, %151 ]
  %156 = phi i32 [ %177, %154 ], [ %62, %151 ]
  %157 = shl nuw nsw i32 %155, 1
  %158 = or i32 %157, 1
  %159 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %160 = add nuw nsw i32 %158, 1
  %161 = mul nsw i32 %159, %160
  %162 = add nsw i32 %161, %9
  %163 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %162
  %164 = load i32, i32 addrspace(3)* %163, align 4, !tbaa !4
  %165 = mul nsw i32 %159, %157
  %166 = add nsw i32 %165, %9
  %167 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %166
  %168 = load i32, i32 addrspace(3)* %167, align 4, !tbaa !4
  %169 = add nsw i32 %168, %164
  %170 = sdiv i32 %169, 2
  %171 = mul nsw i32 %159, %158
  %172 = add nsw i32 %171, %9
  %173 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %172
  %174 = load i32, i32 addrspace(3)* %173, align 4, !tbaa !4
  %175 = sub nsw i32 %174, %170
  store i32 %175, i32 addrspace(3)* %173, align 4, !tbaa !4
  %176 = add nuw nsw i32 %155, 1
  %177 = add i32 %156, -1
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %154, !llvm.loop !53

179:                                              ; preds = %154, %151
  %180 = load i32, i32 addrspace(3)* %52, align 4, !tbaa !39
  %181 = icmp sgt i32 %180, 3
  br i1 %181, label %182, label %314

182:                                              ; preds = %179
  %183 = lshr i32 %180, 1
  %184 = icmp ugt i32 %183, 2
  %185 = select i1 %184, i32 %183, i32 2
  %186 = add nsw i32 %185, -1
  %187 = add nsw i32 %185, -2
  %188 = and i32 %186, 3
  %189 = icmp ult i32 %187, 3
  br i1 %189, label %284, label %190

190:                                              ; preds = %182
  %191 = and i32 %186, -4
  br label %192

192:                                              ; preds = %192, %190
  %193 = phi i32 [ 0, %190 ], [ %281, %192 ]
  %194 = phi i32 [ %191, %190 ], [ %282, %192 ]
  %195 = shl nuw nsw i32 %193, 1
  %196 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %197 = or i32 %195, 3
  %198 = mul nsw i32 %196, %197
  %199 = add nsw i32 %198, %9
  %200 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %199
  %201 = load i32, i32 addrspace(3)* %200, align 4, !tbaa !4
  %202 = or i32 %195, 2
  %203 = or i32 %195, 1
  %204 = mul nsw i32 %196, %203
  %205 = add nsw i32 %204, %9
  %206 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %205
  %207 = load i32, i32 addrspace(3)* %206, align 4, !tbaa !4
  %208 = add i32 %201, 2
  %209 = add i32 %208, %207
  %210 = sdiv i32 %209, 4
  %211 = mul nsw i32 %196, %202
  %212 = add nsw i32 %211, %9
  %213 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %212
  %214 = load i32, i32 addrspace(3)* %213, align 4, !tbaa !4
  %215 = add nsw i32 %210, %214
  store i32 %215, i32 addrspace(3)* %213, align 4, !tbaa !4
  %216 = shl nuw i32 %193, 1
  %217 = or i32 %216, 2
  %218 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %219 = add nuw nsw i32 %217, 3
  %220 = mul nsw i32 %218, %219
  %221 = add nsw i32 %220, %9
  %222 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %221
  %223 = load i32, i32 addrspace(3)* %222, align 4, !tbaa !4
  %224 = add nuw nsw i32 %217, 2
  %225 = or i32 %216, 3
  %226 = mul nsw i32 %218, %225
  %227 = add nsw i32 %226, %9
  %228 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %227
  %229 = load i32, i32 addrspace(3)* %228, align 4, !tbaa !4
  %230 = add i32 %223, 2
  %231 = add i32 %230, %229
  %232 = sdiv i32 %231, 4
  %233 = mul nsw i32 %218, %224
  %234 = add nsw i32 %233, %9
  %235 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %234
  %236 = load i32, i32 addrspace(3)* %235, align 4, !tbaa !4
  %237 = add nsw i32 %232, %236
  store i32 %237, i32 addrspace(3)* %235, align 4, !tbaa !4
  %238 = shl nuw i32 %193, 1
  %239 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %240 = or i32 %238, 7
  %241 = mul nsw i32 %239, %240
  %242 = add nsw i32 %241, %9
  %243 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %242
  %244 = load i32, i32 addrspace(3)* %243, align 4, !tbaa !4
  %245 = or i32 %238, 6
  %246 = or i32 %238, 5
  %247 = mul nsw i32 %239, %246
  %248 = add nsw i32 %247, %9
  %249 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %248
  %250 = load i32, i32 addrspace(3)* %249, align 4, !tbaa !4
  %251 = add i32 %244, 2
  %252 = add i32 %251, %250
  %253 = sdiv i32 %252, 4
  %254 = mul nsw i32 %239, %245
  %255 = add nsw i32 %254, %9
  %256 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %255
  %257 = load i32, i32 addrspace(3)* %256, align 4, !tbaa !4
  %258 = add nsw i32 %253, %257
  store i32 %258, i32 addrspace(3)* %256, align 4, !tbaa !4
  %259 = shl nuw i32 %193, 1
  %260 = or i32 %259, 6
  %261 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %262 = add nuw nsw i32 %260, 3
  %263 = mul nsw i32 %261, %262
  %264 = add nsw i32 %263, %9
  %265 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %264
  %266 = load i32, i32 addrspace(3)* %265, align 4, !tbaa !4
  %267 = add nuw nsw i32 %260, 2
  %268 = or i32 %259, 7
  %269 = mul nsw i32 %261, %268
  %270 = add nsw i32 %269, %9
  %271 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %270
  %272 = load i32, i32 addrspace(3)* %271, align 4, !tbaa !4
  %273 = add i32 %266, 2
  %274 = add i32 %273, %272
  %275 = sdiv i32 %274, 4
  %276 = mul nsw i32 %261, %267
  %277 = add nsw i32 %276, %9
  %278 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %277
  %279 = load i32, i32 addrspace(3)* %278, align 4, !tbaa !4
  %280 = add nsw i32 %275, %279
  store i32 %280, i32 addrspace(3)* %278, align 4, !tbaa !4
  %281 = add nuw nsw i32 %193, 4
  %282 = add i32 %194, -4
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %284, label %192

284:                                              ; preds = %192, %182
  %285 = phi i32 [ 0, %182 ], [ %281, %192 ]
  %286 = icmp eq i32 %188, 0
  br i1 %286, label %314, label %287

287:                                              ; preds = %284, %287
  %288 = phi i32 [ %311, %287 ], [ %285, %284 ]
  %289 = phi i32 [ %312, %287 ], [ %188, %284 ]
  %290 = shl nuw nsw i32 %288, 1
  %291 = load i32, i32 addrspace(3)* %58, align 4, !tbaa !37
  %292 = add nuw nsw i32 %290, 3
  %293 = mul nsw i32 %291, %292
  %294 = add nsw i32 %293, %9
  %295 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %294
  %296 = load i32, i32 addrspace(3)* %295, align 4, !tbaa !4
  %297 = add nuw nsw i32 %290, 2
  %298 = or i32 %290, 1
  %299 = mul nsw i32 %291, %298
  %300 = add nsw i32 %299, %9
  %301 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %300
  %302 = load i32, i32 addrspace(3)* %301, align 4, !tbaa !4
  %303 = add i32 %296, 2
  %304 = add i32 %303, %302
  %305 = sdiv i32 %304, 4
  %306 = mul nsw i32 %291, %297
  %307 = add nsw i32 %306, %9
  %308 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %307
  %309 = load i32, i32 addrspace(3)* %308, align 4, !tbaa !4
  %310 = add nsw i32 %305, %309
  store i32 %310, i32 addrspace(3)* %308, align 4, !tbaa !4
  %311 = add nuw nsw i32 %288, 1
  %312 = add i32 %289, -1
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %287, !llvm.loop !54

314:                                              ; preds = %284, %287, %35, %179
  ret void

315:                                              ; preds = %28, %327
  %316 = phi i32 [ %33, %28 ], [ %328, %327 ]
  %317 = phi i32 [ %32, %28 ], [ %329, %327 ]
  %318 = phi i32 [ 3, %28 ], [ %337, %327 ]
  %319 = add nsw i32 %317, %316
  br i1 %2, label %320, label %327

320:                                              ; preds = %315
  %321 = load i32, i32 addrspace(5)* %31, align 4, !tbaa !22
  %322 = icmp eq i32 %319, %321
  br i1 %322, label %323, label %327

323:                                              ; preds = %320
  %324 = sub nsw i32 0, %316
  %325 = shl nsw i32 %316, 1
  %326 = sub nsw i32 %319, %325
  store i32 %324, i32 addrspace(5)* %29, align 4, !tbaa !23
  br label %327

327:                                              ; preds = %315, %320, %323
  %328 = phi i32 [ %316, %315 ], [ %316, %320 ], [ %324, %323 ]
  %329 = phi i32 [ %319, %315 ], [ %319, %320 ], [ %326, %323 ]
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %330
  %332 = load i32, i32 addrspace(1)* %331, align 4, !tbaa !4
  %333 = load i32, i32 addrspace(3)* %10, align 4, !tbaa !51
  %334 = mul nsw i32 %333, %318
  %335 = add nsw i32 %334, %9
  %336 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %335
  store i32 %332, i32 addrspace(3)* %336, align 4, !tbaa !4
  %337 = add nuw nsw i32 %318, 1
  %338 = load i32, i32 addrspace(3)* %23, align 4, !tbaa !52
  %339 = add nsw i32 %338, 2
  %340 = icmp slt i32 %318, %339
  br i1 %340, label %315, label %34
}

; Function Attrs: convergent norecurse nounwind
define hidden void @transform(%struct.FDWT53 addrspace(3)* %0, i1 zeroext %1, i1 zeroext %2, i32 addrspace(1)* nocapture readonly %3, i32 addrspace(1)* nocapture %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr #8 {
  %9 = sub i32 0, %5
  %10 = zext i1 %2 to i8
  %11 = tail call i64 @_Z12get_group_idj(i32 1) #9
  %12 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 1
  %13 = load i32, i32 addrspace(3)* %12, align 4, !tbaa !52
  %14 = trunc i64 %11 to i32
  %15 = mul i32 %14, %7
  %16 = mul i32 %15, %13
  %17 = tail call i64 @_Z12get_local_idj(i32 0) #9
  %18 = trunc i64 %17 to i32
  %19 = add nsw i32 %18, 2
  %20 = sdiv i32 %19, 2
  %21 = and i32 %19, 1
  %22 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 6
  %23 = load i32, i32 addrspace(3)* %22, align 4, !tbaa !38
  %24 = mul nuw nsw i32 %21, %23
  %25 = add nsw i32 %24, %20
  %26 = tail call i64 @_Z12get_group_idj(i32 0) #9
  %27 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 0
  %28 = load i32, i32 addrspace(3)* %27, align 4, !tbaa !49
  %29 = trunc i64 %26 to i32
  %30 = mul i32 %28, %29
  %31 = add i32 %30, %18
  %32 = sub i32 0, %31
  %33 = icmp eq i64 %11, 0
  br i1 %33, label %34, label %96

34:                                               ; preds = %8
  %35 = icmp slt i32 %31, %5
  br i1 %35, label %40, label %36

36:                                               ; preds = %34
  %37 = shl i32 %5, 1
  %38 = add nsw i32 %37, -2
  %39 = sub i32 %38, %31
  br label %43

40:                                               ; preds = %34
  %41 = icmp slt i32 %31, 0
  %42 = select i1 %41, i32 %32, i32 %31
  br label %43

43:                                               ; preds = %40, %36
  %44 = phi i32 [ %39, %36 ], [ %42, %40 ]
  %45 = mul nsw i32 %6, %5
  %46 = add nsw i32 %44, %45
  %47 = select i1 %1, i32 %46, i32 0
  %48 = mul i32 %16, %5
  %49 = add nsw i32 %44, %48
  br i1 %1, label %50, label %68

50:                                               ; preds = %43
  %51 = icmp eq i32 %49, %47
  %52 = shl nsw i32 %5, 1
  %53 = select i1 %51, i32 %52, i32 0
  %54 = sub nsw i32 %49, %53
  %55 = select i1 %51, i32 %9, i32 %5
  %56 = add nsw i32 %54, %55
  %57 = icmp eq i32 %56, %47
  %58 = shl nsw i32 %55, 1
  %59 = sub nsw i32 0, %55
  %60 = select i1 %57, i32 %58, i32 0
  %61 = sub nsw i32 %56, %60
  %62 = select i1 %57, i32 %59, i32 %55
  %63 = add nsw i32 %61, %62
  %64 = icmp eq i32 %63, %47
  %65 = shl nsw i32 %62, 1
  %66 = select i1 %64, i32 %65, i32 0
  %67 = sub nsw i32 %63, %66
  br label %71

68:                                               ; preds = %43
  %69 = add nsw i32 %49, %5
  %70 = add nsw i32 %69, %5
  br label %71

71:                                               ; preds = %50, %68
  %72 = phi i32 [ %69, %68 ], [ %61, %50 ]
  %73 = phi i32 [ %49, %68 ], [ %54, %50 ]
  %74 = phi i32 [ %70, %68 ], [ %67, %50 ]
  %75 = sext i32 %73 to i64
  %76 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %75
  %77 = load i32, i32 addrspace(1)* %76, align 4, !tbaa !4
  %78 = sext i32 %72 to i64
  %79 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %78
  %80 = load i32, i32 addrspace(1)* %79, align 4, !tbaa !4
  %81 = sext i32 %74 to i64
  %82 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %81
  %83 = load i32, i32 addrspace(1)* %82, align 4, !tbaa !4
  br i1 %35, label %88, label %84

84:                                               ; preds = %71
  %85 = shl i32 %5, 1
  %86 = add nsw i32 %85, -2
  %87 = sub i32 %86, %31
  br label %91

88:                                               ; preds = %71
  %89 = icmp slt i32 %31, 0
  %90 = select i1 %89, i32 %32, i32 %31
  br label %91

91:                                               ; preds = %88, %84
  %92 = phi i32 [ %87, %84 ], [ %90, %88 ]
  %93 = add nsw i32 %92, %45
  %94 = select i1 %1, i32 %93, i32 0
  %95 = add i32 %48, %92
  br label %150

96:                                               ; preds = %8
  %97 = add nsw i32 %16, -2
  %98 = icmp slt i32 %31, %5
  br i1 %98, label %103, label %99

99:                                               ; preds = %96
  %100 = shl i32 %5, 1
  %101 = add nsw i32 %100, -2
  %102 = sub i32 %101, %31
  br label %106

103:                                              ; preds = %96
  %104 = icmp slt i32 %31, 0
  %105 = select i1 %104, i32 %32, i32 %31
  br label %106

106:                                              ; preds = %103, %99
  %107 = phi i32 [ %102, %99 ], [ %105, %103 ]
  %108 = mul nsw i32 %6, %5
  %109 = add nsw i32 %107, %108
  %110 = select i1 %1, i32 %109, i32 0
  %111 = mul nsw i32 %97, %5
  %112 = add nsw i32 %107, %111
  br i1 %1, label %113, label %133

113:                                              ; preds = %106
  %114 = icmp eq i32 %112, %110
  %115 = shl nsw i32 %5, 1
  %116 = select i1 %114, i32 %115, i32 0
  %117 = sub nsw i32 %112, %116
  %118 = select i1 %114, i32 %9, i32 %5
  %119 = add nsw i32 %117, %118
  %120 = icmp eq i32 %119, %110
  %121 = shl nsw i32 %118, 1
  %122 = sub nsw i32 0, %118
  %123 = select i1 %120, i32 %121, i32 0
  %124 = sub nsw i32 %119, %123
  %125 = select i1 %120, i32 %122, i32 %118
  %126 = add nsw i32 %124, %125
  %127 = icmp eq i32 %126, %110
  %128 = shl nsw i32 %125, 1
  %129 = sub nsw i32 0, %125
  %130 = select i1 %127, i32 %128, i32 0
  %131 = sub nsw i32 %126, %130
  %132 = select i1 %127, i32 %129, i32 %125
  br label %136

133:                                              ; preds = %106
  %134 = add nsw i32 %112, %5
  %135 = add nsw i32 %134, %5
  br label %136

136:                                              ; preds = %113, %133
  %137 = phi i32 [ %134, %133 ], [ %124, %113 ]
  %138 = phi i32 [ %112, %133 ], [ %117, %113 ]
  %139 = phi i32 [ %135, %133 ], [ %131, %113 ]
  %140 = phi i32 [ %5, %133 ], [ %132, %113 ]
  %141 = sext i32 %138 to i64
  %142 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %141
  %143 = load i32, i32 addrspace(1)* %142, align 4, !tbaa !4
  %144 = sext i32 %137 to i64
  %145 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %144
  %146 = load i32, i32 addrspace(1)* %145, align 4, !tbaa !4
  %147 = sext i32 %139 to i64
  %148 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %147
  %149 = load i32, i32 addrspace(1)* %148, align 4, !tbaa !4
  br label %150

150:                                              ; preds = %91, %136
  %151 = phi i32 [ %83, %91 ], [ %143, %136 ]
  %152 = phi i32 [ %95, %91 ], [ %139, %136 ]
  %153 = phi i32 [ %80, %91 ], [ %146, %136 ]
  %154 = phi i32 [ %77, %91 ], [ %149, %136 ]
  %155 = phi i32 [ %5, %91 ], [ %140, %136 ]
  %156 = phi i32 [ %94, %91 ], [ %110, %136 ]
  %157 = icmp ult i64 %17, 3
  br i1 %157, label %158, label %287

158:                                              ; preds = %150
  %159 = icmp eq i64 %17, 0
  %160 = zext i32 %28 to i64
  %161 = select i1 %159, i64 %160, i64 4294967293
  %162 = add nuw nsw i64 %161, %17
  %163 = trunc i64 %162 to i32
  %164 = add nsw i32 %163, 2
  %165 = sdiv i32 %164, 2
  %166 = and i32 %164, 1
  %167 = mul nuw nsw i32 %166, %23
  %168 = add nsw i32 %167, %165
  %169 = add i32 %30, %163
  %170 = sub i32 0, %169
  br i1 %33, label %171, label %233

171:                                              ; preds = %158
  %172 = icmp slt i32 %169, %5
  br i1 %172, label %177, label %173

173:                                              ; preds = %171
  %174 = shl i32 %5, 1
  %175 = add nsw i32 %174, -2
  %176 = sub i32 %175, %169
  br label %180

177:                                              ; preds = %171
  %178 = icmp slt i32 %169, 0
  %179 = select i1 %178, i32 %170, i32 %169
  br label %180

180:                                              ; preds = %177, %173
  %181 = phi i32 [ %176, %173 ], [ %179, %177 ]
  %182 = mul nsw i32 %6, %5
  %183 = add nsw i32 %181, %182
  %184 = select i1 %1, i32 %183, i32 0
  %185 = mul i32 %16, %5
  %186 = add nsw i32 %181, %185
  br i1 %1, label %187, label %205

187:                                              ; preds = %180
  %188 = icmp eq i32 %186, %184
  %189 = shl nsw i32 %5, 1
  %190 = select i1 %188, i32 %189, i32 0
  %191 = sub nsw i32 %186, %190
  %192 = select i1 %188, i32 %9, i32 %5
  %193 = add nsw i32 %191, %192
  %194 = icmp eq i32 %193, %184
  %195 = shl nsw i32 %192, 1
  %196 = sub nsw i32 0, %192
  %197 = select i1 %194, i32 %195, i32 0
  %198 = sub nsw i32 %193, %197
  %199 = select i1 %194, i32 %196, i32 %192
  %200 = add nsw i32 %198, %199
  %201 = icmp eq i32 %200, %184
  %202 = shl nsw i32 %199, 1
  %203 = select i1 %201, i32 %202, i32 0
  %204 = sub nsw i32 %200, %203
  br label %208

205:                                              ; preds = %180
  %206 = add nsw i32 %186, %5
  %207 = add nsw i32 %206, %5
  br label %208

208:                                              ; preds = %187, %205
  %209 = phi i32 [ %206, %205 ], [ %198, %187 ]
  %210 = phi i32 [ %186, %205 ], [ %191, %187 ]
  %211 = phi i32 [ %207, %205 ], [ %204, %187 ]
  %212 = sext i32 %210 to i64
  %213 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %212
  %214 = load i32, i32 addrspace(1)* %213, align 4, !tbaa !4
  %215 = sext i32 %209 to i64
  %216 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %215
  %217 = load i32, i32 addrspace(1)* %216, align 4, !tbaa !4
  %218 = sext i32 %211 to i64
  %219 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %218
  %220 = load i32, i32 addrspace(1)* %219, align 4, !tbaa !4
  br i1 %172, label %225, label %221

221:                                              ; preds = %208
  %222 = shl i32 %5, 1
  %223 = add nsw i32 %222, -2
  %224 = sub i32 %223, %169
  br label %228

225:                                              ; preds = %208
  %226 = icmp slt i32 %169, 0
  %227 = select i1 %226, i32 %170, i32 %169
  br label %228

228:                                              ; preds = %225, %221
  %229 = phi i32 [ %224, %221 ], [ %227, %225 ]
  %230 = add nsw i32 %229, %182
  %231 = select i1 %1, i32 %230, i32 0
  %232 = add i32 %185, %229
  br label %287

233:                                              ; preds = %158
  %234 = add nsw i32 %16, -2
  %235 = icmp slt i32 %169, %5
  br i1 %235, label %240, label %236

236:                                              ; preds = %233
  %237 = shl i32 %5, 1
  %238 = add nsw i32 %237, -2
  %239 = sub i32 %238, %169
  br label %243

240:                                              ; preds = %233
  %241 = icmp slt i32 %169, 0
  %242 = select i1 %241, i32 %170, i32 %169
  br label %243

243:                                              ; preds = %240, %236
  %244 = phi i32 [ %239, %236 ], [ %242, %240 ]
  %245 = mul nsw i32 %6, %5
  %246 = add nsw i32 %244, %245
  %247 = select i1 %1, i32 %246, i32 0
  %248 = mul nsw i32 %234, %5
  %249 = add nsw i32 %244, %248
  br i1 %1, label %250, label %270

250:                                              ; preds = %243
  %251 = icmp eq i32 %249, %247
  %252 = shl nsw i32 %5, 1
  %253 = select i1 %251, i32 %252, i32 0
  %254 = sub nsw i32 %249, %253
  %255 = select i1 %251, i32 %9, i32 %5
  %256 = add nsw i32 %254, %255
  %257 = icmp eq i32 %256, %247
  %258 = shl nsw i32 %255, 1
  %259 = sub nsw i32 0, %255
  %260 = select i1 %257, i32 %258, i32 0
  %261 = sub nsw i32 %256, %260
  %262 = select i1 %257, i32 %259, i32 %255
  %263 = add nsw i32 %261, %262
  %264 = icmp eq i32 %263, %247
  %265 = shl nsw i32 %262, 1
  %266 = sub nsw i32 0, %262
  %267 = select i1 %264, i32 %265, i32 0
  %268 = sub nsw i32 %263, %267
  %269 = select i1 %264, i32 %266, i32 %262
  br label %273

270:                                              ; preds = %243
  %271 = add nsw i32 %249, %5
  %272 = add nsw i32 %271, %5
  br label %273

273:                                              ; preds = %250, %270
  %274 = phi i32 [ %271, %270 ], [ %261, %250 ]
  %275 = phi i32 [ %249, %270 ], [ %254, %250 ]
  %276 = phi i32 [ %272, %270 ], [ %268, %250 ]
  %277 = phi i32 [ %5, %270 ], [ %269, %250 ]
  %278 = sext i32 %275 to i64
  %279 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %278
  %280 = load i32, i32 addrspace(1)* %279, align 4, !tbaa !4
  %281 = sext i32 %274 to i64
  %282 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %281
  %283 = load i32, i32 addrspace(1)* %282, align 4, !tbaa !4
  %284 = sext i32 %276 to i64
  %285 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %284
  %286 = load i32, i32 addrspace(1)* %285, align 4, !tbaa !4
  br label %287

287:                                              ; preds = %273, %228, %150
  %288 = phi i32 [ 0, %150 ], [ %214, %228 ], [ %286, %273 ]
  %289 = phi i32 [ 0, %150 ], [ %217, %228 ], [ %283, %273 ]
  %290 = phi i32 [ 0, %150 ], [ %220, %228 ], [ %280, %273 ]
  %291 = phi i32 [ 0, %150 ], [ %168, %228 ], [ %168, %273 ]
  %292 = phi i32 [ 0, %150 ], [ %232, %228 ], [ %276, %273 ]
  %293 = phi i32 [ 0, %150 ], [ %5, %228 ], [ %277, %273 ]
  %294 = phi i32 [ 0, %150 ], [ %231, %228 ], [ %247, %273 ]
  %295 = shl i64 %17, 1
  %296 = add nsw i32 %28, -1
  %297 = sext i32 %296 to i64
  %298 = sdiv i32 %28, 2
  %299 = sext i32 %298 to i64
  %300 = udiv i64 %17, %299
  %301 = mul i64 %300, %297
  %302 = sub i64 %295, %301
  %303 = trunc i64 %302 to i32
  %304 = add nsw i32 %303, 2
  %305 = sdiv i32 %304, 2
  %306 = and i32 %304, 1
  %307 = mul nuw nsw i32 %306, %23
  %308 = add nsw i32 %307, %305
  %309 = sext i32 %28 to i64
  %310 = mul i64 %26, %309
  %311 = add i64 %302, %310
  %312 = trunc i64 %311 to i32
  %313 = icmp slt i32 %312, %5
  br i1 %313, label %314, label %349

314:                                              ; preds = %287
  %315 = sdiv i32 %312, 2
  %316 = and i32 %312, 1
  %317 = icmp eq i32 %316, 0
  %318 = sdiv i32 %5, 2
  %319 = and i32 %5, 1
  %320 = add nsw i32 %318, %319
  %321 = sdiv i32 %6, 2
  %322 = and i32 %6, 1
  %323 = add nsw i32 %321, %322
  br i1 %317, label %329, label %324

324:                                              ; preds = %314
  %325 = mul nsw i32 %323, %320
  %326 = add nsw i32 %315, %325
  %327 = mul nsw i32 %6, %5
  %328 = sdiv i32 %327, 2
  br label %331

329:                                              ; preds = %314
  %330 = mul nsw i32 %323, %5
  br label %331

331:                                              ; preds = %329, %324
  %332 = phi i32 [ %330, %329 ], [ %328, %324 ]
  %333 = phi i32 [ %315, %329 ], [ %326, %324 ]
  %334 = phi i32 [ %320, %329 ], [ %318, %324 ]
  %335 = sub nsw i32 %334, %332
  br i1 %2, label %336, label %341

336:                                              ; preds = %331
  %337 = mul nuw nsw i32 %332, %322
  %338 = mul nsw i32 %334, %321
  %339 = add i32 %337, %333
  %340 = add i32 %339, %338
  br label %341

341:                                              ; preds = %331, %336
  %342 = phi i32 [ %340, %336 ], [ 0, %331 ]
  %343 = sdiv i32 %16, 2
  %344 = mul nsw i32 %334, %343
  %345 = and i32 %16, 1
  %346 = mul nuw nsw i32 %332, %345
  %347 = add i32 %346, %333
  %348 = add i32 %347, %344
  br label %349

349:                                              ; preds = %287, %341
  %350 = phi i32 [ %348, %341 ], [ 0, %287 ]
  %351 = phi i32 [ %332, %341 ], [ 0, %287 ]
  %352 = phi i32 [ %335, %341 ], [ 0, %287 ]
  %353 = phi i32 [ %342, %341 ], [ 0, %287 ]
  %354 = icmp sgt i32 %7, 0
  br i1 %354, label %355, label %362

355:                                              ; preds = %349
  %356 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 4
  %357 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %25
  %358 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 1
  %359 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 2
  %360 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %291
  %361 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 0
  br label %363

362:                                              ; preds = %1181, %349
  ret void

363:                                              ; preds = %1181, %355
  %364 = phi i32 [ 0, %355 ], [ %1184, %1181 ]
  %365 = phi i8 [ %10, %355 ], [ %1183, %1181 ]
  %366 = phi i32 [ %350, %355 ], [ %1182, %1181 ]
  %367 = phi i32 [ %293, %355 ], [ %1016, %1181 ]
  %368 = phi i32 [ %292, %355 ], [ %1015, %1181 ]
  %369 = phi i32 [ %290, %355 ], [ %1014, %1181 ]
  %370 = phi i32 [ %289, %355 ], [ %1013, %1181 ]
  %371 = phi i32 [ %288, %355 ], [ %1012, %1181 ]
  %372 = phi i32 [ %155, %355 ], [ %391, %1181 ]
  %373 = phi i32 [ %154, %355 ], [ %406, %1181 ]
  %374 = phi i32 [ %153, %355 ], [ %402, %1181 ]
  %375 = phi i32 [ %152, %355 ], [ %390, %1181 ]
  %376 = phi i32 [ %151, %355 ], [ %397, %1181 ]
  store i32 %376, i32 addrspace(3)* %357, align 4, !tbaa !4
  %377 = load i32, i32 addrspace(3)* %356, align 4, !tbaa !51
  %378 = add nsw i32 %377, %25
  %379 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %378
  store i32 %374, i32 addrspace(3)* %379, align 4, !tbaa !4
  %380 = load i32, i32 addrspace(3)* %356, align 4, !tbaa !51
  %381 = shl i32 %380, 1
  %382 = add nsw i32 %381, %25
  %383 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %382
  store i32 %373, i32 addrspace(3)* %383, align 4, !tbaa !4
  %384 = load i32, i32 addrspace(3)* %12, align 4, !tbaa !52
  %385 = icmp sgt i32 %384, 0
  br i1 %385, label %637, label %386

386:                                              ; preds = %363
  %387 = add nsw i32 %384, 2
  br label %388

388:                                              ; preds = %649, %386
  %389 = phi i32 [ %387, %386 ], [ %661, %649 ]
  %390 = phi i32 [ %375, %386 ], [ %650, %649 ]
  %391 = phi i32 [ %372, %386 ], [ %651, %649 ]
  %392 = phi i32 [ %384, %386 ], [ %660, %649 ]
  %393 = load i32, i32 addrspace(3)* %356, align 4, !tbaa !51
  %394 = mul nsw i32 %393, %392
  %395 = add nsw i32 %394, %25
  %396 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %395
  %397 = load i32, i32 addrspace(3)* %396, align 4, !tbaa !4
  %398 = add nsw i32 %392, 1
  %399 = mul nsw i32 %393, %398
  %400 = add nsw i32 %399, %25
  %401 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %400
  %402 = load i32, i32 addrspace(3)* %401, align 4, !tbaa !4
  %403 = mul nsw i32 %393, %389
  %404 = add nsw i32 %403, %25
  %405 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %404
  %406 = load i32, i32 addrspace(3)* %405, align 4, !tbaa !4
  %407 = load i32, i32 addrspace(3)* %358, align 4, !tbaa !39
  %408 = add nsw i32 %407, -1
  %409 = sdiv i32 %408, 2
  %410 = icmp sgt i32 %407, 2
  br i1 %410, label %411, label %693

411:                                              ; preds = %388
  %412 = icmp sgt i32 %409, 1
  %413 = select i1 %412, i32 %409, i32 1
  %414 = add nsw i32 %413, -1
  %415 = and i32 %413, 3
  %416 = icmp ult i32 %414, 3
  br i1 %416, label %504, label %417

417:                                              ; preds = %411
  %418 = and i32 %413, 2147483644
  br label %419

419:                                              ; preds = %419, %417
  %420 = phi i32 [ 0, %417 ], [ %501, %419 ]
  %421 = phi i32 [ %418, %417 ], [ %502, %419 ]
  %422 = shl nuw nsw i32 %420, 1
  %423 = or i32 %422, 1
  %424 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %425 = add nuw nsw i32 %423, 1
  %426 = mul nsw i32 %424, %425
  %427 = add nsw i32 %426, %25
  %428 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %427
  %429 = load i32, i32 addrspace(3)* %428, align 4, !tbaa !4
  %430 = mul nsw i32 %424, %422
  %431 = add nsw i32 %430, %25
  %432 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %431
  %433 = load i32, i32 addrspace(3)* %432, align 4, !tbaa !4
  %434 = add nsw i32 %433, %429
  %435 = sdiv i32 %434, 2
  %436 = mul nsw i32 %424, %423
  %437 = add nsw i32 %436, %25
  %438 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %437
  %439 = load i32, i32 addrspace(3)* %438, align 4, !tbaa !4
  %440 = sub nsw i32 %439, %435
  store i32 %440, i32 addrspace(3)* %438, align 4, !tbaa !4
  %441 = shl nuw i32 %420, 1
  %442 = or i32 %441, 2
  %443 = or i32 %441, 3
  %444 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %445 = add nuw nsw i32 %443, 1
  %446 = mul nsw i32 %444, %445
  %447 = add nsw i32 %446, %25
  %448 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %447
  %449 = load i32, i32 addrspace(3)* %448, align 4, !tbaa !4
  %450 = mul nsw i32 %444, %442
  %451 = add nsw i32 %450, %25
  %452 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %451
  %453 = load i32, i32 addrspace(3)* %452, align 4, !tbaa !4
  %454 = add nsw i32 %453, %449
  %455 = sdiv i32 %454, 2
  %456 = mul nsw i32 %444, %443
  %457 = add nsw i32 %456, %25
  %458 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %457
  %459 = load i32, i32 addrspace(3)* %458, align 4, !tbaa !4
  %460 = sub nsw i32 %459, %455
  store i32 %460, i32 addrspace(3)* %458, align 4, !tbaa !4
  %461 = shl nuw i32 %420, 1
  %462 = or i32 %461, 4
  %463 = or i32 %461, 5
  %464 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %465 = add nuw nsw i32 %463, 1
  %466 = mul nsw i32 %464, %465
  %467 = add nsw i32 %466, %25
  %468 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %467
  %469 = load i32, i32 addrspace(3)* %468, align 4, !tbaa !4
  %470 = mul nsw i32 %464, %462
  %471 = add nsw i32 %470, %25
  %472 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %471
  %473 = load i32, i32 addrspace(3)* %472, align 4, !tbaa !4
  %474 = add nsw i32 %473, %469
  %475 = sdiv i32 %474, 2
  %476 = mul nsw i32 %464, %463
  %477 = add nsw i32 %476, %25
  %478 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %477
  %479 = load i32, i32 addrspace(3)* %478, align 4, !tbaa !4
  %480 = sub nsw i32 %479, %475
  store i32 %480, i32 addrspace(3)* %478, align 4, !tbaa !4
  %481 = shl nuw i32 %420, 1
  %482 = or i32 %481, 6
  %483 = or i32 %481, 7
  %484 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %485 = add nuw nsw i32 %483, 1
  %486 = mul nsw i32 %484, %485
  %487 = add nsw i32 %486, %25
  %488 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %487
  %489 = load i32, i32 addrspace(3)* %488, align 4, !tbaa !4
  %490 = mul nsw i32 %484, %482
  %491 = add nsw i32 %490, %25
  %492 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %491
  %493 = load i32, i32 addrspace(3)* %492, align 4, !tbaa !4
  %494 = add nsw i32 %493, %489
  %495 = sdiv i32 %494, 2
  %496 = mul nsw i32 %484, %483
  %497 = add nsw i32 %496, %25
  %498 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %497
  %499 = load i32, i32 addrspace(3)* %498, align 4, !tbaa !4
  %500 = sub nsw i32 %499, %495
  store i32 %500, i32 addrspace(3)* %498, align 4, !tbaa !4
  %501 = add nuw nsw i32 %420, 4
  %502 = add i32 %421, -4
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %419

504:                                              ; preds = %419, %411
  %505 = phi i32 [ 0, %411 ], [ %501, %419 ]
  %506 = icmp eq i32 %415, 0
  br i1 %506, label %532, label %507

507:                                              ; preds = %504, %507
  %508 = phi i32 [ %529, %507 ], [ %505, %504 ]
  %509 = phi i32 [ %530, %507 ], [ %415, %504 ]
  %510 = shl nuw nsw i32 %508, 1
  %511 = or i32 %510, 1
  %512 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %513 = add nuw nsw i32 %511, 1
  %514 = mul nsw i32 %512, %513
  %515 = add nsw i32 %514, %25
  %516 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %515
  %517 = load i32, i32 addrspace(3)* %516, align 4, !tbaa !4
  %518 = mul nsw i32 %512, %510
  %519 = add nsw i32 %518, %25
  %520 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %519
  %521 = load i32, i32 addrspace(3)* %520, align 4, !tbaa !4
  %522 = add nsw i32 %521, %517
  %523 = sdiv i32 %522, 2
  %524 = mul nsw i32 %512, %511
  %525 = add nsw i32 %524, %25
  %526 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %525
  %527 = load i32, i32 addrspace(3)* %526, align 4, !tbaa !4
  %528 = sub nsw i32 %527, %523
  store i32 %528, i32 addrspace(3)* %526, align 4, !tbaa !4
  %529 = add nuw nsw i32 %508, 1
  %530 = add i32 %509, -1
  %531 = icmp eq i32 %530, 0
  br i1 %531, label %532, label %507, !llvm.loop !55

532:                                              ; preds = %507, %504
  %533 = load i32, i32 addrspace(3)* %358, align 4, !tbaa !39
  %534 = icmp sgt i32 %533, 3
  br i1 %534, label %535, label %693

535:                                              ; preds = %532
  %536 = lshr i32 %533, 1
  %537 = icmp ugt i32 %536, 2
  %538 = select i1 %537, i32 %536, i32 2
  %539 = add nsw i32 %538, -1
  %540 = add nsw i32 %538, -2
  %541 = and i32 %539, 3
  %542 = icmp ult i32 %540, 3
  br i1 %542, label %663, label %543

543:                                              ; preds = %535
  %544 = and i32 %539, -4
  br label %545

545:                                              ; preds = %545, %543
  %546 = phi i32 [ 0, %543 ], [ %634, %545 ]
  %547 = phi i32 [ %544, %543 ], [ %635, %545 ]
  %548 = shl nuw nsw i32 %546, 1
  %549 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %550 = or i32 %548, 3
  %551 = mul nsw i32 %549, %550
  %552 = add nsw i32 %551, %25
  %553 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %552
  %554 = load i32, i32 addrspace(3)* %553, align 4, !tbaa !4
  %555 = or i32 %548, 2
  %556 = or i32 %548, 1
  %557 = mul nsw i32 %549, %556
  %558 = add nsw i32 %557, %25
  %559 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %558
  %560 = load i32, i32 addrspace(3)* %559, align 4, !tbaa !4
  %561 = add i32 %554, 2
  %562 = add i32 %561, %560
  %563 = sdiv i32 %562, 4
  %564 = mul nsw i32 %549, %555
  %565 = add nsw i32 %564, %25
  %566 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %565
  %567 = load i32, i32 addrspace(3)* %566, align 4, !tbaa !4
  %568 = add nsw i32 %563, %567
  store i32 %568, i32 addrspace(3)* %566, align 4, !tbaa !4
  %569 = shl nuw i32 %546, 1
  %570 = or i32 %569, 2
  %571 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %572 = add nuw nsw i32 %570, 3
  %573 = mul nsw i32 %571, %572
  %574 = add nsw i32 %573, %25
  %575 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %574
  %576 = load i32, i32 addrspace(3)* %575, align 4, !tbaa !4
  %577 = add nuw nsw i32 %570, 2
  %578 = or i32 %569, 3
  %579 = mul nsw i32 %571, %578
  %580 = add nsw i32 %579, %25
  %581 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %580
  %582 = load i32, i32 addrspace(3)* %581, align 4, !tbaa !4
  %583 = add i32 %576, 2
  %584 = add i32 %583, %582
  %585 = sdiv i32 %584, 4
  %586 = mul nsw i32 %571, %577
  %587 = add nsw i32 %586, %25
  %588 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %587
  %589 = load i32, i32 addrspace(3)* %588, align 4, !tbaa !4
  %590 = add nsw i32 %585, %589
  store i32 %590, i32 addrspace(3)* %588, align 4, !tbaa !4
  %591 = shl nuw i32 %546, 1
  %592 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %593 = or i32 %591, 7
  %594 = mul nsw i32 %592, %593
  %595 = add nsw i32 %594, %25
  %596 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %595
  %597 = load i32, i32 addrspace(3)* %596, align 4, !tbaa !4
  %598 = or i32 %591, 6
  %599 = or i32 %591, 5
  %600 = mul nsw i32 %592, %599
  %601 = add nsw i32 %600, %25
  %602 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %601
  %603 = load i32, i32 addrspace(3)* %602, align 4, !tbaa !4
  %604 = add i32 %597, 2
  %605 = add i32 %604, %603
  %606 = sdiv i32 %605, 4
  %607 = mul nsw i32 %592, %598
  %608 = add nsw i32 %607, %25
  %609 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %608
  %610 = load i32, i32 addrspace(3)* %609, align 4, !tbaa !4
  %611 = add nsw i32 %606, %610
  store i32 %611, i32 addrspace(3)* %609, align 4, !tbaa !4
  %612 = shl nuw i32 %546, 1
  %613 = or i32 %612, 6
  %614 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %615 = add nuw nsw i32 %613, 3
  %616 = mul nsw i32 %614, %615
  %617 = add nsw i32 %616, %25
  %618 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %617
  %619 = load i32, i32 addrspace(3)* %618, align 4, !tbaa !4
  %620 = add nuw nsw i32 %613, 2
  %621 = or i32 %612, 7
  %622 = mul nsw i32 %614, %621
  %623 = add nsw i32 %622, %25
  %624 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %623
  %625 = load i32, i32 addrspace(3)* %624, align 4, !tbaa !4
  %626 = add i32 %619, 2
  %627 = add i32 %626, %625
  %628 = sdiv i32 %627, 4
  %629 = mul nsw i32 %614, %620
  %630 = add nsw i32 %629, %25
  %631 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %630
  %632 = load i32, i32 addrspace(3)* %631, align 4, !tbaa !4
  %633 = add nsw i32 %628, %632
  store i32 %633, i32 addrspace(3)* %631, align 4, !tbaa !4
  %634 = add nuw nsw i32 %546, 4
  %635 = add i32 %547, -4
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %663, label %545

637:                                              ; preds = %363, %649
  %638 = phi i32 [ %659, %649 ], [ 3, %363 ]
  %639 = phi i32 [ %651, %649 ], [ %372, %363 ]
  %640 = phi i32 [ %650, %649 ], [ %375, %363 ]
  %641 = add nsw i32 %639, %640
  br i1 %1, label %642, label %649

642:                                              ; preds = %637
  %643 = icmp eq i32 %641, %156
  %644 = shl nsw i32 %639, 1
  %645 = sub nsw i32 0, %639
  %646 = select i1 %643, i32 %644, i32 0
  %647 = sub nsw i32 %641, %646
  %648 = select i1 %643, i32 %645, i32 %639
  br label %649

649:                                              ; preds = %637, %642
  %650 = phi i32 [ %641, %637 ], [ %647, %642 ]
  %651 = phi i32 [ %639, %637 ], [ %648, %642 ]
  %652 = sext i32 %650 to i64
  %653 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %652
  %654 = load i32, i32 addrspace(1)* %653, align 4, !tbaa !4
  %655 = load i32, i32 addrspace(3)* %356, align 4, !tbaa !51
  %656 = mul nsw i32 %655, %638
  %657 = add nsw i32 %656, %25
  %658 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %657
  store i32 %654, i32 addrspace(3)* %658, align 4, !tbaa !4
  %659 = add nuw nsw i32 %638, 1
  %660 = load i32, i32 addrspace(3)* %12, align 4, !tbaa !52
  %661 = add nsw i32 %660, 2
  %662 = icmp slt i32 %638, %661
  br i1 %662, label %637, label %388

663:                                              ; preds = %545, %535
  %664 = phi i32 [ 0, %535 ], [ %634, %545 ]
  %665 = icmp eq i32 %541, 0
  br i1 %665, label %693, label %666

666:                                              ; preds = %663, %666
  %667 = phi i32 [ %690, %666 ], [ %664, %663 ]
  %668 = phi i32 [ %691, %666 ], [ %541, %663 ]
  %669 = shl nuw nsw i32 %667, 1
  %670 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %671 = add nuw nsw i32 %669, 3
  %672 = mul nsw i32 %670, %671
  %673 = add nsw i32 %672, %25
  %674 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %673
  %675 = load i32, i32 addrspace(3)* %674, align 4, !tbaa !4
  %676 = add nuw nsw i32 %669, 2
  %677 = or i32 %669, 1
  %678 = mul nsw i32 %670, %677
  %679 = add nsw i32 %678, %25
  %680 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %679
  %681 = load i32, i32 addrspace(3)* %680, align 4, !tbaa !4
  %682 = add i32 %675, 2
  %683 = add i32 %682, %681
  %684 = sdiv i32 %683, 4
  %685 = mul nsw i32 %670, %676
  %686 = add nsw i32 %685, %25
  %687 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %686
  %688 = load i32, i32 addrspace(3)* %687, align 4, !tbaa !4
  %689 = add nsw i32 %684, %688
  store i32 %689, i32 addrspace(3)* %687, align 4, !tbaa !4
  %690 = add nuw nsw i32 %667, 1
  %691 = add i32 %668, -1
  %692 = icmp eq i32 %691, 0
  br i1 %692, label %693, label %666, !llvm.loop !56

693:                                              ; preds = %663, %666, %388, %532
  br i1 %157, label %694, label %1011

694:                                              ; preds = %693
  store i32 %369, i32 addrspace(3)* %360, align 4, !tbaa !4
  %695 = load i32, i32 addrspace(3)* %356, align 4, !tbaa !51
  %696 = add nsw i32 %695, %291
  %697 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %696
  store i32 %370, i32 addrspace(3)* %697, align 4, !tbaa !4
  %698 = load i32, i32 addrspace(3)* %356, align 4, !tbaa !51
  %699 = shl i32 %698, 1
  %700 = add nsw i32 %699, %291
  %701 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %700
  store i32 %371, i32 addrspace(3)* %701, align 4, !tbaa !4
  %702 = load i32, i32 addrspace(3)* %12, align 4, !tbaa !52
  %703 = icmp sgt i32 %702, 0
  br i1 %703, label %955, label %704

704:                                              ; preds = %694
  %705 = add nsw i32 %702, 2
  br label %706

706:                                              ; preds = %967, %704
  %707 = phi i32 [ %705, %704 ], [ %979, %967 ]
  %708 = phi i32 [ %368, %704 ], [ %968, %967 ]
  %709 = phi i32 [ %367, %704 ], [ %969, %967 ]
  %710 = phi i32 [ %702, %704 ], [ %978, %967 ]
  %711 = load i32, i32 addrspace(3)* %356, align 4, !tbaa !51
  %712 = mul nsw i32 %711, %710
  %713 = add nsw i32 %712, %291
  %714 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %713
  %715 = load i32, i32 addrspace(3)* %714, align 4, !tbaa !4
  %716 = add nsw i32 %710, 1
  %717 = mul nsw i32 %711, %716
  %718 = add nsw i32 %717, %291
  %719 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %718
  %720 = load i32, i32 addrspace(3)* %719, align 4, !tbaa !4
  %721 = mul nsw i32 %711, %707
  %722 = add nsw i32 %721, %291
  %723 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %722
  %724 = load i32, i32 addrspace(3)* %723, align 4, !tbaa !4
  %725 = load i32, i32 addrspace(3)* %358, align 4, !tbaa !39
  %726 = add nsw i32 %725, -1
  %727 = sdiv i32 %726, 2
  %728 = icmp sgt i32 %725, 2
  br i1 %728, label %729, label %1011

729:                                              ; preds = %706
  %730 = icmp sgt i32 %727, 1
  %731 = select i1 %730, i32 %727, i32 1
  %732 = add nsw i32 %731, -1
  %733 = and i32 %731, 3
  %734 = icmp ult i32 %732, 3
  br i1 %734, label %822, label %735

735:                                              ; preds = %729
  %736 = and i32 %731, 2147483644
  br label %737

737:                                              ; preds = %737, %735
  %738 = phi i32 [ 0, %735 ], [ %819, %737 ]
  %739 = phi i32 [ %736, %735 ], [ %820, %737 ]
  %740 = shl nuw nsw i32 %738, 1
  %741 = or i32 %740, 1
  %742 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %743 = add nuw nsw i32 %741, 1
  %744 = mul nsw i32 %742, %743
  %745 = add nsw i32 %744, %291
  %746 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %745
  %747 = load i32, i32 addrspace(3)* %746, align 4, !tbaa !4
  %748 = mul nsw i32 %742, %740
  %749 = add nsw i32 %748, %291
  %750 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %749
  %751 = load i32, i32 addrspace(3)* %750, align 4, !tbaa !4
  %752 = add nsw i32 %751, %747
  %753 = sdiv i32 %752, 2
  %754 = mul nsw i32 %742, %741
  %755 = add nsw i32 %754, %291
  %756 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %755
  %757 = load i32, i32 addrspace(3)* %756, align 4, !tbaa !4
  %758 = sub nsw i32 %757, %753
  store i32 %758, i32 addrspace(3)* %756, align 4, !tbaa !4
  %759 = shl nuw i32 %738, 1
  %760 = or i32 %759, 2
  %761 = or i32 %759, 3
  %762 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %763 = add nuw nsw i32 %761, 1
  %764 = mul nsw i32 %762, %763
  %765 = add nsw i32 %764, %291
  %766 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %765
  %767 = load i32, i32 addrspace(3)* %766, align 4, !tbaa !4
  %768 = mul nsw i32 %762, %760
  %769 = add nsw i32 %768, %291
  %770 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %769
  %771 = load i32, i32 addrspace(3)* %770, align 4, !tbaa !4
  %772 = add nsw i32 %771, %767
  %773 = sdiv i32 %772, 2
  %774 = mul nsw i32 %762, %761
  %775 = add nsw i32 %774, %291
  %776 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %775
  %777 = load i32, i32 addrspace(3)* %776, align 4, !tbaa !4
  %778 = sub nsw i32 %777, %773
  store i32 %778, i32 addrspace(3)* %776, align 4, !tbaa !4
  %779 = shl nuw i32 %738, 1
  %780 = or i32 %779, 4
  %781 = or i32 %779, 5
  %782 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %783 = add nuw nsw i32 %781, 1
  %784 = mul nsw i32 %782, %783
  %785 = add nsw i32 %784, %291
  %786 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %785
  %787 = load i32, i32 addrspace(3)* %786, align 4, !tbaa !4
  %788 = mul nsw i32 %782, %780
  %789 = add nsw i32 %788, %291
  %790 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %789
  %791 = load i32, i32 addrspace(3)* %790, align 4, !tbaa !4
  %792 = add nsw i32 %791, %787
  %793 = sdiv i32 %792, 2
  %794 = mul nsw i32 %782, %781
  %795 = add nsw i32 %794, %291
  %796 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %795
  %797 = load i32, i32 addrspace(3)* %796, align 4, !tbaa !4
  %798 = sub nsw i32 %797, %793
  store i32 %798, i32 addrspace(3)* %796, align 4, !tbaa !4
  %799 = shl nuw i32 %738, 1
  %800 = or i32 %799, 6
  %801 = or i32 %799, 7
  %802 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %803 = add nuw nsw i32 %801, 1
  %804 = mul nsw i32 %802, %803
  %805 = add nsw i32 %804, %291
  %806 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %805
  %807 = load i32, i32 addrspace(3)* %806, align 4, !tbaa !4
  %808 = mul nsw i32 %802, %800
  %809 = add nsw i32 %808, %291
  %810 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %809
  %811 = load i32, i32 addrspace(3)* %810, align 4, !tbaa !4
  %812 = add nsw i32 %811, %807
  %813 = sdiv i32 %812, 2
  %814 = mul nsw i32 %802, %801
  %815 = add nsw i32 %814, %291
  %816 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %815
  %817 = load i32, i32 addrspace(3)* %816, align 4, !tbaa !4
  %818 = sub nsw i32 %817, %813
  store i32 %818, i32 addrspace(3)* %816, align 4, !tbaa !4
  %819 = add nuw nsw i32 %738, 4
  %820 = add i32 %739, -4
  %821 = icmp eq i32 %820, 0
  br i1 %821, label %822, label %737

822:                                              ; preds = %737, %729
  %823 = phi i32 [ 0, %729 ], [ %819, %737 ]
  %824 = icmp eq i32 %733, 0
  br i1 %824, label %850, label %825

825:                                              ; preds = %822, %825
  %826 = phi i32 [ %847, %825 ], [ %823, %822 ]
  %827 = phi i32 [ %848, %825 ], [ %733, %822 ]
  %828 = shl nuw nsw i32 %826, 1
  %829 = or i32 %828, 1
  %830 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %831 = add nuw nsw i32 %829, 1
  %832 = mul nsw i32 %830, %831
  %833 = add nsw i32 %832, %291
  %834 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %833
  %835 = load i32, i32 addrspace(3)* %834, align 4, !tbaa !4
  %836 = mul nsw i32 %830, %828
  %837 = add nsw i32 %836, %291
  %838 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %837
  %839 = load i32, i32 addrspace(3)* %838, align 4, !tbaa !4
  %840 = add nsw i32 %839, %835
  %841 = sdiv i32 %840, 2
  %842 = mul nsw i32 %830, %829
  %843 = add nsw i32 %842, %291
  %844 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %843
  %845 = load i32, i32 addrspace(3)* %844, align 4, !tbaa !4
  %846 = sub nsw i32 %845, %841
  store i32 %846, i32 addrspace(3)* %844, align 4, !tbaa !4
  %847 = add nuw nsw i32 %826, 1
  %848 = add i32 %827, -1
  %849 = icmp eq i32 %848, 0
  br i1 %849, label %850, label %825, !llvm.loop !57

850:                                              ; preds = %825, %822
  %851 = load i32, i32 addrspace(3)* %358, align 4, !tbaa !39
  %852 = icmp sgt i32 %851, 3
  br i1 %852, label %853, label %1011

853:                                              ; preds = %850
  %854 = lshr i32 %851, 1
  %855 = icmp ugt i32 %854, 2
  %856 = select i1 %855, i32 %854, i32 2
  %857 = add nsw i32 %856, -1
  %858 = add nsw i32 %856, -2
  %859 = and i32 %857, 3
  %860 = icmp ult i32 %858, 3
  br i1 %860, label %981, label %861

861:                                              ; preds = %853
  %862 = and i32 %857, -4
  br label %863

863:                                              ; preds = %863, %861
  %864 = phi i32 [ 0, %861 ], [ %952, %863 ]
  %865 = phi i32 [ %862, %861 ], [ %953, %863 ]
  %866 = shl nuw nsw i32 %864, 1
  %867 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %868 = or i32 %866, 3
  %869 = mul nsw i32 %867, %868
  %870 = add nsw i32 %869, %291
  %871 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %870
  %872 = load i32, i32 addrspace(3)* %871, align 4, !tbaa !4
  %873 = or i32 %866, 2
  %874 = or i32 %866, 1
  %875 = mul nsw i32 %867, %874
  %876 = add nsw i32 %875, %291
  %877 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %876
  %878 = load i32, i32 addrspace(3)* %877, align 4, !tbaa !4
  %879 = add i32 %872, 2
  %880 = add i32 %879, %878
  %881 = sdiv i32 %880, 4
  %882 = mul nsw i32 %867, %873
  %883 = add nsw i32 %882, %291
  %884 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %883
  %885 = load i32, i32 addrspace(3)* %884, align 4, !tbaa !4
  %886 = add nsw i32 %881, %885
  store i32 %886, i32 addrspace(3)* %884, align 4, !tbaa !4
  %887 = shl nuw i32 %864, 1
  %888 = or i32 %887, 2
  %889 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %890 = add nuw nsw i32 %888, 3
  %891 = mul nsw i32 %889, %890
  %892 = add nsw i32 %891, %291
  %893 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %892
  %894 = load i32, i32 addrspace(3)* %893, align 4, !tbaa !4
  %895 = add nuw nsw i32 %888, 2
  %896 = or i32 %887, 3
  %897 = mul nsw i32 %889, %896
  %898 = add nsw i32 %897, %291
  %899 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %898
  %900 = load i32, i32 addrspace(3)* %899, align 4, !tbaa !4
  %901 = add i32 %894, 2
  %902 = add i32 %901, %900
  %903 = sdiv i32 %902, 4
  %904 = mul nsw i32 %889, %895
  %905 = add nsw i32 %904, %291
  %906 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %905
  %907 = load i32, i32 addrspace(3)* %906, align 4, !tbaa !4
  %908 = add nsw i32 %903, %907
  store i32 %908, i32 addrspace(3)* %906, align 4, !tbaa !4
  %909 = shl nuw i32 %864, 1
  %910 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %911 = or i32 %909, 7
  %912 = mul nsw i32 %910, %911
  %913 = add nsw i32 %912, %291
  %914 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %913
  %915 = load i32, i32 addrspace(3)* %914, align 4, !tbaa !4
  %916 = or i32 %909, 6
  %917 = or i32 %909, 5
  %918 = mul nsw i32 %910, %917
  %919 = add nsw i32 %918, %291
  %920 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %919
  %921 = load i32, i32 addrspace(3)* %920, align 4, !tbaa !4
  %922 = add i32 %915, 2
  %923 = add i32 %922, %921
  %924 = sdiv i32 %923, 4
  %925 = mul nsw i32 %910, %916
  %926 = add nsw i32 %925, %291
  %927 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %926
  %928 = load i32, i32 addrspace(3)* %927, align 4, !tbaa !4
  %929 = add nsw i32 %924, %928
  store i32 %929, i32 addrspace(3)* %927, align 4, !tbaa !4
  %930 = shl nuw i32 %864, 1
  %931 = or i32 %930, 6
  %932 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %933 = add nuw nsw i32 %931, 3
  %934 = mul nsw i32 %932, %933
  %935 = add nsw i32 %934, %291
  %936 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %935
  %937 = load i32, i32 addrspace(3)* %936, align 4, !tbaa !4
  %938 = add nuw nsw i32 %931, 2
  %939 = or i32 %930, 7
  %940 = mul nsw i32 %932, %939
  %941 = add nsw i32 %940, %291
  %942 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %941
  %943 = load i32, i32 addrspace(3)* %942, align 4, !tbaa !4
  %944 = add i32 %937, 2
  %945 = add i32 %944, %943
  %946 = sdiv i32 %945, 4
  %947 = mul nsw i32 %932, %938
  %948 = add nsw i32 %947, %291
  %949 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %948
  %950 = load i32, i32 addrspace(3)* %949, align 4, !tbaa !4
  %951 = add nsw i32 %946, %950
  store i32 %951, i32 addrspace(3)* %949, align 4, !tbaa !4
  %952 = add nuw nsw i32 %864, 4
  %953 = add i32 %865, -4
  %954 = icmp eq i32 %953, 0
  br i1 %954, label %981, label %863

955:                                              ; preds = %694, %967
  %956 = phi i32 [ %977, %967 ], [ 3, %694 ]
  %957 = phi i32 [ %969, %967 ], [ %367, %694 ]
  %958 = phi i32 [ %968, %967 ], [ %368, %694 ]
  %959 = add nsw i32 %957, %958
  br i1 %1, label %960, label %967

960:                                              ; preds = %955
  %961 = icmp eq i32 %959, %294
  %962 = shl nsw i32 %957, 1
  %963 = sub nsw i32 0, %957
  %964 = select i1 %961, i32 %962, i32 0
  %965 = sub nsw i32 %959, %964
  %966 = select i1 %961, i32 %963, i32 %957
  br label %967

967:                                              ; preds = %955, %960
  %968 = phi i32 [ %959, %955 ], [ %965, %960 ]
  %969 = phi i32 [ %957, %955 ], [ %966, %960 ]
  %970 = sext i32 %968 to i64
  %971 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %970
  %972 = load i32, i32 addrspace(1)* %971, align 4, !tbaa !4
  %973 = load i32, i32 addrspace(3)* %356, align 4, !tbaa !51
  %974 = mul nsw i32 %973, %956
  %975 = add nsw i32 %974, %291
  %976 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %975
  store i32 %972, i32 addrspace(3)* %976, align 4, !tbaa !4
  %977 = add nuw nsw i32 %956, 1
  %978 = load i32, i32 addrspace(3)* %12, align 4, !tbaa !52
  %979 = add nsw i32 %978, 2
  %980 = icmp slt i32 %956, %979
  br i1 %980, label %955, label %706

981:                                              ; preds = %863, %853
  %982 = phi i32 [ 0, %853 ], [ %952, %863 ]
  %983 = icmp eq i32 %859, 0
  br i1 %983, label %1011, label %984

984:                                              ; preds = %981, %984
  %985 = phi i32 [ %1008, %984 ], [ %982, %981 ]
  %986 = phi i32 [ %1009, %984 ], [ %859, %981 ]
  %987 = shl nuw nsw i32 %985, 1
  %988 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %989 = add nuw nsw i32 %987, 3
  %990 = mul nsw i32 %988, %989
  %991 = add nsw i32 %990, %291
  %992 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %991
  %993 = load i32, i32 addrspace(3)* %992, align 4, !tbaa !4
  %994 = add nuw nsw i32 %987, 2
  %995 = or i32 %987, 1
  %996 = mul nsw i32 %988, %995
  %997 = add nsw i32 %996, %291
  %998 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %997
  %999 = load i32, i32 addrspace(3)* %998, align 4, !tbaa !4
  %1000 = add i32 %993, 2
  %1001 = add i32 %1000, %999
  %1002 = sdiv i32 %1001, 4
  %1003 = mul nsw i32 %988, %994
  %1004 = add nsw i32 %1003, %291
  %1005 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1004
  %1006 = load i32, i32 addrspace(3)* %1005, align 4, !tbaa !4
  %1007 = add nsw i32 %1002, %1006
  store i32 %1007, i32 addrspace(3)* %1005, align 4, !tbaa !4
  %1008 = add nuw nsw i32 %985, 1
  %1009 = add i32 %986, -1
  %1010 = icmp eq i32 %1009, 0
  br i1 %1010, label %1011, label %984, !llvm.loop !58

1011:                                             ; preds = %981, %984, %706, %850, %693
  %1012 = phi i32 [ %371, %693 ], [ %724, %850 ], [ %724, %706 ], [ %724, %984 ], [ %724, %981 ]
  %1013 = phi i32 [ %370, %693 ], [ %720, %850 ], [ %720, %706 ], [ %720, %984 ], [ %720, %981 ]
  %1014 = phi i32 [ %369, %693 ], [ %715, %850 ], [ %715, %706 ], [ %715, %984 ], [ %715, %981 ]
  %1015 = phi i32 [ %368, %693 ], [ %708, %850 ], [ %708, %706 ], [ %708, %984 ], [ %708, %981 ]
  %1016 = phi i32 [ %367, %693 ], [ %709, %850 ], [ %709, %706 ], [ %709, %984 ], [ %709, %981 ]
  tail call void @_Z7barrierj(i32 1) #10
  %1017 = load i32, i32 addrspace(3)* %12, align 4, !tbaa !52
  %1018 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %1019 = mul nsw i32 %1018, %1017
  %1020 = add nsw i32 %1019, -1
  %1021 = shl nsw i32 %1018, 1
  %1022 = load i32, i32 addrspace(3)* %22, align 4, !tbaa !38
  %1023 = add nsw i32 %1021, %1022
  %1024 = or i32 %1021, 1
  %1025 = load i32, i32 addrspace(3)* %361, align 4, !tbaa !35
  %1026 = freeze i32 %1020
  %1027 = freeze i32 %1025
  %1028 = sdiv i32 %1026, %1027
  %1029 = mul i32 %1028, %1027
  %1030 = sub i32 %1026, %1029
  %1031 = sub nsw i32 %1020, %1030
  %1032 = icmp sgt i32 %1028, 0
  br i1 %1032, label %1036, label %1033

1033:                                             ; preds = %1036, %1011
  %1034 = sext i32 %1030 to i64
  %1035 = icmp ult i64 %17, %1034
  br i1 %1035, label %1057, label %1071

1036:                                             ; preds = %1011, %1055
  %1037 = phi i32 [ %1056, %1055 ], [ %1025, %1011 ]
  %1038 = phi i32 [ %1053, %1055 ], [ 0, %1011 ]
  %1039 = mul nsw i32 %1037, %1038
  %1040 = add i32 %1039, %18
  %1041 = add i32 %1040, %1021
  %1042 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1041
  %1043 = load i32, i32 addrspace(3)* %1042, align 4, !tbaa !4
  %1044 = add i32 %1040, %1024
  %1045 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1044
  %1046 = load i32, i32 addrspace(3)* %1045, align 4, !tbaa !4
  %1047 = add i32 %1040, %1023
  %1048 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1047
  %1049 = add nsw i32 %1046, %1043
  %1050 = sdiv i32 %1049, 2
  %1051 = load i32, i32 addrspace(3)* %1048, align 4, !tbaa !4
  %1052 = sub nsw i32 %1051, %1050
  store i32 %1052, i32 addrspace(3)* %1048, align 4, !tbaa !4
  %1053 = add nuw nsw i32 %1038, 1
  %1054 = icmp eq i32 %1053, %1028
  br i1 %1054, label %1033, label %1055

1055:                                             ; preds = %1036
  %1056 = load i32, i32 addrspace(3)* %361, align 4, !tbaa !35
  br label %1036

1057:                                             ; preds = %1033
  %1058 = add i32 %1031, %18
  %1059 = add i32 %1058, %1021
  %1060 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1059
  %1061 = load i32, i32 addrspace(3)* %1060, align 4, !tbaa !4
  %1062 = add i32 %1058, %1024
  %1063 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1062
  %1064 = load i32, i32 addrspace(3)* %1063, align 4, !tbaa !4
  %1065 = add i32 %1058, %1023
  %1066 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1065
  %1067 = add nsw i32 %1064, %1061
  %1068 = sdiv i32 %1067, 2
  %1069 = load i32, i32 addrspace(3)* %1066, align 4, !tbaa !4
  %1070 = sub nsw i32 %1069, %1068
  store i32 %1070, i32 addrspace(3)* %1066, align 4, !tbaa !4
  br label %1071

1071:                                             ; preds = %1033, %1057
  tail call void @_Z7barrierj(i32 1) #10
  %1072 = load i32, i32 addrspace(3)* %12, align 4, !tbaa !52
  %1073 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !37
  %1074 = mul nsw i32 %1073, %1072
  %1075 = add nsw i32 %1074, -1
  %1076 = shl nsw i32 %1073, 1
  %1077 = or i32 %1076, 1
  %1078 = load i32, i32 addrspace(3)* %22, align 4, !tbaa !38
  %1079 = add nsw i32 %1076, %1078
  %1080 = add nsw i32 %1079, 1
  %1081 = load i32, i32 addrspace(3)* %361, align 4, !tbaa !35
  %1082 = freeze i32 %1075
  %1083 = freeze i32 %1081
  %1084 = sdiv i32 %1082, %1083
  %1085 = mul i32 %1084, %1083
  %1086 = sub i32 %1082, %1085
  %1087 = sub nsw i32 %1075, %1086
  %1088 = icmp sgt i32 %1084, 0
  br i1 %1088, label %1092, label %1089

1089:                                             ; preds = %1092, %1071
  %1090 = sext i32 %1086 to i64
  %1091 = icmp ult i64 %17, %1090
  br i1 %1091, label %1114, label %1129

1092:                                             ; preds = %1071, %1112
  %1093 = phi i32 [ %1113, %1112 ], [ %1081, %1071 ]
  %1094 = phi i32 [ %1110, %1112 ], [ 0, %1071 ]
  %1095 = mul nsw i32 %1093, %1094
  %1096 = add i32 %1095, %18
  %1097 = add i32 %1096, %1079
  %1098 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1097
  %1099 = load i32, i32 addrspace(3)* %1098, align 4, !tbaa !4
  %1100 = add i32 %1096, %1080
  %1101 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1100
  %1102 = load i32, i32 addrspace(3)* %1101, align 4, !tbaa !4
  %1103 = add i32 %1096, %1077
  %1104 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1103
  %1105 = add i32 %1099, 2
  %1106 = add i32 %1105, %1102
  %1107 = sdiv i32 %1106, 4
  %1108 = load i32, i32 addrspace(3)* %1104, align 4, !tbaa !4
  %1109 = add nsw i32 %1107, %1108
  store i32 %1109, i32 addrspace(3)* %1104, align 4, !tbaa !4
  %1110 = add nuw nsw i32 %1094, 1
  %1111 = icmp eq i32 %1110, %1084
  br i1 %1111, label %1089, label %1112

1112:                                             ; preds = %1092
  %1113 = load i32, i32 addrspace(3)* %361, align 4, !tbaa !35
  br label %1092

1114:                                             ; preds = %1089
  %1115 = add i32 %1087, %18
  %1116 = add i32 %1115, %1079
  %1117 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1116
  %1118 = load i32, i32 addrspace(3)* %1117, align 4, !tbaa !4
  %1119 = add i32 %1115, %1080
  %1120 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1119
  %1121 = load i32, i32 addrspace(3)* %1120, align 4, !tbaa !4
  %1122 = add i32 %1115, %1077
  %1123 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1122
  %1124 = add i32 %1118, 2
  %1125 = add i32 %1124, %1121
  %1126 = sdiv i32 %1125, 4
  %1127 = load i32, i32 addrspace(3)* %1123, align 4, !tbaa !4
  %1128 = add nsw i32 %1126, %1127
  store i32 %1128, i32 addrspace(3)* %1123, align 4, !tbaa !4
  br label %1129

1129:                                             ; preds = %1089, %1114
  tail call void @_Z7barrierj(i32 1) #10
  %1130 = load i32, i32 addrspace(3)* %12, align 4, !tbaa !52
  %1131 = icmp sgt i32 %1130, 0
  br i1 %1131, label %1132, label %1181

1132:                                             ; preds = %1129
  %1133 = load i32, i32 addrspace(3)* %359, align 4, !tbaa !59
  %1134 = add i32 %1130, -1
  %1135 = lshr i32 %1134, 1
  %1136 = add nuw i32 %1135, 1
  %1137 = and i32 %1136, 3
  %1138 = icmp ult i32 %1134, 6
  br i1 %1138, label %1141, label %1139

1139:                                             ; preds = %1132
  %1140 = and i32 %1136, -4
  br label %1186

1141:                                             ; preds = %1286, %1132
  %1142 = phi i32 [ undef, %1132 ], [ %1287, %1286 ]
  %1143 = phi i8 [ undef, %1132 ], [ %1264, %1286 ]
  %1144 = phi i32 [ 2, %1132 ], [ %1288, %1286 ]
  %1145 = phi i8 [ %365, %1132 ], [ %1264, %1286 ]
  %1146 = phi i32 [ %366, %1132 ], [ %1287, %1286 ]
  %1147 = icmp eq i32 %1137, 0
  br i1 %1147, label %1181, label %1148

1148:                                             ; preds = %1141, %1176
  %1149 = phi i32 [ %1178, %1176 ], [ %1144, %1141 ]
  %1150 = phi i8 [ %1154, %1176 ], [ %1145, %1141 ]
  %1151 = phi i32 [ %1177, %1176 ], [ %1146, %1141 ]
  %1152 = phi i32 [ %1179, %1176 ], [ %1137, %1141 ]
  %1153 = icmp ne i8 %1150, 0
  %1154 = zext i1 %1153 to i8
  %1155 = icmp eq i32 %1151, %353
  %1156 = and i1 %1155, %1153
  br i1 %1156, label %1176, label %1157

1157:                                             ; preds = %1148
  %1158 = mul nsw i32 %1133, %1149
  %1159 = add nsw i32 %1158, %308
  %1160 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1159
  %1161 = load i32, i32 addrspace(3)* %1160, align 4, !tbaa !4
  %1162 = sext i32 %1151 to i64
  %1163 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1162
  store i32 %1161, i32 addrspace(1)* %1163, align 4, !tbaa !4
  %1164 = add nsw i32 %1151, %351
  %1165 = icmp eq i32 %1164, %353
  %1166 = and i1 %1153, %1165
  br i1 %1166, label %1176, label %1167

1167:                                             ; preds = %1157
  %1168 = or i32 %1149, 1
  %1169 = mul nsw i32 %1133, %1168
  %1170 = add nsw i32 %1169, %308
  %1171 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1170
  %1172 = load i32, i32 addrspace(3)* %1171, align 4, !tbaa !4
  %1173 = sext i32 %1164 to i64
  %1174 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1173
  store i32 %1172, i32 addrspace(1)* %1174, align 4, !tbaa !4
  %1175 = add nsw i32 %1164, %352
  br label %1176

1176:                                             ; preds = %1167, %1157, %1148
  %1177 = phi i32 [ %1175, %1167 ], [ %353, %1148 ], [ %353, %1157 ]
  %1178 = add nuw nsw i32 %1149, 2
  %1179 = add i32 %1152, -1
  %1180 = icmp eq i32 %1179, 0
  br i1 %1180, label %1181, label %1148, !llvm.loop !60

1181:                                             ; preds = %1141, %1176, %1129
  %1182 = phi i32 [ %366, %1129 ], [ %1142, %1141 ], [ %1177, %1176 ]
  %1183 = phi i8 [ %365, %1129 ], [ %1143, %1141 ], [ %1154, %1176 ]
  tail call void @_Z7barrierj(i32 1) #10
  %1184 = add nuw nsw i32 %364, 1
  %1185 = icmp eq i32 %1184, %7
  br i1 %1185, label %362, label %363

1186:                                             ; preds = %1286, %1139
  %1187 = phi i32 [ 2, %1139 ], [ %1288, %1286 ]
  %1188 = phi i8 [ %365, %1139 ], [ %1264, %1286 ]
  %1189 = phi i32 [ %366, %1139 ], [ %1287, %1286 ]
  %1190 = phi i32 [ %1140, %1139 ], [ %1289, %1286 ]
  %1191 = icmp ne i8 %1188, 0
  %1192 = icmp eq i32 %1189, %353
  %1193 = and i1 %1192, %1191
  br i1 %1193, label %1213, label %1194

1194:                                             ; preds = %1186
  %1195 = mul nsw i32 %1133, %1187
  %1196 = add nsw i32 %1195, %308
  %1197 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1196
  %1198 = load i32, i32 addrspace(3)* %1197, align 4, !tbaa !4
  %1199 = sext i32 %1189 to i64
  %1200 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1199
  store i32 %1198, i32 addrspace(1)* %1200, align 4, !tbaa !4
  %1201 = add nsw i32 %1189, %351
  %1202 = icmp eq i32 %1201, %353
  %1203 = and i1 %1191, %1202
  br i1 %1203, label %1213, label %1204

1204:                                             ; preds = %1194
  %1205 = or i32 %1187, 1
  %1206 = mul nsw i32 %1133, %1205
  %1207 = add nsw i32 %1206, %308
  %1208 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1207
  %1209 = load i32, i32 addrspace(3)* %1208, align 4, !tbaa !4
  %1210 = sext i32 %1201 to i64
  %1211 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1210
  store i32 %1209, i32 addrspace(1)* %1211, align 4, !tbaa !4
  %1212 = add nsw i32 %1201, %352
  br label %1213

1213:                                             ; preds = %1194, %1186, %1204
  %1214 = phi i32 [ %1212, %1204 ], [ %353, %1186 ], [ %353, %1194 ]
  %1215 = add nuw nsw i32 %1187, 2
  %1216 = icmp eq i32 %1214, %353
  %1217 = and i1 %1216, %1191
  br i1 %1217, label %1237, label %1218

1218:                                             ; preds = %1213
  %1219 = mul nsw i32 %1133, %1215
  %1220 = add nsw i32 %1219, %308
  %1221 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1220
  %1222 = load i32, i32 addrspace(3)* %1221, align 4, !tbaa !4
  %1223 = sext i32 %1214 to i64
  %1224 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1223
  store i32 %1222, i32 addrspace(1)* %1224, align 4, !tbaa !4
  %1225 = add nsw i32 %1214, %351
  %1226 = icmp eq i32 %1225, %353
  %1227 = and i1 %1191, %1226
  br i1 %1227, label %1237, label %1228

1228:                                             ; preds = %1218
  %1229 = or i32 %1215, 1
  %1230 = mul nsw i32 %1133, %1229
  %1231 = add nsw i32 %1230, %308
  %1232 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1231
  %1233 = load i32, i32 addrspace(3)* %1232, align 4, !tbaa !4
  %1234 = sext i32 %1225 to i64
  %1235 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1234
  store i32 %1233, i32 addrspace(1)* %1235, align 4, !tbaa !4
  %1236 = add nsw i32 %1225, %352
  br label %1237

1237:                                             ; preds = %1228, %1218, %1213
  %1238 = phi i32 [ %1236, %1228 ], [ %353, %1213 ], [ %353, %1218 ]
  %1239 = add nuw nsw i32 %1187, 4
  %1240 = icmp eq i32 %1238, %353
  %1241 = and i1 %1240, %1191
  br i1 %1241, label %1261, label %1242

1242:                                             ; preds = %1237
  %1243 = mul nsw i32 %1133, %1239
  %1244 = add nsw i32 %1243, %308
  %1245 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1244
  %1246 = load i32, i32 addrspace(3)* %1245, align 4, !tbaa !4
  %1247 = sext i32 %1238 to i64
  %1248 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1247
  store i32 %1246, i32 addrspace(1)* %1248, align 4, !tbaa !4
  %1249 = add nsw i32 %1238, %351
  %1250 = icmp eq i32 %1249, %353
  %1251 = and i1 %1191, %1250
  br i1 %1251, label %1261, label %1252

1252:                                             ; preds = %1242
  %1253 = or i32 %1239, 1
  %1254 = mul nsw i32 %1133, %1253
  %1255 = add nsw i32 %1254, %308
  %1256 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1255
  %1257 = load i32, i32 addrspace(3)* %1256, align 4, !tbaa !4
  %1258 = sext i32 %1249 to i64
  %1259 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1258
  store i32 %1257, i32 addrspace(1)* %1259, align 4, !tbaa !4
  %1260 = add nsw i32 %1249, %352
  br label %1261

1261:                                             ; preds = %1252, %1242, %1237
  %1262 = phi i32 [ %1260, %1252 ], [ %353, %1237 ], [ %353, %1242 ]
  %1263 = add nuw nsw i32 %1187, 6
  %1264 = zext i1 %1191 to i8
  %1265 = icmp eq i32 %1262, %353
  %1266 = and i1 %1265, %1191
  br i1 %1266, label %1286, label %1267

1267:                                             ; preds = %1261
  %1268 = mul nsw i32 %1133, %1263
  %1269 = add nsw i32 %1268, %308
  %1270 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1269
  %1271 = load i32, i32 addrspace(3)* %1270, align 4, !tbaa !4
  %1272 = sext i32 %1262 to i64
  %1273 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1272
  store i32 %1271, i32 addrspace(1)* %1273, align 4, !tbaa !4
  %1274 = add nsw i32 %1262, %351
  %1275 = icmp eq i32 %1274, %353
  %1276 = and i1 %1191, %1275
  br i1 %1276, label %1286, label %1277

1277:                                             ; preds = %1267
  %1278 = or i32 %1263, 1
  %1279 = mul nsw i32 %1133, %1278
  %1280 = add nsw i32 %1279, %308
  %1281 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* %0, i32 0, i32 3, i32 7, i32 %1280
  %1282 = load i32, i32 addrspace(3)* %1281, align 4, !tbaa !4
  %1283 = sext i32 %1274 to i64
  %1284 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %1283
  store i32 %1282, i32 addrspace(1)* %1284, align 4, !tbaa !4
  %1285 = add nsw i32 %1274, %352
  br label %1286

1286:                                             ; preds = %1277, %1267, %1261
  %1287 = phi i32 [ %1285, %1277 ], [ %353, %1261 ], [ %353, %1267 ]
  %1288 = add nuw nsw i32 %1187, 8
  %1289 = add i32 %1190, -4
  %1290 = icmp eq i32 %1289, 0
  br i1 %1290, label %1141, label %1186
}

; Function Attrs: nofree norecurse nounwind
define hidden void @Forward53Predict(i32 %0, i32 addrspace(1)* nocapture %1, i32 %2) local_unnamed_addr #5 {
  %4 = add nsw i32 %2, %0
  %5 = sdiv i32 %4, 2
  %6 = load i32, i32 addrspace(1)* %1, align 4, !tbaa !4
  %7 = sub nsw i32 %6, %5
  store i32 %7, i32 addrspace(1)* %1, align 4, !tbaa !4
  ret void
}

; Function Attrs: nofree norecurse nounwind
define hidden void @Forward53Update(i32 %0, i32 addrspace(1)* nocapture %1, i32 %2) local_unnamed_addr #5 {
  %4 = add i32 %0, 2
  %5 = add i32 %4, %2
  %6 = sdiv i32 %5, 4
  %7 = load i32, i32 addrspace(1)* %1, align 4, !tbaa !4
  %8 = add nsw i32 %7, %6
  store i32 %8, i32 addrspace(1)* %1, align 4, !tbaa !4
  ret void
}

; Function Attrs: convergent norecurse nounwind
define protected amdgpu_kernel void @cl_fdwt53Kernel(i32 addrspace(1)* nocapture readonly %0, i32 addrspace(1)* nocapture %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr #2 !kernel_arg_addr_space !61 !kernel_arg_access_qual !62 !kernel_arg_type !63 !kernel_arg_base_type !63 !kernel_arg_type_qual !64 !kernel_arg_name !65 {
  store i32 %5, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 0), align 4, !tbaa !49
  store i32 %6, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 1), align 4, !tbaa !52
  br label %25

8:                                                ; preds = %25
  store i32 %5, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 0), align 4, !tbaa !66
  %9 = add nsw i32 %6, 3
  store i32 %9, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 1), align 4, !tbaa !67
  %10 = sdiv i32 %5, 2
  %11 = add nsw i32 %10, 2
  store i32 %11, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 2), align 4, !tbaa !59
  store i32 32, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 3), align 4, !tbaa !68
  %12 = mul nsw i32 %11, %9
  store i32 %12, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 4), align 4, !tbaa !69
  %13 = add nsw i32 %12, 16
  %14 = srem i32 %13, 32
  %15 = sub nsw i32 32, %14
  store i32 %15, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 5), align 4, !tbaa !70
  %16 = add nsw i32 %15, %12
  store i32 %16, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 6), align 4, !tbaa !71
  store i32 %11, i32 addrspace(3)* getelementptr inbounds (%struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 4), align 4, !tbaa !51
  %17 = tail call i64 @_Z12get_group_idj(i32 0) #9
  %18 = tail call i64 @_Z12get_group_idj(i32 1) #9
  %19 = trunc i64 %18 to i32
  %20 = add i32 %19, 1
  %21 = mul i32 %6, %4
  %22 = mul i32 %21, %20
  %23 = add i32 %22, 1
  %24 = icmp slt i32 %23, %3
  br i1 %24, label %33, label %32

25:                                               ; preds = %25, %7
  %26 = phi i32 [ 0, %7 ], [ %30, %25 ]
  %27 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 7, i32 %26
  store i32 0, i32 addrspace(3)* %27, align 4, !tbaa !4
  %28 = or i32 %26, 1
  %29 = getelementptr inbounds %struct.FDWT53, %struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i32 0, i32 3, i32 7, i32 %28
  store i32 0, i32 addrspace(3)* %29, align 4, !tbaa !4
  %30 = add nuw nsw i32 %26, 2
  %31 = icmp eq i32 %30, 2182
  br i1 %31, label %8, label %25

32:                                               ; preds = %8
  tail call void @transform(%struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i1 zeroext true, i1 zeroext true, i32 addrspace(1)* %0, i32 addrspace(1)* %1, i32 %2, i32 %3, i32 %4) #11
  br label %41

33:                                               ; preds = %8
  %34 = trunc i64 %17 to i32
  %35 = add i32 %34, 1
  %36 = mul i32 %35, %5
  %37 = add i32 %36, 1
  %38 = icmp slt i32 %37, %2
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  tail call void @transform(%struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i1 zeroext false, i1 zeroext true, i32 addrspace(1)* %0, i32 addrspace(1)* %1, i32 %2, i32 %3, i32 %4) #11
  br label %41

40:                                               ; preds = %33
  tail call void @transform(%struct.FDWT53 addrspace(3)* @cl_fdwt53Kernel.fdwt53, i1 zeroext false, i1 zeroext false, i32 addrspace(1)* %0, i32 addrspace(1)* %1, i32 %2, i32 %3, i32 %4) #11
  br label %41

41:                                               ; preds = %39, %40, %32
  ret void
}

attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { convergent norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { convergent "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { convergent nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { convergent norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { convergent nounwind readnone }
attributes #10 = { convergent nounwind }
attributes #11 = { convergent }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 1, i32 2}
!3 = !{!"clang version 11.0.0 (/src/external/llvm-project/clang 0383ad1cfb0a8e05b0a020e8632400194628b243)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"int", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{i32 1, i32 1, i32 1, i32 1, i32 0}
!9 = !{!"none", !"none", !"none", !"none", !"none"}
!10 = !{!"int*", !"int*", !"int*", !"uchar*", !"int"}
!11 = !{!"", !"", !"", !"", !""}
!12 = !{!"d_r", !"d_g", !"d_b", !"cl_d_src", !"pixels"}
!13 = !{!6, !6, i64 0}
!14 = !{i32 1, i32 1, i32 0}
!15 = !{!"none", !"none", !"none"}
!16 = !{!"int*", !"uchar*", !"int"}
!17 = !{!"", !"", !""}
!18 = !{!"d_c", !"cl_d_src", !"pixels"}
!19 = !{!20, !21, i64 0}
!20 = !{!"VerticalDWTPixelIO", !21, i64 0, !5, i64 4, !5, i64 8}
!21 = !{!"bool", !6, i64 0}
!22 = !{!20, !5, i64 4}
!23 = !{!20, !5, i64 8}
!24 = !{!25, !5, i64 4}
!25 = !{!"VerticalDWTPixelLoader", !21, i64 0, !5, i64 4}
!26 = !{!27, !5, i64 8}
!27 = !{!"VerticalDWTBandIO", !21, i64 0, !5, i64 4, !5, i64 8, !5, i64 12}
!28 = !{!27, !21, i64 0}
!29 = !{i8 0, i8 2}
!30 = !{!31, !21, i64 0}
!31 = !{!"VerticalDWTBandWriter", !21, i64 0, !5, i64 4}
!32 = !{!31, !5, i64 4}
!33 = !{!27, !5, i64 4}
!34 = !{!27, !5, i64 12}
!35 = !{!36, !5, i64 0}
!36 = !{!"TransformBuffer", !5, i64 0, !5, i64 4, !5, i64 8, !5, i64 12, !5, i64 16, !5, i64 20, !5, i64 24, !6, i64 28}
!37 = !{!36, !5, i64 8}
!38 = !{!36, !5, i64 24}
!39 = !{!36, !5, i64 4}
!40 = distinct !{!40, !41}
!41 = !{!"llvm.loop.unroll.disable"}
!42 = distinct !{!42, !41}
!43 = !{!44, !5, i64 12}
!44 = !{!"FDWT53Column", !21, i64 0, !25, i64 4, !5, i64 12, !5, i64 16, !5, i64 20, !5, i64 24}
!45 = !{!44, !5, i64 16}
!46 = !{!44, !5, i64 20}
!47 = !{!44, !5, i64 24}
!48 = !{!44, !21, i64 0}
!49 = !{!50, !5, i64 0}
!50 = !{!"FDWT53", !5, i64 0, !5, i64 4, !44, i64 8, !36, i64 36, !5, i64 8792}
!51 = !{!50, !5, i64 8792}
!52 = !{!50, !5, i64 4}
!53 = distinct !{!53, !41}
!54 = distinct !{!54, !41}
!55 = distinct !{!55, !41}
!56 = distinct !{!56, !41}
!57 = distinct !{!57, !41}
!58 = distinct !{!58, !41}
!59 = !{!50, !5, i64 44}
!60 = distinct !{!60, !41}
!61 = !{i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0}
!62 = !{!"none", !"none", !"none", !"none", !"none", !"none", !"none"}
!63 = !{!"int*", !"int*", !"int", !"int", !"int", !"int", !"int"}
!64 = !{!"const", !"", !"", !"", !"", !"", !""}
!65 = !{!"in", !"out", !"sx", !"sy", !"steps", !"WIN_SIZE_X", !"WIN_SIZE_Y"}
!66 = !{!50, !5, i64 36}
!67 = !{!50, !5, i64 40}
!68 = !{!50, !5, i64 48}
!69 = !{!50, !5, i64 52}
!70 = !{!50, !5, i64 56}
!71 = !{!50, !5, i64 60}
