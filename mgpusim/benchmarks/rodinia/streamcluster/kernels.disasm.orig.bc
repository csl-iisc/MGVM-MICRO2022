; ModuleID = 'native/Kernels.cl'
source_filename = "native/Kernels.cl"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.Point_Struct = type { float, i64, float }

; Function Attrs: convergent nofree norecurse nounwind writeonly
define protected amdgpu_kernel void @memset_kernel(i8 addrspace(1)* nocapture %0, i16 %1, i32 %2) local_unnamed_addr #0 !kernel_arg_addr_space !4 !kernel_arg_access_qual !5 !kernel_arg_type !6 !kernel_arg_base_type !6 !kernel_arg_type_qual !7 !kernel_arg_name !8 {
  %4 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %5 = trunc i16 %1 to i8
  %6 = shl i64 %4, 32
  %7 = ashr exact i64 %6, 32
  %8 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %7
  store i8 %5, i8 addrspace(1)* %8, align 1, !tbaa !9
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z13get_global_idj(i32) local_unnamed_addr #1

; Function Attrs: convergent norecurse nounwind
define protected amdgpu_kernel void @pgain_kernel(%struct.Point_Struct addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture %2, i32 addrspace(1)* nocapture readonly %3, i8 addrspace(1)* nocapture %4, float addrspace(3)* nocapture %5, i32 %6, i32 %7, i64 %8, i32 %9) local_unnamed_addr #2 !kernel_arg_addr_space !12 !kernel_arg_access_qual !13 !kernel_arg_type !14 !kernel_arg_base_type !14 !kernel_arg_type_qual !15 !kernel_arg_name !16 {
  %11 = tail call i64 @_Z13get_global_idj(i32 0) #5
  %12 = trunc i64 %11 to i32
  %13 = tail call i64 @_Z12get_local_idj(i32 0) #5
  %14 = icmp slt i32 %12, %6
  br i1 %14, label %15, label %265

15:                                               ; preds = %10
  %16 = trunc i64 %13 to i32
  %17 = icmp eq i32 %16, 0
  %18 = icmp sgt i32 %7, 0
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %120

20:                                               ; preds = %15
  %21 = add i32 %7, -1
  %22 = and i32 %7, 7
  %23 = icmp ult i32 %21, 7
  br i1 %23, label %103, label %24

24:                                               ; preds = %20
  %25 = and i32 %7, -8
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i32 [ 0, %24 ], [ %100, %26 ]
  %28 = phi i32 [ %25, %24 ], [ %101, %26 ]
  %29 = mul nsw i32 %27, %6
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %8
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %31
  %33 = bitcast float addrspace(1)* %32 to i32 addrspace(1)*
  %34 = load i32, i32 addrspace(1)* %33, align 4, !tbaa !17
  %35 = getelementptr inbounds float, float addrspace(3)* %5, i32 %27
  %36 = bitcast float addrspace(3)* %35 to i32 addrspace(3)*
  store i32 %34, i32 addrspace(3)* %36, align 4, !tbaa !17
  %37 = or i32 %27, 1
  %38 = mul nsw i32 %37, %6
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, %8
  %41 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %42 = bitcast float addrspace(1)* %41 to i32 addrspace(1)*
  %43 = load i32, i32 addrspace(1)* %42, align 4, !tbaa !17
  %44 = getelementptr inbounds float, float addrspace(3)* %5, i32 %37
  %45 = bitcast float addrspace(3)* %44 to i32 addrspace(3)*
  store i32 %43, i32 addrspace(3)* %45, align 4, !tbaa !17
  %46 = or i32 %27, 2
  %47 = mul nsw i32 %46, %6
  %48 = sext i32 %47 to i64
  %49 = add nsw i64 %48, %8
  %50 = getelementptr inbounds float, float addrspace(1)* %1, i64 %49
  %51 = bitcast float addrspace(1)* %50 to i32 addrspace(1)*
  %52 = load i32, i32 addrspace(1)* %51, align 4, !tbaa !17
  %53 = getelementptr inbounds float, float addrspace(3)* %5, i32 %46
  %54 = bitcast float addrspace(3)* %53 to i32 addrspace(3)*
  store i32 %52, i32 addrspace(3)* %54, align 4, !tbaa !17
  %55 = or i32 %27, 3
  %56 = mul nsw i32 %55, %6
  %57 = sext i32 %56 to i64
  %58 = add nsw i64 %57, %8
  %59 = getelementptr inbounds float, float addrspace(1)* %1, i64 %58
  %60 = bitcast float addrspace(1)* %59 to i32 addrspace(1)*
  %61 = load i32, i32 addrspace(1)* %60, align 4, !tbaa !17
  %62 = getelementptr inbounds float, float addrspace(3)* %5, i32 %55
  %63 = bitcast float addrspace(3)* %62 to i32 addrspace(3)*
  store i32 %61, i32 addrspace(3)* %63, align 4, !tbaa !17
  %64 = or i32 %27, 4
  %65 = mul nsw i32 %64, %6
  %66 = sext i32 %65 to i64
  %67 = add nsw i64 %66, %8
  %68 = getelementptr inbounds float, float addrspace(1)* %1, i64 %67
  %69 = bitcast float addrspace(1)* %68 to i32 addrspace(1)*
  %70 = load i32, i32 addrspace(1)* %69, align 4, !tbaa !17
  %71 = getelementptr inbounds float, float addrspace(3)* %5, i32 %64
  %72 = bitcast float addrspace(3)* %71 to i32 addrspace(3)*
  store i32 %70, i32 addrspace(3)* %72, align 4, !tbaa !17
  %73 = or i32 %27, 5
  %74 = mul nsw i32 %73, %6
  %75 = sext i32 %74 to i64
  %76 = add nsw i64 %75, %8
  %77 = getelementptr inbounds float, float addrspace(1)* %1, i64 %76
  %78 = bitcast float addrspace(1)* %77 to i32 addrspace(1)*
  %79 = load i32, i32 addrspace(1)* %78, align 4, !tbaa !17
  %80 = getelementptr inbounds float, float addrspace(3)* %5, i32 %73
  %81 = bitcast float addrspace(3)* %80 to i32 addrspace(3)*
  store i32 %79, i32 addrspace(3)* %81, align 4, !tbaa !17
  %82 = or i32 %27, 6
  %83 = mul nsw i32 %82, %6
  %84 = sext i32 %83 to i64
  %85 = add nsw i64 %84, %8
  %86 = getelementptr inbounds float, float addrspace(1)* %1, i64 %85
  %87 = bitcast float addrspace(1)* %86 to i32 addrspace(1)*
  %88 = load i32, i32 addrspace(1)* %87, align 4, !tbaa !17
  %89 = getelementptr inbounds float, float addrspace(3)* %5, i32 %82
  %90 = bitcast float addrspace(3)* %89 to i32 addrspace(3)*
  store i32 %88, i32 addrspace(3)* %90, align 4, !tbaa !17
  %91 = or i32 %27, 7
  %92 = mul nsw i32 %91, %6
  %93 = sext i32 %92 to i64
  %94 = add nsw i64 %93, %8
  %95 = getelementptr inbounds float, float addrspace(1)* %1, i64 %94
  %96 = bitcast float addrspace(1)* %95 to i32 addrspace(1)*
  %97 = load i32, i32 addrspace(1)* %96, align 4, !tbaa !17
  %98 = getelementptr inbounds float, float addrspace(3)* %5, i32 %91
  %99 = bitcast float addrspace(3)* %98 to i32 addrspace(3)*
  store i32 %97, i32 addrspace(3)* %99, align 4, !tbaa !17
  %100 = add nuw nsw i32 %27, 8
  %101 = add i32 %28, -8
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %26

103:                                              ; preds = %26, %20
  %104 = phi i32 [ 0, %20 ], [ %100, %26 ]
  %105 = icmp eq i32 %22, 0
  br i1 %105, label %120, label %106

106:                                              ; preds = %103, %106
  %107 = phi i32 [ %117, %106 ], [ %104, %103 ]
  %108 = phi i32 [ %118, %106 ], [ %22, %103 ]
  %109 = mul nsw i32 %107, %6
  %110 = sext i32 %109 to i64
  %111 = add nsw i64 %110, %8
  %112 = getelementptr inbounds float, float addrspace(1)* %1, i64 %111
  %113 = bitcast float addrspace(1)* %112 to i32 addrspace(1)*
  %114 = load i32, i32 addrspace(1)* %113, align 4, !tbaa !17
  %115 = getelementptr inbounds float, float addrspace(3)* %5, i32 %107
  %116 = bitcast float addrspace(3)* %115 to i32 addrspace(3)*
  store i32 %114, i32 addrspace(3)* %116, align 4, !tbaa !17
  %117 = add nuw nsw i32 %107, 1
  %118 = add i32 %108, -1
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %106, !llvm.loop !19

120:                                              ; preds = %103, %106, %15
  tail call void @_Z7barrierj(i32 1) #6
  br i1 %18, label %121, label %148

121:                                              ; preds = %120
  %122 = add i32 %7, -1
  %123 = and i32 %7, 7
  %124 = icmp ult i32 %122, 7
  br i1 %124, label %127, label %125

125:                                              ; preds = %121
  %126 = and i32 %7, -8
  br label %160

127:                                              ; preds = %160, %121
  %128 = phi float [ undef, %121 ], [ %242, %160 ]
  %129 = phi float [ 0.000000e+00, %121 ], [ %242, %160 ]
  %130 = phi i32 [ 0, %121 ], [ %243, %160 ]
  %131 = icmp eq i32 %123, 0
  br i1 %131, label %148, label %132

132:                                              ; preds = %127, %132
  %133 = phi float [ %144, %132 ], [ %129, %127 ]
  %134 = phi i32 [ %145, %132 ], [ %130, %127 ]
  %135 = phi i32 [ %146, %132 ], [ %123, %127 ]
  %136 = mul nsw i32 %134, %6
  %137 = add nsw i32 %136, %12
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds float, float addrspace(1)* %1, i64 %138
  %140 = load float, float addrspace(1)* %139, align 4, !tbaa !17
  %141 = getelementptr inbounds float, float addrspace(3)* %5, i32 %134
  %142 = load float, float addrspace(3)* %141, align 4, !tbaa !17
  %143 = fsub float %140, %142
  %144 = tail call float @llvm.fmuladd.f32(float %143, float %143, float %133)
  %145 = add nuw nsw i32 %134, 1
  %146 = add i32 %135, -1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %132, !llvm.loop !21

148:                                              ; preds = %127, %132, %120
  %149 = phi float [ 0.000000e+00, %120 ], [ %128, %127 ], [ %144, %132 ]
  %150 = shl i64 %11, 32
  %151 = ashr exact i64 %150, 32
  %152 = getelementptr inbounds %struct.Point_Struct, %struct.Point_Struct addrspace(1)* %0, i64 %151, i32 0
  %153 = load float, float addrspace(1)* %152, align 8, !tbaa !22
  %154 = fmul float %149, %153
  %155 = getelementptr inbounds %struct.Point_Struct, %struct.Point_Struct addrspace(1)* %0, i64 %151, i32 2
  %156 = load float, float addrspace(1)* %155, align 8, !tbaa !25
  %157 = add nsw i32 %9, 1
  %158 = mul nsw i32 %157, %12
  %159 = fcmp olt float %154, %156
  br i1 %159, label %246, label %252

160:                                              ; preds = %160, %125
  %161 = phi float [ 0.000000e+00, %125 ], [ %242, %160 ]
  %162 = phi i32 [ 0, %125 ], [ %243, %160 ]
  %163 = phi i32 [ %126, %125 ], [ %244, %160 ]
  %164 = mul nsw i32 %162, %6
  %165 = add nsw i32 %164, %12
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float addrspace(1)* %1, i64 %166
  %168 = load float, float addrspace(1)* %167, align 4, !tbaa !17
  %169 = getelementptr inbounds float, float addrspace(3)* %5, i32 %162
  %170 = load float, float addrspace(3)* %169, align 4, !tbaa !17
  %171 = fsub float %168, %170
  %172 = tail call float @llvm.fmuladd.f32(float %171, float %171, float %161)
  %173 = or i32 %162, 1
  %174 = mul nsw i32 %173, %6
  %175 = add nsw i32 %174, %12
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float addrspace(1)* %1, i64 %176
  %178 = load float, float addrspace(1)* %177, align 4, !tbaa !17
  %179 = getelementptr inbounds float, float addrspace(3)* %5, i32 %173
  %180 = load float, float addrspace(3)* %179, align 4, !tbaa !17
  %181 = fsub float %178, %180
  %182 = tail call float @llvm.fmuladd.f32(float %181, float %181, float %172)
  %183 = or i32 %162, 2
  %184 = mul nsw i32 %183, %6
  %185 = add nsw i32 %184, %12
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds float, float addrspace(1)* %1, i64 %186
  %188 = load float, float addrspace(1)* %187, align 4, !tbaa !17
  %189 = getelementptr inbounds float, float addrspace(3)* %5, i32 %183
  %190 = load float, float addrspace(3)* %189, align 4, !tbaa !17
  %191 = fsub float %188, %190
  %192 = tail call float @llvm.fmuladd.f32(float %191, float %191, float %182)
  %193 = or i32 %162, 3
  %194 = mul nsw i32 %193, %6
  %195 = add nsw i32 %194, %12
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds float, float addrspace(1)* %1, i64 %196
  %198 = load float, float addrspace(1)* %197, align 4, !tbaa !17
  %199 = getelementptr inbounds float, float addrspace(3)* %5, i32 %193
  %200 = load float, float addrspace(3)* %199, align 4, !tbaa !17
  %201 = fsub float %198, %200
  %202 = tail call float @llvm.fmuladd.f32(float %201, float %201, float %192)
  %203 = or i32 %162, 4
  %204 = mul nsw i32 %203, %6
  %205 = add nsw i32 %204, %12
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds float, float addrspace(1)* %1, i64 %206
  %208 = load float, float addrspace(1)* %207, align 4, !tbaa !17
  %209 = getelementptr inbounds float, float addrspace(3)* %5, i32 %203
  %210 = load float, float addrspace(3)* %209, align 4, !tbaa !17
  %211 = fsub float %208, %210
  %212 = tail call float @llvm.fmuladd.f32(float %211, float %211, float %202)
  %213 = or i32 %162, 5
  %214 = mul nsw i32 %213, %6
  %215 = add nsw i32 %214, %12
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds float, float addrspace(1)* %1, i64 %216
  %218 = load float, float addrspace(1)* %217, align 4, !tbaa !17
  %219 = getelementptr inbounds float, float addrspace(3)* %5, i32 %213
  %220 = load float, float addrspace(3)* %219, align 4, !tbaa !17
  %221 = fsub float %218, %220
  %222 = tail call float @llvm.fmuladd.f32(float %221, float %221, float %212)
  %223 = or i32 %162, 6
  %224 = mul nsw i32 %223, %6
  %225 = add nsw i32 %224, %12
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds float, float addrspace(1)* %1, i64 %226
  %228 = load float, float addrspace(1)* %227, align 4, !tbaa !17
  %229 = getelementptr inbounds float, float addrspace(3)* %5, i32 %223
  %230 = load float, float addrspace(3)* %229, align 4, !tbaa !17
  %231 = fsub float %228, %230
  %232 = tail call float @llvm.fmuladd.f32(float %231, float %231, float %222)
  %233 = or i32 %162, 7
  %234 = mul nsw i32 %233, %6
  %235 = add nsw i32 %234, %12
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds float, float addrspace(1)* %1, i64 %236
  %238 = load float, float addrspace(1)* %237, align 4, !tbaa !17
  %239 = getelementptr inbounds float, float addrspace(3)* %5, i32 %233
  %240 = load float, float addrspace(3)* %239, align 4, !tbaa !17
  %241 = fsub float %238, %240
  %242 = tail call float @llvm.fmuladd.f32(float %241, float %241, float %232)
  %243 = add nuw nsw i32 %162, 8
  %244 = add i32 %163, -8
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %127, label %160

246:                                              ; preds = %148
  %247 = getelementptr inbounds i8, i8 addrspace(1)* %4, i64 %151
  store i8 49, i8 addrspace(1)* %247, align 1, !tbaa !9
  %248 = add nsw i32 %158, %9
  %249 = fsub float %154, %156
  %250 = sext i32 %248 to i64
  %251 = getelementptr inbounds float, float addrspace(1)* %2, i64 %250
  store float %249, float addrspace(1)* %251, align 4, !tbaa !17
  br label %265

252:                                              ; preds = %148
  %253 = getelementptr inbounds %struct.Point_Struct, %struct.Point_Struct addrspace(1)* %0, i64 %151, i32 1
  %254 = load i64, i64 addrspace(1)* %253, align 8, !tbaa !26
  %255 = shl i64 %254, 32
  %256 = ashr exact i64 %255, 32
  %257 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %256
  %258 = load i32, i32 addrspace(1)* %257, align 4, !tbaa !27
  %259 = add nsw i32 %258, %158
  %260 = fsub float %156, %154
  %261 = sext i32 %259 to i64
  %262 = getelementptr inbounds float, float addrspace(1)* %2, i64 %261
  %263 = load float, float addrspace(1)* %262, align 4, !tbaa !17
  %264 = fadd float %260, %263
  store float %264, float addrspace(1)* %262, align 4, !tbaa !17
  br label %265

265:                                              ; preds = %246, %252, %10
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: convergent
declare hidden void @_Z7barrierj(i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #4

attributes #0 = { convergent nofree norecurse nounwind writeonly "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="fiji" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="fiji" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { convergent norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="fiji" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { convergent "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="fiji" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { convergent nounwind readnone }
attributes #6 = { convergent nounwind }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 1, i32 2}
!3 = !{!"clang version 11.0.0 (/src/external/llvm-project/clang 0383ad1cfb0a8e05b0a020e8632400194628b243)"}
!4 = !{i32 1, i32 0, i32 0}
!5 = !{!"none", !"none", !"none"}
!6 = !{!"char*", !"short", !"int"}
!7 = !{!"", !"", !""}
!8 = !{!"mem_d", !"val", !"number_bytes"}
!9 = !{!10, !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{i32 1, i32 1, i32 1, i32 1, i32 1, i32 3, i32 0, i32 0, i32 0, i32 0}
!13 = !{!"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none"}
!14 = !{!"Point_Struct*", !"float*", !"float*", !"int*", !"char*", !"float*", !"int", !"int", !"long", !"int"}
!15 = !{!"", !"", !"", !"", !"", !"", !"", !"", !"", !""}
!16 = !{!"p", !"coord_d", !"work_mem_d", !"center_table_d", !"switch_membership_d", !"coord_s", !"num", !"dim", !"x", !"K"}
!17 = !{!18, !18, i64 0}
!18 = !{!"float", !10, i64 0}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.unroll.disable"}
!21 = distinct !{!21, !20}
!22 = !{!23, !18, i64 0}
!23 = !{!"", !18, i64 0, !24, i64 8, !18, i64 16}
!24 = !{!"long", !10, i64 0}
!25 = !{!23, !18, i64 16}
!26 = !{!23, !24, i64 8}
!27 = !{!28, !28, i64 0}
!28 = !{!"int", !10, i64 0}
