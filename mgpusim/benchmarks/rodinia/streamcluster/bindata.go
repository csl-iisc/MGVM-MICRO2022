// Code generated by "esc -o bindata.go -pkg streamcluster -private kernels.hsaco"; DO NOT EDIT.

package streamcluster

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    14008,
		modtime: 1655012212,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
