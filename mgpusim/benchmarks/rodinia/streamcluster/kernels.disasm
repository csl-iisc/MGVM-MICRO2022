	.text
	.hsa_code_object_version 2,1
	.hsa_code_object_isa 8,0,3,"AMD","AMDGPU"
	.protected	memset_kernel   ; -- Begin function memset_kernel
	.globl	memset_kernel
	.p2align	8
	.type	memset_kernel,@function
	.amdgpu_hsa_kernel memset_kernel
memset_kernel:                          ; @memset_kernel
memset_kernel$local:
	.amd_kernel_code_t
		amd_code_version_major = 1
		amd_code_version_minor = 2
		amd_machine_kind = 1
		amd_machine_version_major = 8
		amd_machine_version_minor = 0
		amd_machine_version_stepping = 3
		kernel_code_entry_byte_offset = 256
		kernel_code_prefetch_byte_size = 0
		granulated_workitem_vgpr_count = 0
		granulated_wavefront_sgpr_count = 1
		priority = 0
		float_mode = 192
		priv = 0
		enable_dx10_clamp = 1
		debug_mode = 0
		enable_ieee_mode = 1
		enable_wgp_mode = 0
		enable_mem_ordered = 0
		enable_fwd_progress = 0
		enable_sgpr_private_segment_wave_byte_offset = 0
		user_sgpr_count = 8
		enable_trap_handler = 0
		enable_sgpr_workgroup_id_x = 1
		enable_sgpr_workgroup_id_y = 0
		enable_sgpr_workgroup_id_z = 0
		enable_sgpr_workgroup_info = 0
		enable_vgpr_workitem_id = 0
		enable_exception_msb = 0
		granulated_lds_size = 0
		enable_exception = 0
		enable_sgpr_private_segment_buffer = 1
		enable_sgpr_dispatch_ptr = 1
		enable_sgpr_queue_ptr = 0
		enable_sgpr_kernarg_segment_ptr = 1
		enable_sgpr_dispatch_id = 0
		enable_sgpr_flat_scratch_init = 0
		enable_sgpr_private_segment_size = 0
		enable_sgpr_grid_workgroup_count_x = 0
		enable_sgpr_grid_workgroup_count_y = 0
		enable_sgpr_grid_workgroup_count_z = 0
		enable_wavefront_size32 = 0
		enable_ordered_append_gds = 0
		private_element_size = 1
		is_ptr64 = 1
		is_dynamic_callstack = 0
		is_debug_enabled = 0
		is_xnack_enabled = 0
		workitem_private_segment_byte_size = 0
		workgroup_group_segment_byte_size = 0
		gds_segment_byte_size = 0
		kernarg_segment_byte_size = 72
		workgroup_fbarrier_count = 0
		wavefront_sgpr_count = 11
		workitem_vgpr_count = 3
		reserved_vgpr_first = 0
		reserved_vgpr_count = 0
		reserved_sgpr_first = 0
		reserved_sgpr_count = 0
		debug_wavefront_private_segment_offset_sgpr = 0
		debug_private_segment_buffer_sgpr = 0
		kernarg_segment_alignment = 4
		group_segment_alignment = 4
		private_segment_alignment = 4
		wavefront_size = 6
		call_convention = -1
		runtime_loader_kernel_symbol = 0
	.end_amd_kernel_code_t
; %bb.0:
	s_load_dword s0, s[4:5], 0x4
	s_waitcnt lgkmcnt(0)
	s_and_b32 s0, s0, 0xffff
	s_mul_i32 s8, s8, s0
	s_load_dwordx2 s[0:1], s[6:7], 0x0
	s_load_dword s2, s[6:7], 0x8
	s_load_dword s3, s[6:7], 0x10
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v2, s1
	s_add_i32 s3, s3, s8
	v_add_u32_e32 v0, vcc, s3, v0
	v_ashrrev_i32_e32 v1, 31, v0
	v_add_u32_e32 v0, vcc, s0, v0
	v_addc_u32_e32 v1, vcc, v2, v1, vcc
	v_mov_b32_e32 v2, s2
	flat_store_byte v[0:1], v2
	s_endpgm
.Lfunc_end0:
	.size	memset_kernel, .Lfunc_end0-memset_kernel
                                        ; -- End function
	.section	.AMDGPU.csdata
; Kernel info:
; codeLenInByte = 92
; NumSgprs: 11
; NumVgprs: 3
; ScratchSize: 0
; MemoryBound: 0
; FloatMode: 192
; IeeeMode: 1
; LDSByteSize: 0 bytes/workgroup (compile time only)
; SGPRBlocks: 1
; VGPRBlocks: 0
; NumSGPRsForWavesPerEU: 11
; NumVGPRsForWavesPerEU: 3
; Occupancy: 10
; WaveLimiterHint : 1
; COMPUTE_PGM_RSRC2:USER_SGPR: 8
; COMPUTE_PGM_RSRC2:TRAP_HANDLER: 0
; COMPUTE_PGM_RSRC2:TGID_X_EN: 1
; COMPUTE_PGM_RSRC2:TGID_Y_EN: 0
; COMPUTE_PGM_RSRC2:TGID_Z_EN: 0
; COMPUTE_PGM_RSRC2:TIDIG_COMP_CNT: 0
	.text
	.protected	pgain_kernel    ; -- Begin function pgain_kernel
	.globl	pgain_kernel
	.p2align	8
	.type	pgain_kernel,@function
	.amdgpu_hsa_kernel pgain_kernel
pgain_kernel:                           ; @pgain_kernel
pgain_kernel$local:
	.amd_kernel_code_t
		amd_code_version_major = 1
		amd_code_version_minor = 2
		amd_machine_kind = 1
		amd_machine_version_major = 8
		amd_machine_version_minor = 0
		amd_machine_version_stepping = 3
		kernel_code_entry_byte_offset = 256
		kernel_code_prefetch_byte_size = 0
		granulated_workitem_vgpr_count = 5
		granulated_wavefront_sgpr_count = 5
		priority = 0
		float_mode = 192
		priv = 0
		enable_dx10_clamp = 1
		debug_mode = 0
		enable_ieee_mode = 1
		enable_wgp_mode = 0
		enable_mem_ordered = 0
		enable_fwd_progress = 0
		enable_sgpr_private_segment_wave_byte_offset = 0
		user_sgpr_count = 8
		enable_trap_handler = 0
		enable_sgpr_workgroup_id_x = 1
		enable_sgpr_workgroup_id_y = 0
		enable_sgpr_workgroup_id_z = 0
		enable_sgpr_workgroup_info = 0
		enable_vgpr_workitem_id = 0
		enable_exception_msb = 0
		granulated_lds_size = 0
		enable_exception = 0
		enable_sgpr_private_segment_buffer = 1
		enable_sgpr_dispatch_ptr = 1
		enable_sgpr_queue_ptr = 0
		enable_sgpr_kernarg_segment_ptr = 1
		enable_sgpr_dispatch_id = 0
		enable_sgpr_flat_scratch_init = 0
		enable_sgpr_private_segment_size = 0
		enable_sgpr_grid_workgroup_count_x = 0
		enable_sgpr_grid_workgroup_count_y = 0
		enable_sgpr_grid_workgroup_count_z = 0
		enable_wavefront_size32 = 0
		enable_ordered_append_gds = 0
		private_element_size = 1
		is_ptr64 = 1
		is_dynamic_callstack = 0
		is_debug_enabled = 0
		is_xnack_enabled = 0
		workitem_private_segment_byte_size = 0
		workgroup_group_segment_byte_size = 0
		gds_segment_byte_size = 0
		kernarg_segment_byte_size = 128
		workgroup_fbarrier_count = 0
		wavefront_sgpr_count = 48
		workitem_vgpr_count = 23
		reserved_vgpr_first = 0
		reserved_vgpr_count = 0
		reserved_sgpr_first = 0
		reserved_sgpr_count = 0
		debug_wavefront_private_segment_offset_sgpr = 0
		debug_private_segment_buffer_sgpr = 0
		kernarg_segment_alignment = 4
		group_segment_alignment = 4
		private_segment_alignment = 4
		wavefront_size = 6
		call_convention = -1
		runtime_loader_kernel_symbol = 0
	.end_amd_kernel_code_t
; %bb.0:
	s_load_dwordx4 s[16:19], s[6:7], 0x28
	s_load_dwordx2 s[20:21], s[6:7], 0x48
	s_load_dword s0, s[4:5], 0x4
	s_waitcnt lgkmcnt(0)
	s_and_b32 s0, s0, 0xffff
	s_mul_i32 s4, s8, s0
	v_add_u32_e32 v1, vcc, s4, v0
	v_add_u32_e32 v1, vcc, s20, v1
	v_cmp_gt_i32_e32 vcc, s17, v1
	s_and_saveexec_b64 s[0:1], vcc
	s_cbranch_execz BB1_20
; %bb.1:
	s_load_dwordx8 s[8:15], s[6:7], 0x0
	s_load_dwordx4 s[0:3], s[6:7], 0x20
	v_cmp_eq_u32_e32 vcc, 0, v0
	v_cmp_gt_i32_e64 s[22:23], s18, 0
	s_mov_b32 s5, 0
	s_and_b64 s[24:25], vcc, s[22:23]
	s_mov_b32 m0, -1
	s_waitcnt lgkmcnt(0)
	s_and_saveexec_b64 s[2:3], s[24:25]
	s_cbranch_execz BB1_8
; %bb.2:
	s_load_dwordx2 s[24:25], s[6:7], 0x38
	s_add_i32 s19, s18, -1
	s_cmp_lt_u32 s19, 7
	s_cbranch_scc1 BB1_5
; %bb.3:
	s_and_b32 s5, s18, -8
	s_lshl_b32 s26, s17, 3
	s_lshl_b32 s19, s17, 1
	s_lshl_b32 s28, s17, 2
	s_waitcnt lgkmcnt(0)
	s_lshl_b64 s[34:35], s[24:25], 2
	s_add_u32 s34, s10, s34
	s_addc_u32 s35, s11, s35
	s_ashr_i32 s27, s26, 31
	s_lshl_b64 s[36:37], s[26:27], 2
	s_mul_i32 s21, s17, 3
	s_mul_i32 s29, s17, 5
	s_mul_i32 s30, s17, 6
	s_mul_i32 s31, s17, 7
	s_mov_b32 s27, 0
	v_mov_b32_e32 v2, s16
	s_mov_b32 s33, 0
BB1_4:                                  ; =>This Inner Loop Header: Depth=1
	s_add_i32 s38, s17, s27
	s_ashr_i32 s39, s38, 31
	s_load_dword s40, s[34:35], 0x0
	s_add_u32 s38, s38, s24
	s_addc_u32 s39, s39, s25
	s_lshl_b64 s[38:39], s[38:39], 2
	s_add_u32 s38, s10, s38
	s_addc_u32 s39, s11, s39
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v3, s40
	s_add_i32 s40, s19, s27
	s_ashr_i32 s41, s40, 31
	s_load_dword s42, s[38:39], 0x0
	s_add_u32 s38, s40, s24
	s_addc_u32 s39, s41, s25
	s_lshl_b64 s[38:39], s[38:39], 2
	s_add_u32 s38, s10, s38
	s_addc_u32 s39, s11, s39
	s_add_i32 s40, s21, s27
	s_ashr_i32 s41, s40, 31
	s_load_dword s43, s[38:39], 0x0
	s_add_u32 s38, s40, s24
	s_addc_u32 s39, s41, s25
	s_lshl_b64 s[38:39], s[38:39], 2
	s_add_u32 s38, s10, s38
	s_addc_u32 s39, s11, s39
	s_add_i32 s40, s28, s27
	s_ashr_i32 s41, s40, 31
	s_load_dword s44, s[38:39], 0x0
	s_add_u32 s38, s40, s24
	s_addc_u32 s39, s41, s25
	s_lshl_b64 s[38:39], s[38:39], 2
	s_add_u32 s38, s10, s38
	s_addc_u32 s39, s11, s39
	s_add_i32 s40, s29, s27
	s_ashr_i32 s41, s40, 31
	s_load_dword s45, s[38:39], 0x0
	s_add_u32 s38, s40, s24
	s_addc_u32 s39, s41, s25
	s_lshl_b64 s[38:39], s[38:39], 2
	s_add_u32 s38, s10, s38
	s_addc_u32 s39, s11, s39
	s_add_i32 s40, s30, s27
	s_load_dword s41, s[38:39], 0x0
	s_ashr_i32 s39, s40, 31
	s_add_u32 s38, s40, s24
	s_addc_u32 s39, s39, s25
	s_lshl_b64 s[38:39], s[38:39], 2
	s_add_u32 s38, s10, s38
	s_addc_u32 s39, s11, s39
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v4, s43
	v_mov_b32_e32 v5, s44
	s_add_i32 s40, s31, s27
	v_mov_b32_e32 v6, s42
	ds_write2_b32 v2, v4, v5 offset0:2 offset1:3
	ds_write2_b32 v2, v3, v6 offset1:1
	v_mov_b32_e32 v3, s41
	s_ashr_i32 s41, s40, 31
	s_load_dword s42, s[38:39], 0x0
	s_add_u32 s38, s40, s24
	s_addc_u32 s39, s41, s25
	s_lshl_b64 s[38:39], s[38:39], 2
	s_add_u32 s38, s10, s38
	s_addc_u32 s39, s11, s39
	s_load_dword s38, s[38:39], 0x0
	s_add_i32 s33, s33, 8
	s_add_i32 s27, s27, s26
	s_add_u32 s34, s34, s36
	v_mov_b32_e32 v7, s45
	s_addc_u32 s35, s35, s37
	ds_write2_b32 v2, v7, v3 offset0:4 offset1:5
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v3, s42
	v_mov_b32_e32 v4, s38
	ds_write2_b32 v2, v3, v4 offset0:6 offset1:7
	s_cmp_lg_u32 s5, s33
	v_add_u32_e32 v2, vcc, 32, v2
	s_cbranch_scc1 BB1_4
BB1_5:                                  ; %Flow109
	s_and_b32 s19, s18, 7
	s_cmp_eq_u32 s19, 0
	s_cbranch_scc1 BB1_8
; %bb.6:                                ; %.preheader10.preheader
	s_mul_i32 s21, s5, s17
	s_ashr_i32 s26, s21, 31
	s_waitcnt lgkmcnt(0)
	s_add_u32 s24, s24, s21
	s_addc_u32 s25, s25, s26
	s_lshl_b64 s[24:25], s[24:25], 2
	s_add_u32 s24, s10, s24
	s_addc_u32 s25, s11, s25
	s_lshl_b32 s5, s5, 2
	s_ashr_i32 s27, s17, 31
	s_mov_b32 s26, s17
	s_lshl_b64 s[26:27], s[26:27], 2
	s_add_i32 s5, s16, s5
BB1_7:                                  ; %.preheader10
                                        ; =>This Inner Loop Header: Depth=1
	s_load_dword s21, s[24:25], 0x0
	s_add_i32 s19, s19, -1
	s_add_u32 s24, s24, s26
	v_mov_b32_e32 v2, s5
	s_addc_u32 s25, s25, s27
	s_add_i32 s5, s5, 4
	s_cmp_lg_u32 s19, 0
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v3, s21
	ds_write_b32 v2, v3
	s_cbranch_scc1 BB1_7
BB1_8:                                  ; %Flow110
	s_or_b64 exec, exec, s[2:3]
	s_load_dword s2, s[6:7], 0x40
	s_andn2_b64 vcc, exec, s[22:23]
	v_mov_b32_e32 v2, 0
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	s_cbranch_vccnz BB1_16
; %bb.9:
	s_add_i32 s3, s18, -1
	s_cmp_lt_u32 s3, 7
	v_mov_b32_e32 v2, 0
	s_mov_b32 m0, -1
	s_cbranch_scc1 BB1_13
; %bb.10:
	s_and_b32 s3, s18, -8
	s_lshl_b32 s5, s17, 3
	s_lshl_b32 s6, s17, 1
	s_mul_i32 s7, s17, 3
	s_lshl_b32 s19, s17, 2
	s_mul_i32 s21, s17, 5
	s_mul_i32 s22, s17, 6
	s_mul_i32 s23, s17, 7
	s_mov_b32 s24, 0
	v_mov_b32_e32 v3, s16
	v_mov_b32_e32 v2, 0
	v_mov_b32_e32 v4, v1
BB1_11:                                 ; =>This Inner Loop Header: Depth=1
	v_ashrrev_i32_e32 v5, 31, v4
	v_lshlrev_b64 v[13:14], 2, v[4:5]
	v_add_u32_e32 v8, vcc, s6, v4
	v_add_u32_e32 v6, vcc, s17, v4
	v_add_u32_e32 v10, vcc, s7, v4
	v_add_u32_e32 v12, vcc, s19, v4
	v_add_u32_e32 v15, vcc, s10, v13
	v_mov_b32_e32 v7, s11
	v_addc_u32_e32 v16, vcc, v7, v14, vcc
	v_ashrrev_i32_e32 v7, 31, v6
	v_lshlrev_b64 v[5:6], 2, v[6:7]
	v_ashrrev_i32_e32 v9, 31, v8
	v_mov_b32_e32 v11, s11
	v_add_u32_e32 v5, vcc, s10, v5
	v_lshlrev_b64 v[7:8], 2, v[8:9]
	v_addc_u32_e32 v6, vcc, v11, v6, vcc
	v_ashrrev_i32_e32 v11, 31, v10
	v_mov_b32_e32 v17, s11
	v_add_u32_e32 v7, vcc, s10, v7
	v_lshlrev_b64 v[10:11], 2, v[10:11]
	v_addc_u32_e32 v8, vcc, v17, v8, vcc
	v_add_u32_e32 v9, vcc, s21, v4
	v_add_u32_e32 v17, vcc, s10, v10
	v_mov_b32_e32 v18, s11
	v_ashrrev_i32_e32 v13, 31, v12
	v_addc_u32_e32 v18, vcc, v18, v11, vcc
	v_lshlrev_b64 v[11:12], 2, v[12:13]
	v_ashrrev_i32_e32 v10, 31, v9
	v_mov_b32_e32 v14, s11
	v_add_u32_e32 v11, vcc, s10, v11
	v_lshlrev_b64 v[9:10], 2, v[9:10]
	v_addc_u32_e32 v12, vcc, v14, v12, vcc
	v_mov_b32_e32 v19, s11
	v_add_u32_e32 v9, vcc, s10, v9
	v_addc_u32_e32 v10, vcc, v19, v10, vcc
	v_add_u32_e32 v13, vcc, s22, v4
	v_ashrrev_i32_e32 v14, 31, v13
	v_lshlrev_b64 v[13:14], 2, v[13:14]
	flat_load_dword v15, v[15:16]
	flat_load_dword v16, v[5:6]
	v_add_u32_e32 v13, vcc, s10, v13
	v_addc_u32_e32 v14, vcc, v19, v14, vcc
	v_add_u32_e32 v19, vcc, s23, v4
	v_ashrrev_i32_e32 v20, 31, v19
	v_lshlrev_b64 v[19:20], 2, v[19:20]
	v_mov_b32_e32 v21, s11
	v_add_u32_e32 v19, vcc, s10, v19
	v_addc_u32_e32 v20, vcc, v21, v20, vcc
	ds_read2_b32 v[5:6], v3 offset0:2 offset1:3
	flat_load_dword v21, v[7:8]
	flat_load_dword v17, v[17:18]
	flat_load_dword v18, v[11:12]
	flat_load_dword v22, v[9:10]
	flat_load_dword v13, v[13:14]
	flat_load_dword v14, v[19:20]
	ds_read2_b32 v[7:8], v3 offset0:4 offset1:5
	ds_read2_b32 v[9:10], v3 offset1:1
	ds_read2_b32 v[11:12], v3 offset0:6 offset1:7
	s_add_i32 s24, s24, 8
	v_add_u32_e32 v3, vcc, 32, v3
	v_add_u32_e32 v4, vcc, s5, v4
	s_cmp_eq_u32 s3, s24
	s_waitcnt vmcnt(7) lgkmcnt(1)
	v_sub_f32_e32 v9, v15, v9
	v_mac_f32_e32 v2, v9, v9
	s_waitcnt vmcnt(6)
	v_sub_f32_e32 v9, v16, v10
	v_mac_f32_e32 v2, v9, v9
	s_waitcnt vmcnt(5)
	v_sub_f32_e32 v5, v21, v5
	s_waitcnt vmcnt(4)
	v_sub_f32_e32 v6, v17, v6
	v_mac_f32_e32 v2, v5, v5
	s_waitcnt vmcnt(3)
	v_sub_f32_e32 v7, v18, v7
	v_mac_f32_e32 v2, v6, v6
	s_waitcnt vmcnt(2)
	v_sub_f32_e32 v8, v22, v8
	v_mac_f32_e32 v2, v7, v7
	s_waitcnt vmcnt(1) lgkmcnt(0)
	v_sub_f32_e32 v10, v13, v11
	v_mac_f32_e32 v2, v8, v8
	s_waitcnt vmcnt(0)
	v_sub_f32_e32 v11, v14, v12
	v_mac_f32_e32 v2, v10, v10
	v_mac_f32_e32 v2, v11, v11
	s_cbranch_scc0 BB1_11
; %bb.12:                               ; %Flow104
	s_and_b32 s5, s18, 7
	s_cmp_eq_u32 s5, 0
	s_cbranch_scc0 BB1_14
	s_branch BB1_16
BB1_13:
	s_mov_b32 s3, 0
	s_and_b32 s5, s18, 7
	s_cmp_eq_u32 s5, 0
	s_cbranch_scc1 BB1_16
BB1_14:                                 ; %.preheader.preheader
	s_mul_i32 s6, s3, s17
	s_add_i32 s4, s20, s4
	s_lshl_b32 s3, s3, 2
	s_add_i32 s4, s4, s6
	v_add_u32_e32 v3, vcc, s4, v0
	s_add_i32 s3, s16, s3
BB1_15:                                 ; %.preheader
                                        ; =>This Inner Loop Header: Depth=1
	v_ashrrev_i32_e32 v4, 31, v3
	v_lshlrev_b64 v[4:5], 2, v[3:4]
	v_add_u32_e32 v3, vcc, s17, v3
	v_mov_b32_e32 v0, s11
	v_add_u32_e32 v4, vcc, s10, v4
	v_addc_u32_e32 v5, vcc, v0, v5, vcc
	flat_load_dword v0, v[4:5]
	v_mov_b32_e32 v6, s3
	ds_read_b32 v4, v6
	s_add_i32 s5, s5, -1
	s_add_i32 s3, s3, 4
	s_cmp_lg_u32 s5, 0
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_sub_f32_e32 v0, v0, v4
	v_mac_f32_e32 v2, v0, v0
	s_cbranch_scc1 BB1_15
BB1_16:                                 ; %.loopexit
	v_mad_i64_i32 v[5:6], s[4:5], v1, 24, s[8:9]
	s_add_i32 s3, s2, 1
	v_mul_lo_u32 v4, s3, v1
	v_ashrrev_i32_e32 v0, 31, v1
	v_add_u32_e32 v7, vcc, 16, v5
	v_addc_u32_e32 v8, vcc, 0, v6, vcc
	flat_load_dword v5, v[5:6]
	flat_load_dword v3, v[7:8]
	s_waitcnt vmcnt(1) lgkmcnt(1)
	v_mul_f32_e32 v2, v2, v5
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_cmp_nlt_f32_e32 vcc, v2, v3
	s_and_saveexec_b64 s[4:5], vcc
	s_xor_b64 s[4:5], exec, s[4:5]
	s_cbranch_execz BB1_18
; %bb.17:
	v_mad_i64_i32 v[5:6], s[6:7], v1, 24, s[8:9]
	v_mov_b32_e32 v7, s15
	v_mov_b32_e32 v9, s13
	v_sub_f32_e32 v8, v3, v2
	v_add_u32_e32 v5, vcc, 8, v5
	v_addc_u32_e32 v6, vcc, 0, v6, vcc
	flat_load_dword v6, v[5:6]
	v_mov_b32_e32 v5, 0
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_ashrrev_i64 v[5:6], 30, v[5:6]
	v_add_u32_e32 v5, vcc, s14, v5
	v_addc_u32_e32 v6, vcc, v7, v6, vcc
	flat_load_dword v5, v[5:6]
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_add_u32_e32 v5, vcc, v5, v4
	v_ashrrev_i32_e32 v6, 31, v5
	v_lshlrev_b64 v[5:6], 2, v[5:6]
	v_add_u32_e32 v5, vcc, s12, v5
	v_addc_u32_e32 v6, vcc, v9, v6, vcc
	flat_load_dword v7, v[5:6]
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_add_f32_e32 v7, v8, v7
	flat_store_dword v[5:6], v7
BB1_18:                                 ; %Flow
	s_or_saveexec_b64 s[4:5], s[4:5]
	s_xor_b64 exec, exec, s[4:5]
	s_cbranch_execz BB1_20
; %bb.19:
	v_mov_b32_e32 v6, s1
	v_add_u32_e32 v5, vcc, s0, v1
	v_addc_u32_e32 v6, vcc, v6, v0, vcc
	v_mov_b32_e32 v0, 49
	flat_store_byte v[5:6], v0
	v_add_u32_e32 v0, vcc, s2, v4
	v_ashrrev_i32_e32 v1, 31, v0
	v_lshlrev_b64 v[0:1], 2, v[0:1]
	v_sub_f32_e32 v2, v2, v3
	v_mov_b32_e32 v3, s13
	v_add_u32_e32 v0, vcc, s12, v0
	v_addc_u32_e32 v1, vcc, v3, v1, vcc
	flat_store_dword v[0:1], v2
BB1_20:
	s_endpgm
.Lfunc_end1:
	.size	pgain_kernel, .Lfunc_end1-pgain_kernel
                                        ; -- End function
	.section	.AMDGPU.csdata
; Kernel info:
; codeLenInByte = 1620
; NumSgprs: 48
; NumVgprs: 23
; ScratchSize: 0
; MemoryBound: 0
; FloatMode: 192
; IeeeMode: 1
; LDSByteSize: 0 bytes/workgroup (compile time only)
; SGPRBlocks: 5
; VGPRBlocks: 5
; NumSGPRsForWavesPerEU: 48
; NumVGPRsForWavesPerEU: 23
; Occupancy: 10
; WaveLimiterHint : 1
; COMPUTE_PGM_RSRC2:USER_SGPR: 8
; COMPUTE_PGM_RSRC2:TRAP_HANDLER: 0
; COMPUTE_PGM_RSRC2:TGID_X_EN: 1
; COMPUTE_PGM_RSRC2:TGID_Y_EN: 0
; COMPUTE_PGM_RSRC2:TGID_Z_EN: 0
; COMPUTE_PGM_RSRC2:TIDIG_COMP_CNT: 0
	.ident	"clang version 11.0.0 (/src/external/llvm-project/clang 0383ad1cfb0a8e05b0a020e8632400194628b243)"
	.section	".note.GNU-stack"
	.addrsig
	.amd_amdgpu_isa "amdgcn-amd-amdhsa--gfx803"
	.amd_amdgpu_hsa_metadata
---
Version:         [ 1, 0 ]
Kernels:
  - Name:            memset_kernel
    SymbolName:      'memset_kernel@kd'
    Language:        OpenCL C
    LanguageVersion: [ 1, 2 ]
    Args:
      - Name:            mem_d
        TypeName:        'char*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I8
        AddrSpaceQual:   Global
        AccQual:         Default
      - Name:            val
        TypeName:        short
        Size:            2
        Align:           2
        ValueKind:       ByValue
        ValueType:       I16
        AccQual:         Default
      - Name:            number_bytes
        TypeName:        int
        Size:            4
        Align:           4
        ValueKind:       ByValue
        ValueType:       I32
        AccQual:         Default
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetX
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetY
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetZ
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenMultiGridSyncArg
        ValueType:       I8
        AddrSpaceQual:   Global
    CodeProps:
      KernargSegmentSize: 72
      GroupSegmentFixedSize: 0
      PrivateSegmentFixedSize: 0
      KernargSegmentAlign: 8
      WavefrontSize:   64
      NumSGPRs:        11
      NumVGPRs:        3
      MaxFlatWorkGroupSize: 256
  - Name:            pgain_kernel
    SymbolName:      'pgain_kernel@kd'
    Language:        OpenCL C
    LanguageVersion: [ 1, 2 ]
    Args:
      - Name:            p
        TypeName:        'Point_Struct*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       Struct
        AddrSpaceQual:   Global
        AccQual:         Default
      - Name:            coord_d
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         Default
      - Name:            work_mem_d
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         Default
      - Name:            center_table_d
        TypeName:        'int*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I32
        AddrSpaceQual:   Global
        AccQual:         Default
      - Name:            switch_membership_d
        TypeName:        'char*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I8
        AddrSpaceQual:   Global
        AccQual:         Default
      - Name:            coord_s
        TypeName:        'float*'
        Size:            4
        Align:           4
        ValueKind:       DynamicSharedPointer
        ValueType:       F32
        PointeeAlign:    4
        AddrSpaceQual:   Local
        AccQual:         Default
      - Name:            num
        TypeName:        int
        Size:            4
        Align:           4
        ValueKind:       ByValue
        ValueType:       I32
        AccQual:         Default
      - Name:            dim
        TypeName:        int
        Size:            4
        Align:           4
        ValueKind:       ByValue
        ValueType:       I32
        AccQual:         Default
      - Name:            x
        TypeName:        long
        Size:            8
        Align:           8
        ValueKind:       ByValue
        ValueType:       I64
        AccQual:         Default
      - Name:            K
        TypeName:        int
        Size:            4
        Align:           4
        ValueKind:       ByValue
        ValueType:       I32
        AccQual:         Default
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetX
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetY
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetZ
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenMultiGridSyncArg
        ValueType:       I8
        AddrSpaceQual:   Global
    CodeProps:
      KernargSegmentSize: 128
      GroupSegmentFixedSize: 0
      PrivateSegmentFixedSize: 0
      KernargSegmentAlign: 8
      WavefrontSize:   64
      NumSGPRs:        48
      NumVGPRs:        23
      MaxFlatWorkGroupSize: 256
...

	.end_amd_amdgpu_hsa_metadata
