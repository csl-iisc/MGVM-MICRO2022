; ModuleID = 'native/mergesort.cl'
source_filename = "native/mergesort.cl"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: norecurse nounwind readnone
define hidden <4 x float> @sortElem(<4 x float> %0) local_unnamed_addr #0 {
  %2 = extractelement <4 x float> %0, i64 0
  %3 = extractelement <4 x float> %0, i64 1
  %4 = fcmp ogt float %2, %3
  %5 = select i1 %4, float %3, float %2
  %6 = fcmp ogt float %3, %2
  %7 = select i1 %6, float %3, float %2
  %8 = extractelement <4 x float> %0, i64 2
  %9 = extractelement <4 x float> %0, i64 3
  %10 = fcmp ogt float %8, %9
  %11 = select i1 %10, float %9, float %8
  %12 = fcmp ogt float %9, %8
  %13 = select i1 %12, float %9, float %8
  %14 = fcmp ogt float %5, %11
  %15 = select i1 %14, float %11, float %5
  %16 = fcmp ogt float %7, %13
  %17 = select i1 %16, float %13, float %7
  %18 = fcmp ogt float %11, %5
  %19 = select i1 %18, float %11, float %5
  %20 = fcmp ogt float %13, %7
  %21 = select i1 %20, float %13, float %7
  %22 = insertelement <4 x float> undef, float %15, i64 0
  %23 = fcmp ogt float %17, %19
  %24 = select i1 %23, float %19, float %17
  %25 = insertelement <4 x float> %22, float %24, i64 1
  %26 = fcmp ogt float %19, %17
  %27 = select i1 %26, float %19, float %17
  %28 = insertelement <4 x float> %25, float %27, i64 2
  %29 = insertelement <4 x float> %28, float %21, i64 3
  ret <4 x float> %29
}

; Function Attrs: norecurse nounwind readnone
define hidden <4 x float> @getLowest(<4 x float> %0, <4 x float> %1) local_unnamed_addr #0 {
  %3 = extractelement <4 x float> %0, i64 0
  %4 = extractelement <4 x float> %1, i64 3
  %5 = fcmp olt float %3, %4
  %6 = select i1 %5, float %3, float %4
  %7 = insertelement <4 x float> undef, float %6, i64 0
  %8 = extractelement <4 x float> %0, i64 1
  %9 = extractelement <4 x float> %1, i64 2
  %10 = fcmp olt float %8, %9
  %11 = select i1 %10, float %8, float %9
  %12 = insertelement <4 x float> %7, float %11, i64 1
  %13 = extractelement <4 x float> %0, i64 2
  %14 = extractelement <4 x float> %1, i64 1
  %15 = fcmp olt float %13, %14
  %16 = select i1 %15, float %13, float %14
  %17 = insertelement <4 x float> %12, float %16, i64 2
  %18 = extractelement <4 x float> %0, i64 3
  %19 = extractelement <4 x float> %1, i64 0
  %20 = fcmp olt float %18, %19
  %21 = select i1 %20, float %18, float %19
  %22 = insertelement <4 x float> %17, float %21, i64 3
  ret <4 x float> %22
}

; Function Attrs: norecurse nounwind readnone
define hidden <4 x float> @getHighest(<4 x float> %0, <4 x float> %1) local_unnamed_addr #0 {
  %3 = extractelement <4 x float> %0, i64 3
  %4 = extractelement <4 x float> %1, i64 0
  %5 = fcmp oge float %3, %4
  %6 = select i1 %5, float %3, float %4
  %7 = insertelement <4 x float> undef, float %6, i64 0
  %8 = extractelement <4 x float> %0, i64 2
  %9 = extractelement <4 x float> %1, i64 1
  %10 = fcmp oge float %8, %9
  %11 = select i1 %10, float %8, float %9
  %12 = insertelement <4 x float> %7, float %11, i64 1
  %13 = extractelement <4 x float> %0, i64 1
  %14 = extractelement <4 x float> %1, i64 2
  %15 = fcmp oge float %13, %14
  %16 = select i1 %15, float %13, float %14
  %17 = insertelement <4 x float> %12, float %16, i64 2
  %18 = extractelement <4 x float> %0, i64 0
  %19 = extractelement <4 x float> %1, i64 3
  %20 = fcmp oge float %18, %19
  %21 = select i1 %20, float %18, float %19
  %22 = insertelement <4 x float> %17, float %21, i64 3
  ret <4 x float> %22
}

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @mergeSortFirst(<4 x float> addrspace(1)* nocapture readonly %0, <4 x float> addrspace(1)* nocapture %1, i32 %2) local_unnamed_addr #1 !kernel_arg_addr_space !4 !kernel_arg_access_qual !5 !kernel_arg_type !6 !kernel_arg_base_type !7 !kernel_arg_type_qual !8 !kernel_arg_name !9 {
  %4 = tail call i64 @_Z12get_group_idj(i32 0) #4
  %5 = shl i64 %4, 32
  %6 = ashr exact i64 %5, 32
  %7 = tail call i64 @_Z14get_local_sizej(i32 0) #4
  %8 = mul i64 %6, %7
  %9 = tail call i64 @_Z12get_local_idj(i32 0) #4
  %10 = add i64 %8, %9
  %11 = sdiv i32 %2, 4
  %12 = sext i32 %11 to i64
  %13 = icmp ult i64 %10, %12
  br i1 %13, label %14, label %46

14:                                               ; preds = %3
  %15 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %0, i64 %10
  %16 = load <4 x float>, <4 x float> addrspace(1)* %15, align 16, !tbaa !10
  %17 = extractelement <4 x float> %16, i64 0
  %18 = extractelement <4 x float> %16, i64 1
  %19 = fcmp ogt float %17, %18
  %20 = select i1 %19, float %18, float %17
  %21 = fcmp ogt float %18, %17
  %22 = select i1 %21, float %18, float %17
  %23 = extractelement <4 x float> %16, i64 2
  %24 = extractelement <4 x float> %16, i64 3
  %25 = fcmp ogt float %23, %24
  %26 = select i1 %25, float %24, float %23
  %27 = fcmp ogt float %24, %23
  %28 = select i1 %27, float %24, float %23
  %29 = fcmp ogt float %20, %26
  %30 = select i1 %29, float %26, float %20
  %31 = fcmp ogt float %22, %28
  %32 = select i1 %31, float %28, float %22
  %33 = fcmp ogt float %26, %20
  %34 = select i1 %33, float %26, float %20
  %35 = fcmp ogt float %28, %22
  %36 = select i1 %35, float %28, float %22
  %37 = insertelement <4 x float> undef, float %30, i64 0
  %38 = fcmp ogt float %32, %34
  %39 = select i1 %38, float %34, float %32
  %40 = insertelement <4 x float> %37, float %39, i64 1
  %41 = fcmp ogt float %34, %32
  %42 = select i1 %41, float %34, float %32
  %43 = insertelement <4 x float> %40, float %42, i64 2
  %44 = insertelement <4 x float> %43, float %36, i64 3
  %45 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %1, i64 %10
  store <4 x float> %44, <4 x float> addrspace(1)* %45, align 16, !tbaa !10
  br label %46

46:                                               ; preds = %14, %3
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z12get_group_idj(i32) local_unnamed_addr #2

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z14get_local_sizej(i32) local_unnamed_addr #2

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z12get_local_idj(i32) local_unnamed_addr #2

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @mergeSortPass(<4 x float> addrspace(1)* nocapture readonly %0, <4 x float> addrspace(1)* nocapture %1, i32 %2, i32 %3, i32 addrspace(1)* nocapture readonly %4) local_unnamed_addr #1 !kernel_arg_addr_space !13 !kernel_arg_access_qual !14 !kernel_arg_type !15 !kernel_arg_base_type !16 !kernel_arg_type_qual !17 !kernel_arg_name !18 {
  %6 = tail call i64 @_Z13get_global_idj(i32 0) #4
  %7 = trunc i64 %6 to i32
  %8 = sdiv i32 %7, %3
  %9 = icmp sgt i32 %8, 1023
  br i1 %9, label %186, label %10

10:                                               ; preds = %5
  %11 = mul nsw i32 %8, %3
  %12 = sub nsw i32 %7, %11
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %13
  %15 = load i32, i32 addrspace(1)* %14, align 4, !tbaa !19
  %16 = mul nsw i32 %12, %2
  %17 = add nsw i32 %15, %16
  %18 = sdiv i32 %2, 2
  %19 = add nsw i32 %17, %18
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %1, i64 %20
  %22 = add nsw i32 %8, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i32, i32 addrspace(1)* %4, i64 %23
  %25 = load i32, i32 addrspace(1)* %24, align 4, !tbaa !19
  %26 = icmp slt i32 %17, %25
  br i1 %26, label %27, label %186

27:                                               ; preds = %10
  %28 = icmp slt i32 %19, %25
  br i1 %28, label %41, label %29

29:                                               ; preds = %27, %29
  %30 = phi i32 [ %37, %29 ], [ 0, %27 ]
  %31 = add nsw i32 %30, %17
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %0, i64 %32
  %34 = load <4 x float>, <4 x float> addrspace(1)* %33, align 16, !tbaa !10
  %35 = zext i32 %30 to i64
  %36 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %21, i64 %35
  store <4 x float> %34, <4 x float> addrspace(1)* %36, align 16, !tbaa !10
  %37 = add nuw nsw i32 %30, 1
  %38 = load i32, i32 addrspace(1)* %24, align 4, !tbaa !19
  %39 = sub nsw i32 %38, %17
  %40 = icmp slt i32 %37, %39
  br i1 %40, label %29, label %186

41:                                               ; preds = %27
  %42 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %0, i64 %20
  %43 = load <4 x float>, <4 x float> addrspace(1)* %42, align 16, !tbaa !10
  %44 = sext i32 %19 to i64
  %45 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %0, i64 %44
  %46 = load <4 x float>, <4 x float> addrspace(1)* %45, align 16, !tbaa !10
  br label %47

47:                                               ; preds = %162, %41
  %48 = phi <4 x float> [ %46, %41 ], [ %163, %162 ]
  %49 = phi <4 x float> [ %43, %41 ], [ %164, %162 ]
  %50 = phi i32 [ 0, %41 ], [ %141, %162 ]
  %51 = phi i32 [ 0, %41 ], [ %165, %162 ]
  %52 = phi i32 [ 0, %41 ], [ %166, %162 ]
  %53 = add i32 %51, 1
  %54 = add i32 %53, %19
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %0, i64 %55
  %57 = icmp slt i32 %53, %18
  br label %58

58:                                               ; preds = %149, %47
  %59 = phi <4 x float> [ %48, %47 ], [ %140, %149 ]
  %60 = phi <4 x float> [ %49, %47 ], [ %67, %149 ]
  %61 = phi i32 [ %50, %47 ], [ %141, %149 ]
  %62 = phi i32 [ %52, %47 ], [ %63, %149 ]
  %63 = add i32 %62, 1
  %64 = add i32 %63, %17
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %0, i64 %65
  %67 = load <4 x float>, <4 x float> addrspace(1)* %66, align 16, !tbaa !10
  %68 = load <4 x float>, <4 x float> addrspace(1)* %56, align 16, !tbaa !10
  %69 = extractelement <4 x float> %60, i64 0
  %70 = extractelement <4 x float> %59, i64 3
  %71 = fcmp olt float %69, %70
  %72 = select i1 %71, float %69, float %70
  %73 = extractelement <4 x float> %60, i64 1
  %74 = extractelement <4 x float> %59, i64 2
  %75 = fcmp olt float %73, %74
  %76 = select i1 %75, float %73, float %74
  %77 = extractelement <4 x float> %60, i64 2
  %78 = extractelement <4 x float> %59, i64 1
  %79 = fcmp olt float %77, %78
  %80 = select i1 %79, float %77, float %78
  %81 = extractelement <4 x float> %60, i64 3
  %82 = extractelement <4 x float> %59, i64 0
  %83 = fcmp olt float %81, %82
  %84 = select i1 %83, float %81, float %82
  %85 = fcmp oge float %81, %82
  %86 = select i1 %85, float %81, float %82
  %87 = fcmp oge float %77, %78
  %88 = select i1 %87, float %77, float %78
  %89 = fcmp oge float %73, %74
  %90 = select i1 %89, float %73, float %74
  %91 = fcmp oge float %69, %70
  %92 = select i1 %91, float %69, float %70
  %93 = fcmp ogt float %72, %76
  %94 = select i1 %93, float %76, float %72
  %95 = fcmp ogt float %76, %72
  %96 = select i1 %95, float %76, float %72
  %97 = fcmp ogt float %80, %84
  %98 = select i1 %97, float %84, float %80
  %99 = fcmp ogt float %84, %80
  %100 = select i1 %99, float %84, float %80
  %101 = fcmp ogt float %94, %98
  %102 = select i1 %101, float %98, float %94
  %103 = fcmp ogt float %96, %100
  %104 = select i1 %103, float %100, float %96
  %105 = fcmp ogt float %98, %94
  %106 = select i1 %105, float %98, float %94
  %107 = fcmp ogt float %100, %96
  %108 = select i1 %107, float %100, float %96
  %109 = insertelement <4 x float> undef, float %102, i64 0
  %110 = fcmp ogt float %104, %106
  %111 = select i1 %110, float %106, float %104
  %112 = insertelement <4 x float> %109, float %111, i64 1
  %113 = fcmp ogt float %106, %104
  %114 = select i1 %113, float %106, float %104
  %115 = insertelement <4 x float> %112, float %114, i64 2
  %116 = insertelement <4 x float> %115, float %108, i64 3
  %117 = fcmp ogt float %86, %88
  %118 = select i1 %117, float %88, float %86
  %119 = fcmp ogt float %88, %86
  %120 = select i1 %119, float %88, float %86
  %121 = fcmp ogt float %90, %92
  %122 = select i1 %121, float %92, float %90
  %123 = fcmp ogt float %92, %90
  %124 = select i1 %123, float %92, float %90
  %125 = fcmp ogt float %118, %122
  %126 = select i1 %125, float %122, float %118
  %127 = fcmp ogt float %120, %124
  %128 = select i1 %127, float %124, float %120
  %129 = fcmp ogt float %122, %118
  %130 = select i1 %129, float %122, float %118
  %131 = fcmp ogt float %124, %120
  %132 = select i1 %131, float %124, float %120
  %133 = insertelement <4 x float> undef, float %126, i64 0
  %134 = fcmp ogt float %128, %130
  %135 = select i1 %134, float %130, float %128
  %136 = insertelement <4 x float> %133, float %135, i64 1
  %137 = fcmp ogt float %130, %128
  %138 = select i1 %137, float %130, float %128
  %139 = insertelement <4 x float> %136, float %138, i64 2
  %140 = insertelement <4 x float> %139, float %132, i64 3
  %141 = add nuw nsw i32 %61, 1
  %142 = zext i32 %61 to i64
  %143 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %21, i64 %142
  store <4 x float> %116, <4 x float> addrspace(1)* %143, align 16, !tbaa !10
  %144 = icmp slt i32 %63, %18
  br i1 %57, label %145, label %148

145:                                              ; preds = %58
  %146 = load i32, i32 addrspace(1)* %24, align 4, !tbaa !19
  %147 = icmp slt i32 %54, %146
  br i1 %144, label %150, label %167

148:                                              ; preds = %58
  br i1 %144, label %149, label %172

149:                                              ; preds = %148, %150
  br label %58

150:                                              ; preds = %145
  br i1 %147, label %151, label %149

151:                                              ; preds = %150
  %152 = insertelement <4 x float> undef, float %126, i64 0
  %153 = insertelement <4 x float> %152, float %135, i64 1
  %154 = insertelement <4 x float> %153, float %138, i64 2
  %155 = insertelement <4 x float> %154, float %132, i64 3
  %156 = extractelement <4 x float> %67, i64 0
  %157 = extractelement <4 x float> %68, i64 0
  %158 = fcmp olt float %156, %157
  %159 = select i1 %158, <4 x float> %67, <4 x float> %68
  %160 = select i1 %158, i32 %51, i32 %53
  %161 = select i1 %158, i32 %63, i32 %62
  br label %162

162:                                              ; preds = %151, %167
  %163 = phi <4 x float> [ %171, %167 ], [ %155, %151 ]
  %164 = phi <4 x float> [ %68, %167 ], [ %159, %151 ]
  %165 = phi i32 [ %53, %167 ], [ %160, %151 ]
  %166 = phi i32 [ %62, %167 ], [ %161, %151 ]
  br label %47

167:                                              ; preds = %145
  %168 = insertelement <4 x float> undef, float %126, i64 0
  %169 = insertelement <4 x float> %168, float %135, i64 1
  %170 = insertelement <4 x float> %169, float %138, i64 2
  %171 = insertelement <4 x float> %170, float %132, i64 3
  br i1 %147, label %162, label %177

172:                                              ; preds = %148
  %173 = insertelement <4 x float> undef, float %126, i64 0
  %174 = insertelement <4 x float> %173, float %135, i64 1
  %175 = insertelement <4 x float> %174, float %138, i64 2
  %176 = insertelement <4 x float> %175, float %132, i64 3
  br label %182

177:                                              ; preds = %167
  %178 = insertelement <4 x float> undef, float %126, i64 0
  %179 = insertelement <4 x float> %178, float %135, i64 1
  %180 = insertelement <4 x float> %179, float %138, i64 2
  %181 = insertelement <4 x float> %180, float %132, i64 3
  br label %182

182:                                              ; preds = %177, %172
  %183 = phi <4 x float> [ %181, %177 ], [ %176, %172 ]
  %184 = zext i32 %141 to i64
  %185 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %21, i64 %184
  store <4 x float> %183, <4 x float> addrspace(1)* %185, align 16, !tbaa !10
  br label %186

186:                                              ; preds = %29, %182, %10, %5
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z13get_global_idj(i32) local_unnamed_addr #2

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @mergepack(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture %1, i32 addrspace(4)* nocapture readonly %2, i32 addrspace(4)* nocapture readonly %3, i32 addrspace(4)* nocapture readonly %4) local_unnamed_addr #3 !kernel_arg_addr_space !21 !kernel_arg_access_qual !14 !kernel_arg_type !22 !kernel_arg_base_type !22 !kernel_arg_type_qual !23 !kernel_arg_name !24 {
  %6 = tail call i64 @_Z13get_global_idj(i32 0) #4
  %7 = trunc i64 %6 to i32
  %8 = tail call i64 @_Z12get_group_idj(i32 1) #4
  %9 = shl i64 %8, 32
  %10 = ashr exact i64 %9, 32
  %11 = getelementptr inbounds i32, i32 addrspace(4)* %4, i64 %10
  %12 = load i32, i32 addrspace(4)* %11, align 4, !tbaa !19
  %13 = add nsw i32 %12, %7
  %14 = add i64 %9, 4294967296
  %15 = ashr exact i64 %14, 32
  %16 = getelementptr inbounds i32, i32 addrspace(4)* %4, i64 %15
  %17 = load i32, i32 addrspace(4)* %16, align 4, !tbaa !19
  %18 = icmp slt i32 %13, %17
  br i1 %18, label %19, label %34

19:                                               ; preds = %5
  %20 = getelementptr inbounds i32, i32 addrspace(4)* %2, i64 %10
  %21 = load i32, i32 addrspace(4)* %20, align 4, !tbaa !19
  %22 = shl i32 %21, 2
  %23 = getelementptr inbounds i32, i32 addrspace(4)* %3, i64 %10
  %24 = load i32, i32 addrspace(4)* %23, align 4, !tbaa !19
  %25 = add i32 %24, %7
  %26 = add i32 %25, %22
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  %29 = bitcast float addrspace(1)* %28 to i32 addrspace(1)*
  %30 = load i32, i32 addrspace(1)* %29, align 4, !tbaa !25
  %31 = sext i32 %13 to i64
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %31
  %33 = bitcast float addrspace(1)* %32 to i32 addrspace(1)*
  store i32 %30, i32 addrspace(1)* %33, align 4, !tbaa !25
  br label %34

34:                                               ; preds = %5, %19
  ret void
}

attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="fiji" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { convergent nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="fiji" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="fiji" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { convergent nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="fiji" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { convergent nounwind readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 1, i32 2}
!3 = !{!"clang version 11.0.0 (/src/external/llvm-project/clang 0383ad1cfb0a8e05b0a020e8632400194628b243)"}
!4 = !{i32 1, i32 1, i32 0}
!5 = !{!"none", !"none", !"none"}
!6 = !{!"float4*", !"float4*", !"int"}
!7 = !{!"float __attribute__((ext_vector_type(4)))*", !"float __attribute__((ext_vector_type(4)))*", !"int"}
!8 = !{!"", !"", !""}
!9 = !{!"input", !"result", !"listsize"}
!10 = !{!11, !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C/C++ TBAA"}
!13 = !{i32 1, i32 1, i32 0, i32 0, i32 1}
!14 = !{!"none", !"none", !"none", !"none", !"none"}
!15 = !{!"float4*", !"float4*", !"int", !"int", !"int*"}
!16 = !{!"float __attribute__((ext_vector_type(4)))*", !"float __attribute__((ext_vector_type(4)))*", !"int", !"int", !"int*"}
!17 = !{!"", !"", !"", !"", !""}
!18 = !{!"input", !"result", !"nrElems", !"threadsPerDiv", !"constStartAddr"}
!19 = !{!20, !20, i64 0}
!20 = !{!"int", !11, i64 0}
!21 = !{i32 1, i32 1, i32 2, i32 2, i32 2}
!22 = !{!"float*", !"float*", !"int*", !"int*", !"int*"}
!23 = !{!"", !"", !"const", !"const", !"const"}
!24 = !{!"orig", !"result", !"constStartAddr", !"nullElems", !"finalStartAddr"}
!25 = !{!26, !26, i64 0}
!26 = !{!"float", !11, i64 0}
