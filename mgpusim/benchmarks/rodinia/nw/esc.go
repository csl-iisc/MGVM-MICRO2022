// Code generated by "esc -private -o esc.go -pkg nw ./kernels.hsaco"; DO NOT EDIT.

package nw

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    18616,
		modtime: 1592039480,
		compressed: `
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
AP//disJabhIAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
