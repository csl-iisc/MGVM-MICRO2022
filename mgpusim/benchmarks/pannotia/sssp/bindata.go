// Code generated by "esc -o bindata.go -pkg sssp -private kernels.hsaco"; DO NOT EDIT.

package sssp

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    18128,
		modtime: 1615699459,
		compressed: `
H4sIAAAAAAAC/+xcX2/cWBU/vnYc15kmQ1uWbFlpTbcoZelMZ5w/NXkhmYQGtEmbbqDbglaDM/ZMnHrs
wfZkE7TxJiXaZKVILGhBiAeKtC+shMQ+8AbqRMAHgBWPfdiXFTyAxMvymEG2752xp3GakhaSyD9p5ozP
Peeec32v77l3fOy3vjZ9DVHUGGDQ8DFQ3o9ccEwK/jwR0Jd9ngQcjEEKeGABgAnJddIdKko5zKewXhwm
L0YppNt6XSH/OulvuSgN67EQ72gNopTooSfUI2Zf/cRRmAPohf3zcPMTR2HhycGQ84mg7XiIXv5ClDIh
PQ7bH5+Z9MVJ33zeHw8Bn4HuVtsIb3xmcmr2W4Hs8wDQg/lyVamUjIxcVbzPgi1nMpXyspQbxPV+IADw
WDaTyfC3VMvWTGNUIPiOkL8s5ITX+VdUy1B1e5QXhIxwXa6qbRlBEOxadalY1YyiYjrFml63i3d9ed4r
nFupzpt6SGcgTnzsrjLgq0zLRqUuV9pGbtRUY2JamIiUtrz1vRSF1/3Scaviu+lhD1eNerVomW/YPGF8
c6WmRqQ0w2kVzmnfj6oPtYrGda1ijO5ZdEvW6+ormqGQ4sKKz2rrlko367Le1p5Uy3Jdd+Ldtsw34j0e
0Azn5YF4p6V4p6V4p6d0c17WC/VyWbXaFSiKNVeTSyrxP5A6RMtKpn5CW6bIjnxCm7Z8Qtu1cjLa9ZSc
+7qmKKoRGL9RLtuqc/vZm7jz7E18+9mYuG4a6gH7MLF8aMszdd3RpixNmVsxSuNW5UBeTJiKOmuZtdYK
wVvXyFZlTq1UVcMJHMznSCifssx6DZdd05ZVJRDI4eJZS1uSHTVeIFo7biNp2Wvyklq2TGJVEEaI2ev1
6tzU7Kt263zkpXbJrWjJIC6ZkZev6bLzmmndDbz2KxWHR/ZesS2pJce0ipqhOTGLtJDE/2JdFpjLn9C4
ErROPKGt047ZYtrbAximoh7xTUASxZMonkTx/zaKS7mjFsTzcUH86qFiuGzbWsXYP4oHMkkcT+J4EheT
uJhEpyQuHoe4OHSouKho5fL+UdGTSGJiEhP3a53tmLV9mjZvmnoS75N4n8T7xPIRjffSCYr32WyWf0z+
BQUA52m2lYeyhvMuzhP+cHC8hRM9LhH+VZyvgvlDhD8YHP+MatdPPuf9tI71NOKA845/+o/bzAv06D/f
/fsvN7/8+/c3u3CODN2RY4Ni/Ia4zAiI7OMhtH6B0P/0kCBBggQJEiRIkCBBguMBCu8LKD+7m24nosfg
B/BreNfP9Y7uiBZCv8/A6WhuOsOwzWazeRTbjwDteHukt2C7AU30tuflHwHtBHnu7I63neMQ92MOQPRl
AEQatlYXhbUHN2CrQaPeHQ7LXvL3fYwLNOuy8KOPfsEgv95TiHW5FCPSfay0hjh3jePEdeAlxpPhEJxC
aZfjOJHr4SWA2YfI74jZhwxAVx9i3N5USkR9vX4ZC4DuA7rwPWq7QffcW10U7j24CFuN+yx3gYMffnSP
RdCDOJdPp0TmbK90GnFuKp0WmbNnpDVq4wGug/coB8D0oX7Xq+v+uecu8J7+OQS9586Jqc8959vjAfh1
lhU3UilxrbdX2kinxbUzZyS6Z3t1kdnYrMF2gz/FiUwX0+8yu+/8rflOw2V2N120uwlefYCAQqzrnzca
STX/HNYeBpvR9QbA2v/186Tjfzxm/M+GfvdA97EZ/964TfvXNbvTj6+DP4SuCbpJ+9cERwfXAAIkUmjL
H3ef9cY/xe/g/ztc5I1nCMZ8FwKXYTgRunkJ0HurTQRu8+NPu1iAvwD1AdWNkMsyIFLdSPLGA+M/9FJ7
GDxss35k+3/sQP3PHPv5L43HRv8j8x8SaRTMf5/x+h/a/Q+h/qcR6yJgRJpmyZyGjuI88LT6//YJ6/9+
3P/CPv3/wiH63+MFz8FtNxD181V3cfdtDtfnjb11xLi+PQQuhZAL8N3QWEmQIEGCBAkSHAbkWfPcS2Tt
EqAf0y6yhsHP4fOtdVCAT3ebpkd/hfXJyuevL+1tb1oz7qrWqDA9PSnkxWwumxMuXbGt0hV12VEtQ9av
6PpSNVOzzEW15FzRdUVQ5JI4Xy6psiwpQ/JXcuLwVaUkySPKsFQWRyQ1f1Usqbmc+iWAki4bFWEpyJY6
SP2BwhNY2O9/FO9s/isf5Xdj/m0xyj+N+W928M9i/ntDUf7zmL8xEuW/iPkfSlH+F0nv5qL8ScIfhj3W
r+370QSLhD8Y5f/OXzx2twcCxpsx98F/EnMf/P2Y++C/ibkPDlnDdFTIKiuGvVKFbMWoZxdkewHwt8d3
LMg66rLjH8lVrQTZklmtqoYDWXul6sjzkLUXbMcKfgUUCoVccdD/Hva/R6BQyBdFKBRE/3uwOBh7o/yi
bpbkjtvlUZ6ilctRjmZoDuYc8v57cfLO9fGZb0w8rf8Du8O5AjHvkWjtbeDR8d4TUiPzCqHLoXmFCr0v
g8w3fQDw72bTJPpkXiH0codbHDx6nXSFysk8RGiuQ5/poC/ivAnUMe8ROrbndd/GQPhdIxD/fpK4CjJY
l4aOibbjvSFdHe3HrxGBEVxlx2UPNazfiDFP6Fdj8kRy4/h6ptpxIrVH/02FfQ/hw0JA7zzm/N2M0T+F
R/efHqP/nwAAAP//1qeBINBGAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
