// Code generated by "esc -o bindata.go -pkg color -private kernels.hsaco"; DO NOT EDIT.

package color

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    13888,
		modtime: 1617961623,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
