// Code generated by "esc -o esc.go -pkg gesummv -private kernels.hsaco"; DO NOT EDIT.

package gesummv

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9648,
		modtime: 1601875371,
		compressed: `
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
rI9afMr5m28TL5H46afE/xUAAP//aXa3LbAlAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
