// Code generated by "esc -o esc.go -pkg mm2 -private kernels.hsaco"; DO NOT EDIT.

package mm2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    13784,
		modtime: 1601825395,
		compressed: `
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
AAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
