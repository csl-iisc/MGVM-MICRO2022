// Code generated by "esc -o esc.go -pkg covariance -private kernels.hsaco"; DO NOT EDIT.

package covariance

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    14024,
		modtime: 1601654565,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
