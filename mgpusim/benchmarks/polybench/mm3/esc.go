// Code generated by "esc -o esc.go -pkg mm3 -private kernels.hsaco"; DO NOT EDIT.

package mm3

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    18024,
		modtime: 1601835463,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
