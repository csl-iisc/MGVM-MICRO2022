// Code generated by "esc -o esc.go -pkg doitgen -private kernels.hsaco"; DO NOT EDIT.

package doitgen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    13776,
		modtime: 1601285929,
		compressed: `
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
C7GXpWf3mTrZ/xsAAP//7KVaLtA1AAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
