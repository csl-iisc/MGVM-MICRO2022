// Code generated by "esc -o esc.go -pkg gemver -private kernels.hsaco"; DO NOT EDIT.

package gemver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    18040,
		modtime: 1601381590,
		compressed: `
H4sIAAAAAAAC/+xczW/b2BEfPlIkRSnadPuBzfYQIruFs4tYkSjFK/vSSPbaXaydOOska2+x8NLis6yE
olSKcu0C4SquE/gQYD8uC/TQXHos+hcUlrfYwx6D3Ark0EP30EOBHtoeq+KRjxKpmLHdJM2HOAA15Myb
xxnyN08j8fF9+u7sNGKY80CJhb8AQ3Yy7rGn2Jh0+duOrAAinIckSMADAOdrN8j3mCAXqZyhdmH0hzeC
HI737WI+/wb5P4Ug99vxEO5oA4Lcs0NHtPPi++A7S+MOYef3j9Cl7yyNh6MT511PBH3HffyeHOScz06k
5y/OTTnNvXvzYwcPrpwDoRebJyvOTc3MX3HbngCABJWrNa1SNkbVmka2taY6OlpZ3ShkcrTfeRlAom1H
R0elq9hsVuvGhOzRz+XsGTkjfyy9j00D680JSZZH5QtqDffbyLJcwbV1bC5fdxplJSJa2Kyt1HVfy5Fg
o/PXtRGn4axqVFpqpd/hxQY2JmflyYC255njkSJ/7GiLZsVxidA+bhUlb+/yZgMH1CNTxcvF5ctL8+++
PdJrtVD9VbCDQk9V1KsVY2Jf1VVVb+H3q4bmqWf0+oqql1qrq9gMtiJueK2mc0q/d00zFxpqGV9qqfpE
r4u+vlz2NC5N4VW1pVvhoV/NDnHsyvDGfmWI7/uVIb7vRnjoVcMKjzgfHnE+POLSpiMKD/Y9f7AHBfOE
bsPPqpqGDfdKXlxdbWJr8REOjuWf/vmXnvH5P3oG579QNx6Fi8IhcyDy6pl5NdfSreqMWdUWNo1y0aw8
toeTdQ3Pm/VGr1QjxaRqVhZwpYYNy3U+m/EAOWPWWw2qm65uYM1tkKHqebO6rlo4vEGwdxq/5+mH6jpe
NeveWWW5lwcXWrWFmfkPmr1rlS30NVcDmnGqmFM3pnXV+rBuXneddvpUzo0dokpWDlMlK1GV/FS/NReH
N/Sl4Q39o+ENfQVbanj0veD/7/Xi9FHqxaj4jYrfqPiNvHp5it/xseet9s2H1b5Z5QkUv7nDFL+5qPiN
it+nE/ovhzd0VW+sRSVgVAJGJWBUbEVePT8lYKHwwpSAhQMrwHQ6LYXNj2AA4HWW780TeRP1p1848px7
/AMqP+nJx+h8Eqbfj7e93p990SDHf0x/9S3ZOumvvuV8cywYOg2D3c+x4PyE4KESPMxBRBFFFFFEEUUU
UUQRRRTR/07ebxPGmd3N9ieih9AW/B4+jwMkIPhTa823/yrEg3PTOY7vdrvd5zH+XwPaO00iZ6W9jHMt
0B753fYp3OlAl7nteP05fCYy4pdxiH8pAihxhJQkgJJCSEFo5wbAN/cQuYrX2rdB3t5VYKfDotSeM1ee
kfZkAGgjzmZY3ubgi/u/5ZDT/yuIt1NiUmETqQKwvI2oDmD+AQ8gJlDKlrikIgipApXxMZSyOVFUhIRU
EODWfcZ5GWL+AQcQO4ZEO8khhRO4gsDwyl1ePMXCZ/e3eLdPBgDFUcoWeVCEOHL6JC7+grnTicU4STzG
nWnAnQ4bI040HrjvDtzsALRf2u2o+C8R/MPD+P/Et5+C5IuDf8Q7+GSBd/KA4LLkywGG5gDBP8E+kI2V
7ATs3Lgmt3dzBOvgYp1g3I/ju4BOkT5YJNqI4xRO4B3MIQAucZPrnIBbHY7Z2k3A9u5dKXkqTrAqIWDR
cTshSQpCKZtBP7Lh1aRC7ASSEz/s5wL3NXcTbaM222a3uLbQIdiVkkmJ/554huAXcQB/697qAOkXEAhI
snkAJcb2sA/EBuLg4N396+flxvvj4r8Ygv/FAP7FFwb/BPevOd8Dbh4QvP7Jh3+2y7r4Z138I+AUhtu5
geCbewwwgK5t3Uby9u5bzpgv9cb8404+gI1YZAPJB3DH/DiS7Bgi3wOgsCwqsGQMp2M+uRX+MVvkeSUW
FwsSkmyiZwGEBEo6+zGAGPM1c1PaltrbPK8k2omttigWmLbQIeM5pJISwTaf4M54Y/nfnVwg+I4ooogi
iiiiiIaZvHfN751yeYIev0Z5jPI2fQ/fq/rSlP/rP9064Rmq9555Lr6x//lmq8Z1bE7Is7NTcjabzqQz
8umzTbN8Fm9Y2DRU/ayur9dGG2b9Gi5bZ3VdkzHO4zxeWVG1crmA1Wy+jMfHcS6PtVxWXcll8Xi+oLyj
lt8CKOuqUZHX3Sl5h+nfNTjCGR71Pwq5mrISlAtUvpMPyo9R+V8H5N+n8uPngvITVP67d4Lyk1T+jwH5
T7y7mwnKJzz5wMPki558LCj/gnwgob9+ASUt5Hl6M+R5+lbI83RIG3ULQ1rbNJqbNUhXjFZ6TW2uAf0k
csuEtIU3LOdIrVXLkC7XazVsWJBubtYsdQXSzbWmZbp7LodSKbOsQKmUXc45n3nn8xyUSoojV5ZzAw/f
39TrZVUfeAS/nzC3n/CgZ/fLU0sXinPvTT65/+0E3zIPYes99H6DwcO4TPjMvPz3+Ce+/Gd861p448Ir
APDvbrfu2Xv57/HTA26J8DCeYz69N14shthzA/wknU+BBsYnj6f3zc8+jfjXBIHwdUTCOhiltr05HSHr
e8QG4qfLfThpwMBD6QkNat8JOb3Hf+q/9z7KFF0+z/TH88Q+928mZD5Ku+TypQOu36UQ+z9T+98cYP/f
AAAA//9XCxU8eEYAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
