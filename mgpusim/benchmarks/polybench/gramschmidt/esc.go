// Code generated by "esc -o esc.go -pkg gramschmidt -private kernels.hsaco"; DO NOT EDIT.

package gramschmidt

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    18128,
		modtime: 1601391561,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
