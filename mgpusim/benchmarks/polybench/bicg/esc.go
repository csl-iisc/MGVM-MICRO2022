// Code generated by "esc -private -o esc.go -pkg bicg ./kernels.hsaco"; DO NOT EDIT.

package bicg

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    13608,
		modtime: 1592039480,
		compressed: `
H4sIAAAAAAAC/+xb32/T1hc/vnEc4/abb1mFBBsbhm3qxIiVmA5F1aaRtLRDtCVQBusmVLmxkwYSO3Mc
1CBhws/1AWk/niYexh73sD9hWsr79gDPfdgekLZpD7xsj8tk+97ENjUtEhtDvR8pOfb5cc85PqfkYPte
PjI9iRjmMGDE4CdgnAPROyeCN2SP7nd5WeDhMAyCABwAsD69MF1lgpTHfAbbReHHHUEKQ327uC++MP09
FqR+OydWSGN+iNYhSIkdekI7kt/JB5bKbsLOH5+DEw8slYMnB0uuJ4J+4D66MhykrM+Ox/5zMxOuOqnN
S24/eHwWEr3cCC83MzFVeN/T3QsAA5iv1NRyUU8pNdX5LDUUh5QrF4vVVLm0nE0fJP6HAQRsk0qlhNOa
2agY+phI8JGYOSCmxbPCMc3UtWqjLxFEMSXOKjWtzxJFcbFSLHuqGcE5n2vVFo2qT23Ep3H4vDriak0r
ermplPtLHa9r+vi0OB6Q9oJzg5LFs640Z5YbgRAEj6wTXE4gR6dadS0gHpnIncotnJovHNk/0tOaq1wM
LpDtiXLVSlkfW1d0Wqk2tWMVXSXiqaqxqFTzzVJJM4NaThhEa/Kg3F9dVc25ulLUTjSV6lhvib68WCQS
DxNaSWlWrejU61s39Y+3bur6cnTuFd2KTnk0OuXR6JTzLZcVne1Rf7ZPnk3rOc7mKXXVexVV1XSvMY6X
Sg3N+uAxAR4a/ef9zz9j/x8+A/+zhv64vshu8k+aRrXZqMYNVSuYRr33S4+tnEFCMctzWrmm6ZYXdzaN
hVOm0axj0WRlWVM9OREXzMoFxdKiFYKL48xJvGeUC1rJNIhTUez12myzNjdVONkfSjI+yemghLiaUZYn
q4p1xjDPe1G7i8pvHdpoypI3nLJkOmX9a7+35tZNvUGnLDpl0SmLTll0nqFT1nM3ZUmSJETd12N8nxcj
ZBQUFBQUFBQUFBSbBYMfETPu093YhgNlHr6Fz9xnvcGRteA7ToZkLMty3W63+1/MHzFolXUz51Z3AsA1
4FZFALgMtzpsN3bTiZqP8V/wADICJANauXROvPr9m7DSiSFhdQgA2ghsBJ/f/woQMFfYjmO7DfE2z7Iy
m+CyAPU15xq/Ajc6LNy4zyAEMUZYdfzf4YV9LHx6/yqPXJ8cGrTjCNksz8vMgJBNoKTNIGQDFNY491F9
YY0F2HYXIfk6z8ttQcheHxyU28lkto1uX7LP/Xaz7vjfDgeI34fdTzoAVzoA7Uc+tP5e/a/h+scC9We8
+jNe/QFAjoFT/3ao/qwNMc6OOT3AIkC9HkA2z3Eys413eyCGAF6GGx1Se4SStldzwU6gQfsOoH280wuA
wO2BoSGZGX4h69ScdytTWIsD8HeTSTkGILeTty/FYde96wICp+4c7L7XHkTg1J/Zzh4gPn/t1Z+CgoKC
goKCgoKCYiuDvGu+gt+zH8DnOzGNY/oDlgu++wYO/virazj0aywn75V/t2N9f9MV/bxmjonT0xPiqJSG
YlXRy+IF77UfMSulxY3vVzhRv703yE9g/jch/v8w/5cQf5is82qQvwvzb4X4e8g6If7rzjVBXH//Ab4w
GcLfF+S/4/7HL9HfD0Ag6YalgaS29EarBlJZb0pLSmMJ8LfDt0yQLG3Zcs+UWqUIUtGo1TTdAqnRqlnK
IkiNpYZlekcehXw+vZBxvw+636OQz2dcTsblZBZGwfdavO9YhoWJ+dnczNHxp3OfKeHblhC1P6F3zwAe
re+Az4z0K6H+fmV8+zAI//8A8Ge3axB70q+E7g6FxcOjfRH3yUl/EzoUsmdDdA/eN4FCf0+EMuv2eR8j
/j0sEL3vJWqBFLbtqUXsR4mH8id5HcJLhtu2jhmvRbgn9F1/7X34Ets/hP6/P8I69Zvyx+7DSsaj8xtc
vxMR9j9j+8kN7P8OAAD//5sI1qIoNQAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
