// Code generated by "esc -o esc.go -pkg convolution2d -private kernels.hsaco"; DO NOT EDIT.

package convolution2d

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9544,
		modtime: 1601744723,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
