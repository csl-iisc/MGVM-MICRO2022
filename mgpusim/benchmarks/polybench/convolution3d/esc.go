// Code generated by "esc -o esc.go -pkg convolution3d -private kernels.hsaco"; DO NOT EDIT.

package convolution3d

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9568,
		modtime: 1601747208,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
