// Code generated by "esc -o esc.go -pkg jacobi1d -private kernels.hsaco"; DO NOT EDIT.

package jacobi1d

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    13760,
		modtime: 1601748514,
		compressed: `
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
wDUAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
