// Code generated by "esc -o esc.go -pkg jacobi2d -private kernels.hsaco"; DO NOT EDIT.

package jacobi2d

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    13760,
		modtime: 1601750409,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
