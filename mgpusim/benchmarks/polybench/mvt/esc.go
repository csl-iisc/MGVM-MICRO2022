// Code generated by "esc -o esc.go -pkg mvt -private kernels.hsaco"; DO NOT EDIT.

package mvt

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    13784,
		modtime: 1601740854,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
