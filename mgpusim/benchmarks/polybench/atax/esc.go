// Code generated by "esc -private -o esc.go -pkg atax ./kernels.hsaco"; DO NOT EDIT.

package atax

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    13616,
		modtime: 1592039480,
		compressed: `
H4sIAAAAAAAC/+xb32/T1hc/vnFS45Z8y7dCgg0JwzZ1QsRK3A5FfYGkpQXRlkAZrJtQZWInDU3syHFQ
g4TJoKv6gDQ27WFP45WH/Q1rJ/EHANreeNgekLZpD7xsj8vk63sT29QEJDaGuB8pOfb5dc/xOSUH2/f6
8dlpxHHHgCAGPwHnHkjeORWkFY8ewrwsCHAMhkCEBADwPr0w3eKCVCB8jthF4cfdQQrDPbu4L74w/T0W
pH67BE6EJhSkdQhSaode0I7md/axrfHPYeePz8WZx7aWgBcHT68ngl7gPnp7JEh5n51A1s/NTWF1Wpu3
cT94fB4GurlRXm5uaqbwoad7AAAGCV+taeWikVJrmvtZbqguKVeuFqupcmk1mx6j644AiMQmlUqJ53Wr
UTGNCYniEylzWEpLF8VTumXo1UZPIkpSSppXa3qPJUmSaqurSytYNyO6jIVW7ZJZ9emN+lWOrWijWG1W
NcpNtdxzdrquG5Oz0mRA2g0Ph6VIF7E0Z5UbgSBEj2wTXk6kR+dadT0gHp3KncstnVssHD802tVaqFwN
Osh2RblqpWxMbCs6r1ab+qmKoVHxTNW8pFbzzVJJt4JabhhUa3pM6XnXNGuhrhb1M021OtF10ZMXi1Ti
YUovqc2qHZ366pubul2rv7nJG88ofMWwo1Mej055PDrlfAuzorM96c/2xbNpvcbZvKSuOlHRNN3wGuN0
qdTQ7Y+eEeCR8X9+/cVXvP7Hr2D9edN4Vl9kn/NPmkX1vFFNmppesMx697eeWLmTiWqVF/RyTTdsL+5s
mghnLLNZJ6LpyqqueXIqLliVK6qtRysEnZPMabwX1Ct6yTLpopLU7bX5Zm1hpnC2N5ZkfJLzQQldak5d
na6q9gXTWvGixk6VD470nbSU/pOWwiatf+0Xt8UmLTZpsUmLTVps0mIzDZu0XqdJS5ZlMer+Huf7vBUh
Y2BgYGBgYGBgYOgHjjwi5vDT3VjfQTIP38Jt/Kw3OKoWfMfJkIzn+USn0+n8F/NHHNriceaJrT0AcBMS
WxIAXIdbm3wntu5GLcSELwUABQFSAG1cQ3DvPgccoMs31pG09t37sLEZQ+IWfjbOiVvDANBG4CD44uE3
gICHzx5yCGGfO1DSiSPk8Dwo3ADKAhQeuWHcEcSDcfj84Q0BgYgSjiCKysDOoewgEhwOJR1XL4Yf1Rce
xQF2fJ9MKmuiqLSHhrJriYTSFoRsO/nVNefyb+t1d51d/GGA+iO3uE8665sAn24CtJ/6sPp79b9J6h8L
1J/z6s959QcAJQYb1wDu3UfuhbrcXodQ/dsIORDjvdoj1O0H198gQo7I8wo3kMB1RwB8HA05PBIdhJLO
HUAHBbcHAMEOhBxheFjhRv6PdQVcGVx7wa19DEBx6x2HvQ/WRARu3ROw70F7CIFbf26XgOuPeIBfu/Vn
YGBgYGBgYGBgYHiTQd81v03esx8k53sIjRP6A5GLvvsGLv74q2O69C6R0/fK7+3efr3ZirGiWxPS7OyU
NC6noVhVjbJ0xXvhR8rKaan//Qo36hMHgvwBwr8b4u8k/F9C/BHq550gfy/h3wrx91M/If577jVBid7+
A3JhFMo/GOQfxf/pHOjtB6CQDdPWQdZaRqNVA7lsNOVltbEM5Nvl2xbItr5q4zO1VimCXDRrNd2wQW60
arZ6CeTGcsO2vCOPQj6fXsrgbwV/j0E+n8GcDOZklsbA/1a8/0SBpanF+dzcycmXeb9pwLc9IWqfQvfe
ATxd50GfGe1bSv19y/n2Y1D+/wDgz07HpPa0byndFwpLgKf7I+6T0z6ndDhkz4fofrJ/AoX+rijltu33
Hkb9e1kgev9LlIMUse2qRexLiYfyp3kdIS7D7VsnjHcjlqf0qL/2PnxN7J9A798hcZv6zfhj92Ej49HF
PtfvTIT9z8T+RB/7vwMAAP//7p0uFTA1AAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
