// Code generated by "esc -o esc.go -pkg correlation -private kernels.hsaco"; DO NOT EDIT.

package correlation

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    18280,
		modtime: 1601649646,
		compressed: `
H4sIAAAAAAAC/+xc328TyR3/7uzY3mycXEivFLir2CKq5Ghi7I2BTU5qkxBIr5dAuFA4rj2Fjb0xDvba
Wm9QUsGenZIQqlOPo31oXy4vfWr7D1SqYqjusVWv0T1VPPQFqeoP6YTaPuJqdmfsXV82EDgOAjtS9uv9
zHxnvrPf78x8Mh7ve8fGjiOOGwSaePgbcORD3LlnGRdGHHnAxhQQYBCiIEIYALCrXLO8xXmlQHGO6vml
cK9XQkdDL+Syr1kmW73SrRcGf0OL4JVMD21Rj/XvrbtmGj+Ents+kk7dNdNh2HrC7HkiaBjulge8Erv0
BNr+0PiIXZz55hU7HhwcQ6TeN4YNjY+MTnzfKbsbAFoprubTmZTeq+bT5O9CSe3tzczMK/E+Wq/1GoBI
y/b29opnNKOULegDEks/kBI9Ulx6V3xTM3QtVxoQJalXOqHmtUYZSZLymqpPXbSLiOR+ciE/Xci5inW5
SgxeTHfZpcZUPTOnZhpVnSxq+tEx6agnt26TbYssvWvnDhkZ2xiSfAwS2c3phaLmKdE1MnR6aOr0uYlj
B7rqpSazP/LWodSzhnLZjD6wYdYZNTenvZnV0yx7NFeYVnPDczMzmuEtRcxgpY73yY3a02ljsqimtFNz
am6gXkUjP5ViOU4a0WbUuZzp3/u0aqovbu9ncgXVnNrE/fX++/c+6d/7pH/vhxds6CE7vuWO5f27lNXN
L70zbzxWZ/Rt3JkvaLB8N5tOa7oT7ydnZkqa+fYmBh5OPvn2zz3l9t95Cu2fKOibxYXykDNVYNVTs2p8
LmdmR41senJBTw0Zmce28GghrU0YhWKdYRD2oxqZSS2T13TTMV5hdY0ahbkizTqendfSTn6cZk8Y2Uuq
qfkX8FZOu88qP6te0maMAmtUkurD4MRcfnJ04q1S/VElXDlnPDlHaMa4On88p5pnC8ZFx2i7TvnQ4Y1Z
XclMb07qGgUCTvekWU3JTAeENiC0zxWh1YqlgKUHLD1g6QFLD/hwwNKfBEvvP7xtWHr/o7F0Q0vPpbTN
ibqnTMDVA64ecPWAqwe0NqC1Aa0NaG1gVUBrH5/WKn60Vnk0WpsqGMbmpNZV4sugtKWFfF41A173YvY+
oD8B/QnoT0A0Aqueie/e488a/enzoz+JB3/5HovFRP/zpBwA7OHDAAo9T8s7so3h9Lztf+jB1d0MP+Tc
d9Nzp10Ml537HtSon/3tsY/Fct0IDyJy/85i7m74a2eX7vx5/K9/4c//OkTP/PIPODvMjrqCi6OB6wgo
eDYkoXGOAIIUpBczcXTccPbpbr5xEN0nDcFv4YZ91ts7ebzt+twOEe/ZdIzDtVqt9iz2nwfxVgcA/BiF
b0kA8B68X/0DoFuYfuZr/DKxXOCFmwKALALIHKxcmZWurvXASpXnxFuknjISLOBFC8GH6x8JCFAFV4l+
CCELYyxzkbACULyDMMAOWKqS8quA9oXgg/VFQBBByAqLosy1RRWAiTshAA7dRhVUjlQ5ALkI71cxLyBW
x2e1pWoNgQVQLtQQIvLgLDfyCfHmPXsiRCJ3DFmYRyLppK1n97hSBSjX/7bq/2Ef/5/3+L9lW/l/F/V/
N3kWXMP3uIYd3+OG7xH1/evE92hj3xO/Ev1WJFoixnIoElb4Cq4y370KS3bcdNjrmuP/FoQsgfqfxUaE
5tXjqL1d5nZ01OODyAhAhL/NV/hypIponER4hDle6GHt/WursXISLA5uXr7n/FJlw7h5Xv62Gv8VEv8t
m8d/Z/2XMtsg/nkn/sk46KZxP+ya/7im+Q/I/HcDPmiBlpuoBSqAkNyOVq4AfPxJG3mSs+VlkBbXZDI+
wBkfLNbLCFvAhy0Olta5V8hz/3D9I+zEN4dEC7AghyKiwnEgk/gHGv8kzjEADiHRwgByiEf2GAAS+yhq
IYzlcCSsRE+IVg3Ka06cR+04t8dDi4BJHDukcYLEMyJ4KIRFMg4I6bwXDQOKYBEdwxYOYZEPYXvOdEjl
8xn7jxL/Iz7z/4Trcxvs2Ebzf9hZ/wHZ48Bv7UcCqiBAMpC5FjlrwGU7xpfWOc6JcWc8CfKqIO7DJHYF
NndjCwuCjFpF5R4ZA1C8gxFABQkyCCtXrNn7y1lYqXJlVL3Nrazth6UqgqV1IMt9CMsQIesOyBWIyqvR
dmddiCJAWJRDCOx1AXZ0KGVucQ3zZJ631wVUAZCvtrfLq2J0X7mjQ2kheiICEEUZYPnKLFq8FkI7LdzZ
Kbd+9WWFjAliWwsCsND96/+uXa9a6P61MreyZgn/WB6E5eoqwg5nQYSzgBUWsRzmQLmKRRlW+RsAi2tl
iCpocfGnRA9H2uXV9g7H5nYEbnupnRDmd1kc/GSN4zutEL/TWu18eR/JawV4iUeShXbulNuIfieC6Dd2
KdDZKUcQtsJ79sjo66/a9bSRRey2WBHLkSrpB9oL9vpH6v9nzXmemAMIoU4L8V6biD0tOzqUikD8sXxl
Vli5dlUU5XI0qrA6LOH+9T/WrleduSBIQQpSkLZ/qv/WvMcR7Gfzu6gMUfkpzWerPt3Og//erxWInO/x
/q78Vz0btzeW1S9qxoA0NjYiJRKxeCwudR8sGamD2rypGbqaO5jLXcr3Fo3CrJYyD+ZyaUnTklpSm55W
06mUoqmJZErr79f6klq6L6FO9yW0/qQiH1FTrwGkcqqekS45X7Q+TP2OwhZa2GwfhTzNywkvHqH475vw
Nop/1oR/heK/6PPiuyn+9yZ8L8W7k178mxTff8SLf4vi8de9uEzxT/u9uMLqH/Di36b4+YFmfujgP2/C
v8eiTfHiP2R43IvrDD/kxRcZLnvxj+1/YyON9yzQ9DOffexVn33s3/jsY//OZx8bYnrB1CCWXtBLC3mI
ZfS52AW1dAHoleCmATFTmzftOzWfTUEsVcjnNd2EWGkhb6rTECtdKJmG88mRMDwcn+qzr0n7egiGhxM2
krCRhI3IUzIMD/dNJRK2SNrXw/ZVsa/97t3w/blCSvXsiVPEszNOscb+OAW2vK0+NXLuxND4G0e/oH3K
iHuP3+/9FuCdh9zjsNWt3+OV8675jnO9x4PNgy8BwP9qtQLTZ/Mdkz1N5gjw+fEbcuWz+ZHJeJM+bpJ7
6fcfqGk+ZlLecD5qpC73O1A2eW+KXwW9VJd9B+P3PpNQU//p603gMK2yaZhDkepXfZpn8jtu37lSfIi2
gxrrV+cG/ht12+5KgzQ4zz3g+Z3y0f8l1f/TA/T/HwAA///dVry1aEcAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
