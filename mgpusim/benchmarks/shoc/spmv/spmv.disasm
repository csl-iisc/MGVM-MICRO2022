	.text
	.hsa_code_object_version 2,1
	.hsa_code_object_isa 8,0,3,"AMD","AMDGPU"
	.protected	spmv_csr_scalar_kernel ; -- Begin function spmv_csr_scalar_kernel
	.globl	spmv_csr_scalar_kernel
	.p2align	8
	.type	spmv_csr_scalar_kernel,@function
	.amdgpu_hsa_kernel spmv_csr_scalar_kernel
spmv_csr_scalar_kernel:                 ; @spmv_csr_scalar_kernel
	.amd_kernel_code_t
		amd_code_version_major = 1
		amd_code_version_minor = 2
		amd_machine_kind = 1
		amd_machine_version_major = 8
		amd_machine_version_minor = 0
		amd_machine_version_stepping = 3
		kernel_code_entry_byte_offset = 256
		kernel_code_prefetch_byte_size = 0
		granulated_workitem_vgpr_count = 2
		granulated_wavefront_sgpr_count = 4
		priority = 0
		float_mode = 192
		priv = 0
		enable_dx10_clamp = 1
		debug_mode = 0
		enable_ieee_mode = 1
		enable_wgp_mode = 0
		enable_mem_ordered = 0
		enable_fwd_progress = 0
		enable_sgpr_private_segment_wave_byte_offset = 0
		user_sgpr_count = 8
		enable_trap_handler = 0
		enable_sgpr_workgroup_id_x = 1
		enable_sgpr_workgroup_id_y = 0
		enable_sgpr_workgroup_id_z = 0
		enable_sgpr_workgroup_info = 0
		enable_vgpr_workitem_id = 0
		enable_exception_msb = 0
		granulated_lds_size = 0
		enable_exception = 0
		enable_sgpr_private_segment_buffer = 1
		enable_sgpr_dispatch_ptr = 1
		enable_sgpr_queue_ptr = 0
		enable_sgpr_kernarg_segment_ptr = 1
		enable_sgpr_dispatch_id = 0
		enable_sgpr_flat_scratch_init = 0
		enable_sgpr_private_segment_size = 0
		enable_sgpr_grid_workgroup_count_x = 0
		enable_sgpr_grid_workgroup_count_y = 0
		enable_sgpr_grid_workgroup_count_z = 0
		enable_wavefront_size32 = 0
		enable_ordered_append_gds = 0
		private_element_size = 1
		is_ptr64 = 1
		is_dynamic_callstack = 0
		is_debug_enabled = 0
		is_xnack_enabled = 0
		workitem_private_segment_byte_size = 0
		workgroup_group_segment_byte_size = 0
		gds_segment_byte_size = 0
		kernarg_segment_byte_size = 104
		workgroup_fbarrier_count = 0
		wavefront_sgpr_count = 35
		workitem_vgpr_count = 12
		reserved_vgpr_first = 0
		reserved_vgpr_count = 0
		reserved_sgpr_first = 0
		reserved_sgpr_count = 0
		debug_wavefront_private_segment_offset_sgpr = 0
		debug_private_segment_buffer_sgpr = 0
		kernarg_segment_alignment = 4
		group_segment_alignment = 4
		private_segment_alignment = 4
		wavefront_size = 6
		call_convention = -1
		runtime_loader_kernel_symbol = 0
	.end_amd_kernel_code_t
; %bb.0:
	s_load_dword s2, s[4:5], 0x4
	s_load_dword s3, s[6:7], 0x20
	s_load_dwordx2 s[0:1], s[6:7], 0x30
	s_mov_b32 s10, s9
	s_mov_b32 s32, s10
	s_waitcnt lgkmcnt(0)
	s_and_b32 s1, s2, 0xffff
	s_mul_i32 s8, s8, s1
	v_add_u32_e32 v0, vcc, s8, v0
	v_add_u32_e32 v0, vcc, s0, v0
	v_cmp_gt_i32_e32 vcc, s3, v0
	s_and_saveexec_b64 s[0:1], vcc
	; mask branch BB0_6
	s_cbranch_execz BB0_6
BB0_1:
	s_load_dwordx2 s[2:3], s[6:7], 0x18
	v_mov_b32_e32 v1, 0
	v_mov_b32_e32 v2, 0
	v_mov_b32_e32 v3, v0
	v_add_u32_e32 v4, vcc, 0, v1
	v_ashrrev_i64 v[6:7], 30, v[2:3]
	v_addc_u32_e32 v5, vcc, 1, v0, vcc
	s_load_dwordx2 s[0:1], s[6:7], 0x28
	v_ashrrev_i64 v[3:4], 30, v[4:5]
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v1, s3
	v_add_u32_e32 v5, vcc, s2, v6
	v_addc_u32_e32 v6, vcc, v1, v7, vcc
	v_mov_b32_e32 v7, s3
	v_add_u32_e32 v3, vcc, s2, v3
	v_addc_u32_e32 v4, vcc, v7, v4, vcc
	flat_load_dword v3, v[3:4]
	flat_load_dword v4, v[5:6]
	v_ashrrev_i32_e32 v1, 31, v0
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_cmp_lt_i32_e32 vcc, v4, v3
	s_and_saveexec_b64 s[2:3], vcc
	; mask branch BB0_5
	s_cbranch_execz BB0_5
BB0_2:                                  ; %.preheader.preheader
	s_load_dwordx2 s[8:9], s[6:7], 0x0
	s_load_dwordx2 s[4:5], s[6:7], 0x8
	s_load_dwordx2 s[6:7], s[6:7], 0x10
	v_ashrrev_i32_e32 v5, 31, v4
	v_lshlrev_b64 v[6:7], 2, v[4:5]
	v_sub_u32_e32 v3, vcc, v3, v4
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v2, s9
	v_add_u32_e32 v4, vcc, s8, v6
	v_addc_u32_e32 v5, vcc, v2, v7, vcc
	v_mov_b32_e32 v2, s7
	v_add_u32_e32 v6, vcc, s6, v6
	v_addc_u32_e32 v7, vcc, v2, v7, vcc
	v_mov_b32_e32 v2, 0
	s_mov_b64 s[6:7], 0
BB0_3:                                  ; %.preheader
                                        ; =>This Inner Loop Header: Depth=1
	flat_load_dword v8, v[6:7]
	v_add_u32_e32 v3, vcc, -1, v3
	flat_load_dword v10, v[4:5]
	v_add_u32_e32 v4, vcc, 4, v4
	v_addc_u32_e32 v5, vcc, 0, v5, vcc
	v_add_u32_e32 v6, vcc, 4, v6
	v_addc_u32_e32 v7, vcc, 0, v7, vcc
	v_cmp_eq_u32_e32 vcc, 0, v3
	v_mov_b32_e32 v11, s5
	s_or_b64 s[6:7], vcc, s[6:7]
	s_waitcnt vmcnt(1) lgkmcnt(1)
	v_ashrrev_i32_e32 v9, 31, v8
	v_lshlrev_b64 v[8:9], 2, v[8:9]
	v_add_u32_e32 v8, vcc, s4, v8
	v_addc_u32_e32 v9, vcc, v11, v9, vcc
	flat_load_dword v8, v[8:9]
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_mac_f32_e32 v2, v10, v8
	s_andn2_b64 exec, exec, s[6:7]
	s_cbranch_execnz BB0_3
; %bb.4:                                ; %Flow
	s_or_b64 exec, exec, s[6:7]
BB0_5:                                  ; %Flow6
	s_or_b64 exec, exec, s[2:3]
	v_lshlrev_b64 v[0:1], 2, v[0:1]
	v_mov_b32_e32 v3, s1
	v_add_u32_e32 v0, vcc, s0, v0
	v_addc_u32_e32 v1, vcc, v3, v1, vcc
	flat_store_dword v[0:1], v2
BB0_6:
	s_endpgm
.Lfunc_end0:
	.size	spmv_csr_scalar_kernel, .Lfunc_end0-spmv_csr_scalar_kernel
                                        ; -- End function
	.section	.AMDGPU.csdata
; Kernel info:
; codeLenInByte = 396
; NumSgprs: 35
; NumVgprs: 12
; ScratchSize: 0
; MemoryBound: 0
; FloatMode: 192
; IeeeMode: 1
; LDSByteSize: 0 bytes/workgroup (compile time only)
; SGPRBlocks: 4
; VGPRBlocks: 2
; NumSGPRsForWavesPerEU: 35
; NumVGPRsForWavesPerEU: 12
; Occupancy: 10
; WaveLimiterHint : 1
; COMPUTE_PGM_RSRC2:USER_SGPR: 8
; COMPUTE_PGM_RSRC2:TRAP_HANDLER: 0
; COMPUTE_PGM_RSRC2:TGID_X_EN: 1
; COMPUTE_PGM_RSRC2:TGID_Y_EN: 0
; COMPUTE_PGM_RSRC2:TGID_Z_EN: 0
; COMPUTE_PGM_RSRC2:TIDIG_COMP_CNT: 0
	.text
	.protected	spmv_csr_vector_kernel ; -- Begin function spmv_csr_vector_kernel
	.globl	spmv_csr_vector_kernel
	.p2align	8
	.type	spmv_csr_vector_kernel,@function
	.amdgpu_hsa_kernel spmv_csr_vector_kernel
spmv_csr_vector_kernel:                 ; @spmv_csr_vector_kernel
	.amd_kernel_code_t
		amd_code_version_major = 1
		amd_code_version_minor = 2
		amd_machine_kind = 1
		amd_machine_version_major = 8
		amd_machine_version_minor = 0
		amd_machine_version_stepping = 3
		kernel_code_entry_byte_offset = 256
		kernel_code_prefetch_byte_size = 0
		granulated_workitem_vgpr_count = 3
		granulated_wavefront_sgpr_count = 4
		priority = 0
		float_mode = 192
		priv = 0
		enable_dx10_clamp = 1
		debug_mode = 0
		enable_ieee_mode = 1
		enable_wgp_mode = 0
		enable_mem_ordered = 0
		enable_fwd_progress = 0
		enable_sgpr_private_segment_wave_byte_offset = 0
		user_sgpr_count = 8
		enable_trap_handler = 0
		enable_sgpr_workgroup_id_x = 1
		enable_sgpr_workgroup_id_y = 0
		enable_sgpr_workgroup_id_z = 0
		enable_sgpr_workgroup_info = 0
		enable_vgpr_workitem_id = 0
		enable_exception_msb = 0
		granulated_lds_size = 0
		enable_exception = 0
		enable_sgpr_private_segment_buffer = 1
		enable_sgpr_dispatch_ptr = 1
		enable_sgpr_queue_ptr = 0
		enable_sgpr_kernarg_segment_ptr = 1
		enable_sgpr_dispatch_id = 0
		enable_sgpr_flat_scratch_init = 0
		enable_sgpr_private_segment_size = 0
		enable_sgpr_grid_workgroup_count_x = 0
		enable_sgpr_grid_workgroup_count_y = 0
		enable_sgpr_grid_workgroup_count_z = 0
		enable_wavefront_size32 = 0
		enable_ordered_append_gds = 0
		private_element_size = 1
		is_ptr64 = 1
		is_dynamic_callstack = 0
		is_debug_enabled = 0
		is_xnack_enabled = 0
		workitem_private_segment_byte_size = 0
		workgroup_group_segment_byte_size = 0
		gds_segment_byte_size = 0
		kernarg_segment_byte_size = 112
		workgroup_fbarrier_count = 0
		wavefront_sgpr_count = 35
		workitem_vgpr_count = 13
		reserved_vgpr_first = 0
		reserved_vgpr_count = 0
		reserved_sgpr_first = 0
		reserved_sgpr_count = 0
		debug_wavefront_private_segment_offset_sgpr = 0
		debug_private_segment_buffer_sgpr = 0
		kernarg_segment_alignment = 4
		group_segment_alignment = 4
		private_segment_alignment = 4
		wavefront_size = 6
		call_convention = -1
		runtime_loader_kernel_symbol = 0
	.end_amd_kernel_code_t
; %bb.0:
	s_load_dwordx4 s[12:15], s[6:7], 0x20
	s_mov_b32 s2, 0x4f800000
	s_load_dword s0, s[4:5], 0x4
	s_mov_b32 s16, s9
	s_mov_b32 m0, -1
	s_waitcnt lgkmcnt(0)
	s_ashr_i32 s11, s13, 31
	v_cvt_f32_u32_e32 v1, s13
	v_cvt_f32_u32_e32 v2, s11
	s_and_b32 s3, s0, 0xffff
	s_sub_u32 s4, 0, s13
	s_subb_u32 s5, 0, s11
	v_mac_f32_e32 v1, s2, v2
	v_rcp_f32_e32 v1, v1
	s_mov_b32 s32, s16
	v_mul_f32_e32 v1, 0x5f7ffffc, v1
	v_mul_f32_e32 v2, 0x2f800000, v1
	v_trunc_f32_e32 v2, v2
	v_mac_f32_e32 v1, 0xcf800000, v2
	v_cvt_u32_f32_e32 v1, v1
	v_cvt_u32_f32_e32 v3, v2
	v_mul_hi_u32 v4, s4, v1
	v_mul_lo_u32 v2, s4, v3
	v_mul_lo_u32 v6, s5, v1
	v_mul_lo_u32 v5, s4, v1
	v_add_u32_e32 v2, vcc, v4, v2
	v_add_u32_e32 v2, vcc, v6, v2
	v_mul_hi_u32 v4, v1, v5
	v_mul_lo_u32 v6, v1, v2
	v_mul_hi_u32 v7, v1, v2
	v_mul_hi_u32 v8, v3, v2
	v_mul_lo_u32 v2, v3, v2
	v_add_u32_e32 v4, vcc, v4, v6
	v_addc_u32_e32 v6, vcc, 0, v7, vcc
	v_mul_lo_u32 v7, v3, v5
	v_mul_hi_u32 v5, v3, v5
	v_add_u32_e32 v4, vcc, v7, v4
	v_addc_u32_e32 v4, vcc, v6, v5, vcc
	v_addc_u32_e32 v5, vcc, 0, v8, vcc
	v_add_u32_e32 v2, vcc, v4, v2
	v_add_u32_e64 v1, s[0:1], v1, v2
	v_addc_u32_e32 v4, vcc, 0, v5, vcc
	v_addc_u32_e64 v2, vcc, v3, v4, s[0:1]
	v_mul_lo_u32 v5, s4, v2
	v_mul_hi_u32 v6, s4, v1
	v_mul_lo_u32 v7, s5, v1
	v_add_u32_e32 v5, vcc, v6, v5
	v_mul_lo_u32 v6, s4, v1
	v_add_u32_e32 v5, vcc, v7, v5
	v_mul_lo_u32 v9, v1, v5
	v_mul_hi_u32 v11, v1, v5
	v_mul_hi_u32 v10, v1, v6
	v_mul_hi_u32 v8, v2, v6
	v_mul_lo_u32 v6, v2, v6
	v_mul_hi_u32 v7, v2, v5
	v_add_u32_e32 v9, vcc, v10, v9
	v_addc_u32_e32 v10, vcc, 0, v11, vcc
	v_mul_lo_u32 v2, v2, v5
	v_add_u32_e32 v6, vcc, v6, v9
	v_addc_u32_e32 v6, vcc, v10, v8, vcc
	v_addc_u32_e32 v5, vcc, 0, v7, vcc
	v_add_u32_e32 v2, vcc, v6, v2
	v_addc_u32_e32 v5, vcc, 0, v5, vcc
	v_add_u32_e32 v3, vcc, v3, v4
	v_addc_u32_e64 v3, vcc, v3, v5, s[0:1]
	v_add_u32_e32 v1, vcc, v1, v2
	v_addc_u32_e32 v2, vcc, 0, v3, vcc
	v_mul_hi_u32 v4, s3, v1
	v_mul_lo_u32 v3, s3, v2
	v_mul_hi_u32 v5, s3, v2
	v_mul_hi_u32 v1, 0, v1
	v_mul_hi_u32 v2, 0, v2
	v_add_u32_e32 v3, vcc, v4, v3
	v_addc_u32_e32 v4, vcc, 0, v5, vcc
	v_add_u32_e32 v3, vcc, 0, v3
	v_addc_u32_e32 v1, vcc, v4, v1, vcc
	v_addc_u32_e32 v2, vcc, 0, v2, vcc
	v_mul_lo_u32 v2, s13, v2
	v_mul_hi_u32 v3, s13, v1
	v_mul_lo_u32 v5, s11, v1
	v_mov_b32_e32 v6, s11
	v_mov_b32_e32 v4, 0
	v_add_u32_e32 v2, vcc, v3, v2
	v_mul_lo_u32 v3, s13, v1
	v_add_u32_e32 v2, vcc, v2, v5
	v_sub_u32_e32 v5, vcc, 0, v2
	v_sub_u32_e32 v3, vcc, s3, v3
	v_subb_u32_e64 v5, s[0:1], v5, v6, vcc
	v_subrev_u32_e64 v6, s[0:1], s13, v3
	v_subbrev_u32_e64 v5, s[0:1], 0, v5, s[0:1]
	s_add_i32 s0, s13, s11
	s_xor_b32 s3, s0, s11
	v_cvt_f32_u32_e32 v7, s3
	v_cmp_le_u32_e64 s[0:1], s11, v5
	v_cndmask_b32_e64 v8, 0, -1, s[0:1]
	v_cmp_le_u32_e64 s[0:1], s13, v6
	v_rcp_iflag_f32_e32 v7, v7
	v_cndmask_b32_e64 v6, 0, -1, s[0:1]
	v_cmp_eq_u32_e64 s[0:1], s11, v5
	v_cndmask_b32_e64 v5, v8, v6, s[0:1]
	v_mul_f32_e32 v7, s2, v7
	v_cvt_u32_f32_e32 v7, v7
	v_add_u32_e64 v6, s[0:1], 2, v1
	v_add_u32_e64 v8, s[0:1], 1, v1
	v_cmp_ne_u32_e64 s[0:1], 0, v5
	v_cndmask_b32_e64 v5, v8, v6, s[0:1]
	v_mul_hi_u32 v6, v7, s3
	v_mul_lo_u32 v8, v7, s3
	v_subb_u32_e32 v2, vcc, 0, v2, vcc
	v_cmp_eq_u32_e64 s[0:1], 0, v6
	v_sub_u32_e32 v9, vcc, 0, v8
	v_cndmask_b32_e64 v6, v8, v9, s[0:1]
	v_mul_hi_u32 v6, v6, v7
	v_cmp_le_u32_e32 vcc, s11, v2
	v_cndmask_b32_e64 v8, 0, -1, vcc
	v_add_u32_e32 v9, vcc, v6, v7
	v_subrev_u32_e32 v6, vcc, v6, v7
	v_cndmask_b32_e64 v6, v6, v9, s[0:1]
	v_mul_hi_u32 v6, v6, v0
	v_cmp_le_u32_e32 vcc, s13, v3
	v_cndmask_b32_e64 v3, 0, -1, vcc
	v_cmp_eq_u32_e32 vcc, s11, v2
	v_cndmask_b32_e32 v2, v8, v3, vcc
	v_mul_lo_u32 v3, v6, s3
	v_cmp_ne_u32_e32 vcc, 0, v2
	v_cndmask_b32_e32 v1, v1, v5, vcc
	v_mul_lo_u32 v1, s8, v1
	v_sub_u32_e32 v2, vcc, v0, v3
	v_cmp_le_u32_e32 vcc, s3, v2
	v_add_u32_e64 v2, s[0:1], -1, v6
	v_cmp_ge_u32_e64 s[0:1], v0, v3
	v_add_u32_e64 v3, s[2:3], 1, v6
	s_and_b64 vcc, vcc, s[0:1]
	v_cndmask_b32_e32 v3, v6, v3, vcc
	v_cndmask_b32_e64 v2, v2, v3, s[0:1]
	v_xor_b32_e32 v2, s11, v2
	v_subrev_u32_e32 v2, vcc, s11, v2
	v_add_u32_e32 v2, vcc, v1, v2
	v_lshlrev_b32_e32 v1, 2, v0
	v_add_u32_e32 v1, vcc, s14, v1
	v_cmp_gt_i32_e32 vcc, s12, v2
	ds_write_b32 v1, v4
	s_and_saveexec_b64 s[0:1], vcc
	; mask branch BB1_13
	s_cbranch_execz BB1_13
BB1_1:
	s_load_dwordx2 s[2:3], s[6:7], 0x18
	v_ashrrev_i32_e32 v3, 31, v2
	v_lshlrev_b64 v[4:5], 2, v[2:3]
	s_load_dwordx2 s[0:1], s[6:7], 0x30
	s_add_i32 s4, s13, -1
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v6, s3
	v_add_u32_e32 v4, vcc, s2, v4
	v_addc_u32_e32 v5, vcc, v6, v5, vcc
	flat_load_dwordx2 v[4:5], v[4:5]
	v_and_b32_e32 v0, s4, v0
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_add_u32_e32 v6, vcc, v4, v0
	v_cmp_lt_i32_e32 vcc, v6, v5
	v_mov_b32_e32 v4, 0
	s_and_saveexec_b64 s[2:3], vcc
	; mask branch BB1_5
	s_cbranch_execz BB1_5
BB1_2:                                  ; %.preheader4.preheader
	s_load_dwordx2 s[4:5], s[6:7], 0x0
	s_load_dwordx2 s[8:9], s[6:7], 0x8
	s_load_dwordx2 s[6:7], s[6:7], 0x10
	v_ashrrev_i32_e32 v7, 31, v6
	s_mov_b32 s10, s13
	v_lshlrev_b64 v[7:8], 2, v[6:7]
	s_lshl_b64 s[10:11], s[10:11], 2
	v_mov_b32_e32 v4, 0
	s_mov_b64 s[14:15], 0
BB1_3:                                  ; %.preheader4
                                        ; =>This Inner Loop Header: Depth=1
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v10, s7
	v_add_u32_e32 v9, vcc, s6, v7
	v_addc_u32_e32 v10, vcc, v10, v8, vcc
	flat_load_dword v9, v[9:10]
	v_mov_b32_e32 v12, s5
	v_add_u32_e32 v11, vcc, s4, v7
	v_addc_u32_e32 v12, vcc, v12, v8, vcc
	flat_load_dword v11, v[11:12]
	v_mov_b32_e32 v12, s11
	v_add_u32_e32 v7, vcc, s10, v7
	v_addc_u32_e32 v8, vcc, v8, v12, vcc
	v_add_u32_e32 v6, vcc, s13, v6
	v_cmp_ge_i32_e32 vcc, v6, v5
	v_mov_b32_e32 v12, s9
	s_or_b64 s[14:15], vcc, s[14:15]
	s_waitcnt vmcnt(1) lgkmcnt(1)
	v_ashrrev_i32_e32 v10, 31, v9
	v_lshlrev_b64 v[9:10], 2, v[9:10]
	v_add_u32_e32 v9, vcc, s8, v9
	v_addc_u32_e32 v10, vcc, v12, v10, vcc
	flat_load_dword v9, v[9:10]
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_mac_f32_e32 v4, v11, v9
	s_andn2_b64 exec, exec, s[14:15]
	s_cbranch_execnz BB1_3
; %bb.4:                                ; %Flow16
	s_or_b64 exec, exec, s[14:15]
BB1_5:                                  ; %Flow17
	s_or_b64 exec, exec, s[2:3]
; %bb.6:                                ; %.loopexit5
	s_cmp_lt_i32 s13, 2
	ds_write_b32 v1, v4
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	s_cbranch_scc1 BB1_11
; %bb.7:                                ; %.preheader.preheader
	v_mov_b32_e32 v4, s13
	s_branch BB1_9
BB1_8:                                  ;   in Loop: Header=BB1_9 Depth=1
	s_or_b64 exec, exec, s[2:3]
	v_cmp_lt_i32_e32 vcc, 3, v4
	s_and_b64 vcc, exec, vcc
	v_mov_b32_e32 v4, v5
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_waitcnt lgkmcnt(0)
	s_cbranch_vccz BB1_11
BB1_9:                                  ; %.preheader
                                        ; =>This Inner Loop Header: Depth=1
	v_lshrrev_b32_e32 v5, 31, v4
	v_add_u32_e32 v5, vcc, v5, v4
	v_ashrrev_i32_e32 v5, 1, v5
	v_cmp_lt_i32_e32 vcc, v0, v5
	s_and_saveexec_b64 s[2:3], vcc
	; mask branch BB1_8
	s_cbranch_execz BB1_8
BB1_10:                                 ;   in Loop: Header=BB1_9 Depth=1
	v_lshlrev_b32_e32 v6, 2, v5
	v_add_u32_e32 v6, vcc, v1, v6
	ds_read_b32 v7, v1
	ds_read_b32 v6, v6
	s_waitcnt lgkmcnt(0)
	v_add_f32_e32 v6, v6, v7
	ds_write_b32 v1, v6
	s_branch BB1_8
BB1_11:                                 ; %.loopexit
	v_cmp_eq_u32_e32 vcc, 0, v0
	s_and_saveexec_b64 s[2:3], vcc
	; mask branch BB1_13
	s_cbranch_execz BB1_13
BB1_12:
	v_lshlrev_b64 v[2:3], 2, v[2:3]
	v_mov_b32_e32 v0, s1
	v_add_u32_e32 v2, vcc, s0, v2
	v_addc_u32_e32 v3, vcc, v0, v3, vcc
	ds_read_b32 v0, v1
	s_waitcnt lgkmcnt(0)
	flat_store_dword v[2:3], v0
BB1_13:
	s_endpgm
.Lfunc_end1:
	.size	spmv_csr_vector_kernel, .Lfunc_end1-spmv_csr_vector_kernel
                                        ; -- End function
	.section	.AMDGPU.csdata
; Kernel info:
; codeLenInByte = 1312
; NumSgprs: 35
; NumVgprs: 13
; ScratchSize: 0
; MemoryBound: 0
; FloatMode: 192
; IeeeMode: 1
; LDSByteSize: 0 bytes/workgroup (compile time only)
; SGPRBlocks: 4
; VGPRBlocks: 3
; NumSGPRsForWavesPerEU: 35
; NumVGPRsForWavesPerEU: 13
; Occupancy: 10
; WaveLimiterHint : 1
; COMPUTE_PGM_RSRC2:USER_SGPR: 8
; COMPUTE_PGM_RSRC2:TRAP_HANDLER: 0
; COMPUTE_PGM_RSRC2:TGID_X_EN: 1
; COMPUTE_PGM_RSRC2:TGID_Y_EN: 0
; COMPUTE_PGM_RSRC2:TGID_Z_EN: 0
; COMPUTE_PGM_RSRC2:TIDIG_COMP_CNT: 0
	.text
	.protected	spmv_ellpackr_kernel ; -- Begin function spmv_ellpackr_kernel
	.globl	spmv_ellpackr_kernel
	.p2align	8
	.type	spmv_ellpackr_kernel,@function
	.amdgpu_hsa_kernel spmv_ellpackr_kernel
spmv_ellpackr_kernel:                   ; @spmv_ellpackr_kernel
	.amd_kernel_code_t
		amd_code_version_major = 1
		amd_code_version_minor = 2
		amd_machine_kind = 1
		amd_machine_version_major = 8
		amd_machine_version_minor = 0
		amd_machine_version_stepping = 3
		kernel_code_entry_byte_offset = 256
		kernel_code_prefetch_byte_size = 0
		granulated_workitem_vgpr_count = 2
		granulated_wavefront_sgpr_count = 4
		priority = 0
		float_mode = 192
		priv = 0
		enable_dx10_clamp = 1
		debug_mode = 0
		enable_ieee_mode = 1
		enable_wgp_mode = 0
		enable_mem_ordered = 0
		enable_fwd_progress = 0
		enable_sgpr_private_segment_wave_byte_offset = 0
		user_sgpr_count = 8
		enable_trap_handler = 0
		enable_sgpr_workgroup_id_x = 1
		enable_sgpr_workgroup_id_y = 0
		enable_sgpr_workgroup_id_z = 0
		enable_sgpr_workgroup_info = 0
		enable_vgpr_workitem_id = 0
		enable_exception_msb = 0
		granulated_lds_size = 0
		enable_exception = 0
		enable_sgpr_private_segment_buffer = 1
		enable_sgpr_dispatch_ptr = 1
		enable_sgpr_queue_ptr = 0
		enable_sgpr_kernarg_segment_ptr = 1
		enable_sgpr_dispatch_id = 0
		enable_sgpr_flat_scratch_init = 0
		enable_sgpr_private_segment_size = 0
		enable_sgpr_grid_workgroup_count_x = 0
		enable_sgpr_grid_workgroup_count_y = 0
		enable_sgpr_grid_workgroup_count_z = 0
		enable_wavefront_size32 = 0
		enable_ordered_append_gds = 0
		private_element_size = 1
		is_ptr64 = 1
		is_dynamic_callstack = 0
		is_debug_enabled = 0
		is_xnack_enabled = 0
		workitem_private_segment_byte_size = 0
		workgroup_group_segment_byte_size = 0
		gds_segment_byte_size = 0
		kernarg_segment_byte_size = 104
		workgroup_fbarrier_count = 0
		wavefront_sgpr_count = 35
		workitem_vgpr_count = 10
		reserved_vgpr_first = 0
		reserved_vgpr_count = 0
		reserved_sgpr_first = 0
		reserved_sgpr_count = 0
		debug_wavefront_private_segment_offset_sgpr = 0
		debug_private_segment_buffer_sgpr = 0
		kernarg_segment_alignment = 4
		group_segment_alignment = 4
		private_segment_alignment = 4
		wavefront_size = 6
		call_convention = -1
		runtime_loader_kernel_symbol = 0
	.end_amd_kernel_code_t
; %bb.0:
	s_load_dword s1, s[4:5], 0x4
	s_load_dword s0, s[6:7], 0x20
	s_load_dwordx2 s[2:3], s[6:7], 0x30
	s_mov_b32 s14, s9
	s_mov_b32 s32, s14
	s_waitcnt lgkmcnt(0)
	s_and_b32 s1, s1, 0xffff
	s_mul_i32 s8, s8, s1
	v_add_u32_e32 v0, vcc, s8, v0
	v_add_u32_e32 v0, vcc, s2, v0
	v_cmp_gt_i32_e32 vcc, s0, v0
	s_and_saveexec_b64 s[2:3], vcc
	; mask branch BB2_6
	s_cbranch_execz BB2_6
BB2_1:
	s_load_dwordx2 s[4:5], s[6:7], 0x18
	v_mov_b32_e32 v2, 0
	v_mov_b32_e32 v3, v0
	v_ashrrev_i64 v[3:4], 30, v[2:3]
	s_load_dwordx2 s[2:3], s[6:7], 0x28
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v5, s5
	v_add_u32_e32 v3, vcc, s4, v3
	v_addc_u32_e32 v4, vcc, v5, v4, vcc
	flat_load_dword v3, v[3:4]
	v_ashrrev_i32_e32 v1, 31, v0
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_cmp_lt_i32_e32 vcc, 0, v3
	s_and_saveexec_b64 s[4:5], vcc
	; mask branch BB2_5
	s_cbranch_execz BB2_5
BB2_2:                                  ; %.preheader.preheader
	s_load_dwordx2 s[8:9], s[6:7], 0x0
	s_load_dwordx2 s[10:11], s[6:7], 0x8
	s_load_dwordx2 s[6:7], s[6:7], 0x10
	v_mov_b32_e32 v2, 0
	s_mov_b64 s[12:13], 0
	v_mov_b32_e32 v4, v0
BB2_3:                                  ; %.preheader
                                        ; =>This Inner Loop Header: Depth=1
	v_ashrrev_i32_e32 v5, 31, v4
	v_lshlrev_b64 v[5:6], 2, v[4:5]
	s_waitcnt lgkmcnt(0)
	v_mov_b32_e32 v8, s9
	v_add_u32_e32 v7, vcc, s8, v5
	v_addc_u32_e32 v8, vcc, v8, v6, vcc
	v_mov_b32_e32 v9, s7
	v_add_u32_e32 v5, vcc, s6, v5
	v_addc_u32_e32 v6, vcc, v9, v6, vcc
	flat_load_dword v5, v[5:6]
	flat_load_dword v7, v[7:8]
	v_add_u32_e32 v3, vcc, -1, v3
	v_cmp_eq_u32_e32 vcc, 0, v3
	v_mov_b32_e32 v9, s11
	s_or_b64 s[12:13], vcc, s[12:13]
	s_waitcnt vmcnt(1) lgkmcnt(1)
	v_ashrrev_i32_e32 v6, 31, v5
	v_lshlrev_b64 v[5:6], 2, v[5:6]
	v_add_u32_e32 v5, vcc, s10, v5
	v_addc_u32_e32 v6, vcc, v9, v6, vcc
	flat_load_dword v5, v[5:6]
	v_add_u32_e32 v4, vcc, s0, v4
	s_waitcnt vmcnt(0) lgkmcnt(0)
	v_mac_f32_e32 v2, v7, v5
	s_andn2_b64 exec, exec, s[12:13]
	s_cbranch_execnz BB2_3
; %bb.4:                                ; %Flow
	s_or_b64 exec, exec, s[12:13]
BB2_5:                                  ; %Flow4
	s_or_b64 exec, exec, s[4:5]
	v_lshlrev_b64 v[0:1], 2, v[0:1]
	v_mov_b32_e32 v3, s3
	v_add_u32_e32 v0, vcc, s2, v0
	v_addc_u32_e32 v1, vcc, v3, v1, vcc
	flat_store_dword v[0:1], v2
BB2_6:
	s_endpgm
.Lfunc_end2:
	.size	spmv_ellpackr_kernel, .Lfunc_end2-spmv_ellpackr_kernel
                                        ; -- End function
	.section	.AMDGPU.csdata
; Kernel info:
; codeLenInByte = 344
; NumSgprs: 35
; NumVgprs: 10
; ScratchSize: 0
; MemoryBound: 0
; FloatMode: 192
; IeeeMode: 1
; LDSByteSize: 0 bytes/workgroup (compile time only)
; SGPRBlocks: 4
; VGPRBlocks: 2
; NumSGPRsForWavesPerEU: 35
; NumVGPRsForWavesPerEU: 10
; Occupancy: 10
; WaveLimiterHint : 1
; COMPUTE_PGM_RSRC2:USER_SGPR: 8
; COMPUTE_PGM_RSRC2:TRAP_HANDLER: 0
; COMPUTE_PGM_RSRC2:TGID_X_EN: 1
; COMPUTE_PGM_RSRC2:TGID_Y_EN: 0
; COMPUTE_PGM_RSRC2:TGID_Z_EN: 0
; COMPUTE_PGM_RSRC2:TIDIG_COMP_CNT: 0

	.ident	"HCC clang version 10.0.0 (/data/jenkins-workspace/compute-rocm-rel-3.0/external/hcc-tot/llvm-project/clang 40756364719e83a2ddd5abe0affe700723cdd852) (based on HCC 3.0.19493-75ea952-4075636 )"
	.section	".note.GNU-stack"
	.addrsig
	.amd_amdgpu_isa "amdgcn-amd-amdhsa--gfx803"
	.amd_amdgpu_hsa_metadata
---
Version:         [ 1, 0 ]
Kernels:
  - Name:            spmv_csr_scalar_kernel
    SymbolName:      'spmv_csr_scalar_kernel@kd'
    Language:        OpenCL C
    LanguageVersion: [ 1, 2 ]
    Args:
      - Name:            val
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            vec
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            cols
        TypeName:        'int*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            rowDelimiters
        TypeName:        'int*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            dim
        TypeName:        int
        Size:            4
        Align:           4
        ValueKind:       ByValue
        ValueType:       I32
        AccQual:         Default
      - Name:            out
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         Default
        IsRestrict:      true
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetX
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetY
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetZ
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenMultiGridSyncArg
        ValueType:       I8
        AddrSpaceQual:   Global
    CodeProps:
      KernargSegmentSize: 104
      GroupSegmentFixedSize: 0
      PrivateSegmentFixedSize: 0
      KernargSegmentAlign: 8
      WavefrontSize:   64
      NumSGPRs:        35
      NumVGPRs:        12
      MaxFlatWorkGroupSize: 256
  - Name:            spmv_csr_vector_kernel
    SymbolName:      'spmv_csr_vector_kernel@kd'
    Language:        OpenCL C
    LanguageVersion: [ 1, 2 ]
    Args:
      - Name:            val
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            vec
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            cols
        TypeName:        'int*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            rowDelimiters
        TypeName:        'int*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            dim
        TypeName:        int
        Size:            4
        Align:           4
        ValueKind:       ByValue
        ValueType:       I32
        AccQual:         Default
      - Name:            vecWidth
        TypeName:        int
        Size:            4
        Align:           4
        ValueKind:       ByValue
        ValueType:       I32
        AccQual:         Default
      - Name:            partialSums
        TypeName:        'float*'
        Size:            4
        Align:           4
        ValueKind:       DynamicSharedPointer
        ValueType:       F32
        PointeeAlign:    4
        AddrSpaceQual:   Local
        AccQual:         Default
      - Name:            out
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         Default
        IsRestrict:      true
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetX
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetY
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetZ
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenMultiGridSyncArg
        ValueType:       I8
        AddrSpaceQual:   Global
    CodeProps:
      KernargSegmentSize: 112
      GroupSegmentFixedSize: 0
      PrivateSegmentFixedSize: 0
      KernargSegmentAlign: 8
      WavefrontSize:   64
      NumSGPRs:        35
      NumVGPRs:        13
      MaxFlatWorkGroupSize: 256
  - Name:            spmv_ellpackr_kernel
    SymbolName:      'spmv_ellpackr_kernel@kd'
    Language:        OpenCL C
    LanguageVersion: [ 1, 2 ]
    Args:
      - Name:            val
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            vec
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            cols
        TypeName:        'int*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            rowLengths
        TypeName:        'int*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       I32
        AddrSpaceQual:   Global
        AccQual:         ReadOnly
        IsConst:         true
        IsRestrict:      true
      - Name:            dim
        TypeName:        int
        Size:            4
        Align:           4
        ValueKind:       ByValue
        ValueType:       I32
        AccQual:         Default
      - Name:            out
        TypeName:        'float*'
        Size:            8
        Align:           8
        ValueKind:       GlobalBuffer
        ValueType:       F32
        AddrSpaceQual:   Global
        AccQual:         Default
        IsRestrict:      true
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetX
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetY
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenGlobalOffsetZ
        ValueType:       I64
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenNone
        ValueType:       I8
        AddrSpaceQual:   Global
      - Size:            8
        Align:           8
        ValueKind:       HiddenMultiGridSyncArg
        ValueType:       I8
        AddrSpaceQual:   Global
    CodeProps:
      KernargSegmentSize: 104
      GroupSegmentFixedSize: 0
      PrivateSegmentFixedSize: 0
      KernargSegmentAlign: 8
      WavefrontSize:   64
      NumSGPRs:        35
      NumVGPRs:        10
      MaxFlatWorkGroupSize: 256
...

	.end_amd_amdgpu_hsa_metadata
