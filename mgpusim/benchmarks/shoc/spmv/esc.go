// Code generated by "esc -private -o esc.go -pkg spmv ./spmv.hsaco"; DO NOT EDIT.

package spmv

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/spmv.hsaco": {
		name:    "spmv.hsaco",
		local:   "./spmv.hsaco",
		size:    18496,
		modtime: 1592039480,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
