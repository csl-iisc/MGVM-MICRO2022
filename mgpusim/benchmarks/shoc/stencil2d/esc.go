// Code generated by "esc -private -o esc.go -pkg stencil2d ./kernels.hsaco"; DO NOT EDIT.

package stencil2d

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    17856,
		modtime: 1592039480,
		compressed: `
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
RQAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
