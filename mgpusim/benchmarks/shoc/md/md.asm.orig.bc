; ModuleID = 'md.cl'
source_filename = "md.cl"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: convergent nofree norecurse nounwind
define protected amdgpu_kernel void @compute_lj_force(<4 x float> addrspace(1)* nocapture %0, <4 x float> addrspace(1)* nocapture readonly %1, i32 %2, i32 addrspace(1)* nocapture readonly %3, float %4, float %5, float %6, i32 %7) local_unnamed_addr #0 !kernel_arg_addr_space !4 !kernel_arg_access_qual !5 !kernel_arg_type !6 !kernel_arg_base_type !7 !kernel_arg_type_qual !8 !kernel_arg_name !9 {
  %9 = tail call i64 @_Z13get_global_idj(i32 0) #3
  %10 = trunc i64 %9 to i32
  %11 = and i64 %9, 4294967295
  %12 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %1, i64 %11
  %13 = load <4 x float>, <4 x float> addrspace(1)* %12, align 16, !tbaa !10
  %14 = icmp sgt i32 %2, 0
  br i1 %14, label %15, label %61

15:                                               ; preds = %8
  %16 = extractelement <4 x float> %13, i64 0
  %17 = extractelement <4 x float> %13, i64 1
  %18 = extractelement <4 x float> %13, i64 2
  %19 = fneg float %6
  br label %20

20:                                               ; preds = %57, %15
  %21 = phi <4 x float> [ zeroinitializer, %15 ], [ %58, %57 ]
  %22 = phi i32 [ 0, %15 ], [ %59, %57 ]
  %23 = mul nsw i32 %22, %7
  %24 = add i32 %23, %10
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32 addrspace(1)* %3, i64 %25
  %27 = load i32, i32 addrspace(1)* %26, align 4, !tbaa !13
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %1, i64 %28
  %30 = load <4 x float>, <4 x float> addrspace(1)* %29, align 16, !tbaa !10
  %31 = extractelement <4 x float> %30, i64 0
  %32 = fsub float %16, %31
  %33 = extractelement <4 x float> %30, i64 1
  %34 = fsub float %17, %33
  %35 = extractelement <4 x float> %30, i64 2
  %36 = fsub float %18, %35
  %37 = fmul float %34, %34
  %38 = tail call float @llvm.fmuladd.f32(float %32, float %32, float %37)
  %39 = tail call float @llvm.fmuladd.f32(float %36, float %36, float %38)
  %40 = fcmp olt float %39, %4
  br i1 %40, label %41, label %57

41:                                               ; preds = %20
  %42 = fdiv float 1.000000e+00, %39, !fpmath !15
  %43 = fmul float %42, %42
  %44 = fmul float %42, %43
  %45 = fmul float %42, %44
  %46 = tail call float @llvm.fmuladd.f32(float %5, float %44, float %19)
  %47 = fmul float %45, %46
  %48 = extractelement <4 x float> %21, i64 0
  %49 = tail call float @llvm.fmuladd.f32(float %32, float %47, float %48)
  %50 = insertelement <4 x float> %21, float %49, i64 0
  %51 = extractelement <4 x float> %21, i64 1
  %52 = tail call float @llvm.fmuladd.f32(float %34, float %47, float %51)
  %53 = insertelement <4 x float> %50, float %52, i64 1
  %54 = extractelement <4 x float> %21, i64 2
  %55 = tail call float @llvm.fmuladd.f32(float %36, float %47, float %54)
  %56 = insertelement <4 x float> %53, float %55, i64 2
  br label %57

57:                                               ; preds = %41, %20
  %58 = phi <4 x float> [ %56, %41 ], [ %21, %20 ]
  %59 = add nuw nsw i32 %22, 1
  %60 = icmp eq i32 %59, %2
  br i1 %60, label %61, label %20

61:                                               ; preds = %57, %8
  %62 = phi <4 x float> [ zeroinitializer, %8 ], [ %58, %57 ]
  %63 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %0, i64 %11
  store <4 x float> %62, <4 x float> addrspace(1)* %63, align 16, !tbaa !10
  ret void
}

; Function Attrs: convergent nounwind readnone
declare hidden i64 @_Z13get_global_idj(i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #2

attributes #0 = { convergent nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-implicitarg-num-bytes"="56" "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denormal-fp-math-f32"="preserve-sign,preserve-sign" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+s-memrealtime,-code-object-v3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { convergent nounwind readnone }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 1, i32 2}
!3 = !{!"clang version 11.0.0 (/src/external/llvm-project/clang 0383ad1cfb0a8e05b0a020e8632400194628b243)"}
!4 = !{i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0}
!5 = !{!"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none"}
!6 = !{!"float4*", !"float4*", !"int", !"int*", !"float", !"float", !"float", !"int"}
!7 = !{!"float __attribute__((ext_vector_type(4)))*", !"float __attribute__((ext_vector_type(4)))*", !"int", !"int*", !"float", !"float", !"float", !"int"}
!8 = !{!"", !"", !"", !"", !"", !"", !"", !""}
!9 = !{!"force", !"position", !"neighCount", !"neighList", !"cutsq", !"lj1", !"lj2", !"inum"}
!10 = !{!11, !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C/C++ TBAA"}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !11, i64 0}
!15 = !{float 2.500000e+00}
