// Code generated by "esc -o bindata.go -pkg md -private kernels.hsaco"; DO NOT EDIT.

package md

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9592,
		modtime: 1648101614,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
