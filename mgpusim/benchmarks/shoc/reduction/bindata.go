// Code generated by "esc -o bindata.go -pkg reduction -private kernels.hsaco"; DO NOT EDIT.

package reduction

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    13904,
		modtime: 1648097883,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
