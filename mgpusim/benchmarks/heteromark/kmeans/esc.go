// Code generated by "esc -private -o esc.go -pkg kmeans ./kernels.hsaco"; DO NOT EDIT.

package kmeans

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    13752,
		modtime: 1592039480,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
