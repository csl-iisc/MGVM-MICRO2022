// Code generated by "esc -o esc.go -pkg pagerank -private kernels.hsaco"; DO NOT EDIT.

package pagerank

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9640,
		modtime: 1563551667,
		compressed: `
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
JQAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
