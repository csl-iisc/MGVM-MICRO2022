// Code generated by "esc -private -o esc.go -pkg aes ./kernels.hsaco"; DO NOT EDIT.

package aes

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    9352,
		modtime: 1592129502,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
