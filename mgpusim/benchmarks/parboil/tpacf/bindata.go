// Code generated by "esc -o bindata.go -pkg tpacf -private kernels.hsaco"; DO NOT EDIT.

package tpacf

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    15432,
		modtime: 1654924366,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
